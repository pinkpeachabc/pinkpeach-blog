{"title":"JavaWeb请求和响应","date":"2020-02-25T00:59:04.000Z","date_formatted":{"ll":"2020年2月25日","L":"2020/02/25","MM-DD":"02-25"},"link":"响应头","comments":true,"tags":["JavaWeb","eclipse"],"categories":["JavaWeb"],"updated":"2020-07-18T13:09:00.225Z","content":"<h2 id=\"request-请求对象、response-响应对象\">request 请求对象、response 响应对象<a title=\"#request-请求对象、response-响应对象\" href=\"#request-请求对象、response-响应对象\"></a></h2>\n<p> </p>\n<h4 id=\"请求和响应的概述\">请求和响应的概述<a title=\"#请求和响应的概述\" href=\"#请求和响应的概述\"></a></h4>\n<p>什么请求: 在浏览器地址栏输入地址,点击回车请求服务器,这个过程就是一个请求过程。</p>\n<p>什么响应: 服务器根据浏览器发送的请求,返回数据到浏览器在网页上进行显示,这个过程就称之为响应。<br>\n </p>\n<h4 id=\"httpservletresponse-对象\">HttpServletResponse 对象<a title=\"#httpservletresponse-对象\" href=\"#httpservletresponse-对象\"></a></h4>\n<p>HttpServletResponse 是一个接口,它的父接囗是 ServletResponse ,在开发中通常使用，响应信息分为三部分:响应行、响应头、响应正文(响应体)</p>\n<p><strong>发送状态码的相关方法：</strong></p>\n<p>设置状态码 setStatus(int sc):参数就是状态码</p>\n<p>常见的状态码:200 响应成功 、302 重定向 、484 请求资源找不到 、500 服务器代码出异常</p>\n<p><strong>错误信息方法：</strong><br>\nsendError(int sc):参数状态码<br>\nsetStatus(int sc, String sm):第一个参数表示状态码,第二个参数就状态码的描述。</p>\n<p> </p>\n<h2 id=\"发送响应消息头相关的方法\">发送响应消息头相关的方法<a title=\"#发送响应消息头相关的方法\" href=\"#发送响应消息头相关的方法\"></a></h2>\n<blockquote>\n<p>响应消息头的数据格式:key- value的形式,有的是一个key,一个 value,有的是一个key,多个 value。</p>\n</blockquote>\n<ul>\n<li>\n<p>设置响应消息头:</p>\n<p>一个 key ,对应一个  value<br>\n<code>setHeader(String key, String value);</code></p>\n<p>比如:</p>\n<p><code>setHeader(&quot;aa&quot;,&quot;A&quot;);</code><br>\n如果:</p>\n<p><code>setHeader(&quot;aa&quot;,&quot;AA&quot;);</code></p>\n<p><code>setHeader(&quot;aa&quot;,&quot;BB&quot;);</code></p>\n<p>最终的结果: aa 这个头对应的值就是 BB</p>\n<p>一个key,对应多个 value<br>\n<code>addHeader(String key, String value);</code></p>\n<p>比如:</p>\n<p><code>addHeader(&quot;aa&quot;,&quot;AA&quot;);</code></p>\n<p><code>addHeader(&quot;aa&quot;,&quot;BB&quot;);</code></p>\n<p>最终的结果: aa 这个头对应的值 AA 和 BB</p>\n</li>\n<li>\n<p>设置响应数据的长度:</p>\n<p>setContentLength(int src) 方法</p>\n</li>\n<li>\n<p>设置处理乱码的方法：<br>\nsetCharacterEncoding(String a);参数就是一个码表格式,比如:“utf-8”<br>\nsetContentType(String a);参数代表响应数据的类型和码表格式,比如:“text/htm1; harset=utf-8”</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p> </p>\n<h2 id=\"发送响应体相关的方法\">发送响应体相关的方法<a title=\"#发送响应体相关的方法\" href=\"#发送响应体相关的方法\"></a></h2>\n<p>第一个方法: <code>getOutputStream()</code>,通过 response 向浏览器返回图片、视频等二进制数据的文件,当然也可以向浏览器、返回文本数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">ServletOutputStream</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> response.getOutputStream();</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">out.write(value.getBytes());</span><br></pre></td></tr></table></figure>\n<p>第二个方法: <code>getWriter()</code>,通常 response 向浏览器返回文本数据,不能向浏览器返回图片、视频等二进制文件。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">///字符流向浏览器输出数据</span></span><br><span class=\"line\"><span class=\"type\">PrintWriter</span> <span class=\"variable\">out</span> <span class=\"operator\">=</span> response.getWriter();</span><br><span class=\"line\">out.print(<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h2 id=\"解决中文输出的乱码问题\">解决中文输出的乱码问题<a title=\"#解决中文输出的乱码问题\" href=\"#解决中文输出的乱码问题\"></a></h2>\n<p>第一种方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Content-Type&quot;</span>,<span class=\"string\">&quot;text/html; charset=utf-8);</span></span><br></pre></td></tr></table></figure>\n<p>第二种方式:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h2 id=\"实现网页的定时跳转并刷新\">实现网页的定时跳转并刷新<a title=\"#实现网页的定时跳转并刷新\" href=\"#实现网页的定时跳转并刷新\"></a></h2>\n<p>定时跳转:从一个注册页面跳转到登录页面,输入之前注册的用户名和密码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.定时跳转:需要用到 Refresh响应头</span></span><br><span class=\"line\">sponse.setHeader(<span class=\"string\">&quot;Refresh&quot;</span>,<span class=\"string\">&quot;5;URL=/chapter04/login.html&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>定时刷新:在当前页面的地址不发生变化,但是当前页面自己定时刷新,页面数据会发生变化。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Refresh&quot;</span>,<span class=\"string\">&quot;5&quot;</span>);</span><br><span class=\"line\">response.getwriter().print (<span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>());</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h2 id=\"实现重定向\">实现重定向<a title=\"#实现重定向\" href=\"#实现重定向\"></a></h2>\n<p> </p>\n<h4 id=\"实现重定向的相关方法：\">实现重定向的相关方法：<a title=\"#实现重定向的相关方法：\" href=\"#实现重定向的相关方法：\"></a></h4>\n<p>第一种方式：302 和 Location 配合使用，实现重定向。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.setStatus(<span class=\"number\">302</span>);</span><br><span class=\"line\">response.setHeader(<span class=\"string\">&quot;Location&quot;</span>,<span class=\"string\">&quot;项目地址/index.html&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>第二种方式：sendRedirect(“项目地址/index.html”);</p>\n<p>重定向通过登录案例来完成：</p>\n<p>需求分析:</p>\n<p>在登录页面输入用户名和密码,在 LoginServlet 里面,判断用户名和密码是否正确。如果输入错误,会重新定向到登录界面,如果正确,跳转到欢迎页面。获取登录页面提交的用户名和密码: <code>request. getParameter()</code> 方法。</p>\n<p>重定向的特点:</p>\n<ul>\n<li>浏览器地址栏发生变化</li>\n<li>发送了两次请求。都是由浏览器发送的请求</li>\n</ul>\n<p>重定向的路径:</p>\n<ul>\n<li>由于是浏览器发送得到请求,所以路径必须要带项目名称。</li>\n</ul>\n<p> </p>\n<h2 id=\"httpservletrequest请求对象\">HttpServletRequest请求对象<a title=\"#httpservletrequest请求对象\" href=\"#httpservletrequest请求对象\"></a></h2>\n<p>HttpServletRequest 它是一个按口,它的父接囗 ServletRequest,在开发中,常用的是带协议的请求对象。请求消息:请求行,请求头,请求参数<br>\n </p>\n<h4 id=\"获取请求行消息的相关方法:\">获取请求行消息的相关方法:<a title=\"#获取请求行消息的相关方法:\" href=\"#获取请求行消息的相关方法:\"></a></h4>\n<p>获取请求提交的方式: <code>getMethod();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> request.getMethod();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;请求方式：&quot;</span>+ method);</span><br></pre></td></tr></table></figure>\n<p>获取请求的协议: <code>getProtocol();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">protocol</span> <span class=\"operator\">=</span> request.getProtocol();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;请求的协议&quot;</span>+ protocol);</span><br></pre></td></tr></table></figure>\n<p>获取项目名称: <code>getContextPath();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">contextPath</span> <span class=\"operator\">=</span> request.getContextPath();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;项目路径：&quot;</span>+contextPath);</span><br></pre></td></tr></table></figure>\n<p>获取 servlet 路径: <code>getServletPath();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">servletPath</span> <span class=\"operator\">=</span> request.getServletPath();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;servlet路径&quot;</span>+servletPath);</span><br></pre></td></tr></table></figure>\n<p>获取请求路径: <code>getRequsetURI();  getRequestURL();</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">uri</span> <span class=\"operator\">=</span> request.getRequestURI();</span><br><span class=\"line\"><span class=\"type\">StringBuffer</span> <span class=\"variable\">url</span> <span class=\"operator\">=</span> request.getRequestURL();</span><br><span class=\"line\">System.out.println(<span class=\"string\">&quot;uri对应的值：&quot;</span> + uri + <span class=\"string\">&quot;url对应的值&quot;</span> + url);</span><br></pre></td></tr></table></figure>\n<p>url 对应的值:/项目名称/servlet路径<br>\nurl 对应的值:<a href=\"http://localhost:8080/url\">http://localhost:8080/url</a>\t<br>\n </p>\n<h4 id=\"获取请求消息头相关的方法\">获取请求消息头相关的方法<a title=\"#获取请求消息头相关的方法\" href=\"#获取请求消息头相关的方法\"></a></h4>\n<p>根据消息头,获取值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> request.getHeader(消息头的名称);</span><br></pre></td></tr></table></figure>\n<p>获取所有的消息头</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h4 id=\"获取请求参数相关的方法\">获取请求参数相关的方法<a title=\"#获取请求参数相关的方法\" href=\"#获取请求参数相关的方法\"></a></h4>\n<p>根据 name 属性值,获取用户输入的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> getParameter(name属性对应的值);</span><br></pre></td></tr></table></figure>\n<p>根据 name 属性值,获取用户选择的值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String[] vaules = getParametervalues(name属性对应的值);</span><br></pre></td></tr></table></figure>\n<p>没有参数,获取所有值</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Map&lt;String, String[]&gt; map = getparameterMap();</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h4 id=\"解决请求参数的中文乱码问题:\">解决请求参数的中文乱码问题:<a title=\"#解决请求参数的中文乱码问题:\" href=\"#解决请求参数的中文乱码问题:\"></a></h4>\n<p>中文乱码处理分两种情况</p>\n<p>第一种情况:处理 get 方式提交的中文乱码</p>\n<p>使用的 String 的构造方法解决的中文乱码: new String(字节数组,编码格式);</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">newvalue</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(value <span class=\"title function_\">getBytes</span><span class=\"params\">(<span class=\"string\">&quot;IS08859-1&quot;</span>)</span>,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p>第二种情况:处理 post 请求的中文乱码<br>\npost提交,会把参数首先提交到 request 对象的缓冲 区中,缓冲区默认编码是 ISO8859-1,不支持中文<br>\n处理方法:把 request 缓冲区的编码给设置成支持中文的码表格式</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.setCharacterEncoding(<span class=\"string\">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p> </p>\n<h4 id=\"通过-requset对象传递数据\">通过 Requset对象传递数据<a title=\"#通过-requset对象传递数据\" href=\"#通过-requset对象传递数据\"></a></h4>\n<p>什么域对象:在一定的范围内,可以存值和取值。request 域对象:在一次请求中,可以存值和取值。</p>\n<p>存值: <code>setAttribute(String key, Object obj);</code></p>\n<p>取值: <code>Object obj =  getAttribyte(String key);</code></p>\n<p>移除: <code>removeAttribute(String key);</code><br>\n </p>\n<h4 id=\"requestdispatcher-接口\">RequestDispatcher 接口<a title=\"#requestdispatcher-接口\" href=\"#requestdispatcher-接口\"></a></h4>\n<p>在开发中访问到一个 web 资源后,需要服务器跳转到另一个资源去处理请求,可以通过 sendRedirect 重定向<br>\n方法来实现,也可以 RequestDispatcher 转发对象的 forward 方法来实现</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">RequestDispatcher</span> <span class=\"variable\">forwardobj</span> <span class=\"operator\">=</span> request. getRequestDispatcher(<span class=\"string\">&quot;另一个资源的路径&quot;</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>常用方法:</strong></p>\n<p>实现请求转发: <code>forwardobj.forward(request,response);</code></p>\n<p>实现请求包含: <code>forwardobj.include(request,response);</code></p>\n<p><strong>请求转发:</strong></p>\n<p>特点:发送了一次请求,响应一次,和 request 域对象配合使用,可以实现值得传递。</p>\n<p>转发路径:转发动作是在服务器内部实现的,所以转发路径不要携带项目名称。</p>\n<p><strong>请求重定向:</strong></p>\n<p>特点:发送了两次请求,响应了两次,不能和 request 域对象配合使用。</p>\n<p>重定向路径:重定向动作在浏览器端执行的,所以路径需要携带项目名称。</p>\n<p><strong>请求包含:</strong></p>\n<p>特点:发送一次请求,请求包含是由服务器完成。</p>\n<p>请求包含路径:在服务器内部完成的,路径不需要携带项目名称。</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/00831rSTly1gcd5gaqk3nj31400u0ndn.jpg\" alt=\"重定向与转发\" loading=\"lazy\" class=\"φbp\"></p>\n","prev":{"title":"cookie与Session","link":"JavaWeb-会话"},"next":{"title":"Blog定位方向和主题选择","link":"theme-change"},"plink":"https://pinkpeachabc.cn/响应头/","toc":[{"id":"request-请求对象、response-响应对象","title":"request 请求对象、response 响应对象","index":"1"},{"id":"发送响应消息头相关的方法","title":"发送响应消息头相关的方法","index":"2"},{"id":"发送响应体相关的方法","title":"发送响应体相关的方法","index":"3"},{"id":"解决中文输出的乱码问题","title":"解决中文输出的乱码问题","index":"4"},{"id":"实现网页的定时跳转并刷新","title":"实现网页的定时跳转并刷新","index":"5"},{"id":"实现重定向","title":"实现重定向","index":"6"},{"id":"httpservletrequest请求对象","title":"HttpServletRequest请求对象","index":"7"}],"reward":true,"copyright":{"author":"PinkPeach","link":"<a href=\"https://pinkpeachabc.cn/响应头/\" title=\"JavaWeb请求和响应\">https://pinkpeachabc.cn/响应头/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}