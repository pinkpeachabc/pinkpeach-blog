{"title":"cookie与Session","date":"2020-02-27T12:33:57.000Z","date_formatted":{"ll":"2020年2月27日","L":"2020/02/27","MM-DD":"02-27"},"link":"JavaWeb-会话","comments":true,"tags":["cookie","session","会话"],"categories":["JavaWeb"],"updated":"2020-08-16T13:30:25.537Z","content":"<h2 id=\"会话概述\">会话概述<a title=\"#会话概述\" href=\"#会话概述\"></a></h2>\n<blockquote>\n<p>什么是会话:从打开浏览器,到访问网页,到最终关闭浏览器,整个过程就是一次会话。</p>\n</blockquote>\n<p><strong>会话的特点</strong></p>\n<p>包含多个请求,一次完整的会话针对一个用户。</p>\n<p><strong>会话管理技术</strong></p>\n<ul>\n<li>第一种: cookie 技术,客户端技术</li>\n<li>第二种: session 技术,服务端技术</li>\n</ul>\n<p><strong>购物车案列</strong></p>\n<blockquote>\n<p>买完商品后,加入购入车,买的商品存到什么对象比较合适?</p>\n</blockquote>\n<ul>\n<li>\n<p>使用 request 域对象保存商品信息<br>\n结论:使用 request 保存商品信息不可以,因为每次发送请求,都会产生一个新的请求对象</p>\n</li>\n<li>\n<p>使用 ServletContext 域对象保存商品信息<br>\n结论:使用 ServletContext对象保存商品信息,可以,但是不合理</p>\n</li>\n</ul>\n<p>所以在开发中,保存会话过程中产生的数据,采用会话管理技术,也就是使用 cookie 和  session 技术来保存会话过程产生的数据。</p>\n<h2 id=\"cookie\">Cookie<a title=\"#cookie\" href=\"#cookie\"></a></h2>\n<blockquote>\n<p>服务器怎样把 cookie 发给客户端</p>\n</blockquote>\n<p><strong>创建 Cookie</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Cookie</span> <span class=\"variable\">cookie</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cookie</span>(String cookieName,String cookieValue);</span><br></pre></td></tr></table></figure>\n<p><strong>向客户端发送 cookie</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">response.addCookie(cookie);</span><br></pre></td></tr></table></figure>\n<p><strong>访问</strong></p>\n<blockquote>\n<p>第一次访问时,请求头当中没有 cookie</p>\n<p>第一次访问时, 响应当中会看到 set-cookie</p>\n<p>再一次访问时,请求头当中就能够看到 cookie 信息</p>\n</blockquote>\n<p>访问服务器的任何资源，一般情况下都会把 cookie 带去过。</p>\n<p><strong>Cookie 默认存储时间</strong></p>\n<blockquote>\n<p>默认 cookie 的是会话级别</p>\n</blockquote>\n<p>打开浏览器，关闭浏览器为一次会话，如果不设置持久化时间，cookie 会存储在浏览器的内存中，浏览器关闭 cookie 信息销毁。</p>\n<p><strong>设置 Cookie 在客户端的存储时间</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setMaxAge(<span class=\"type\">int</span> seconds);</span><br></pre></td></tr></table></figure>\n<p>设置的时间为秒，如果设置持久化时间，cookie 信息会被持久化到浏览器的磁盘文件里，过期会自动删除。</p>\n<p><strong>Cookie 的携带路径</strong></p>\n<blockquote>\n<p>访问某一个资源时，要不要带 cookie 信息。如果每一外资源都携带，会影响传输速度 。如果不设置携带路径，默认情况下会在访问创建 cookie 的 web 资源相同的路径都携带 cookie 信息。</p>\n</blockquote>\n<p>在 myxq/CookieServlet 下创建的 cookie</p>\n<p>在 myxq/下的index.jsp 访问时会携带 cookie</p>\n<p>不是在 myxq 下，不会携带 cookie</p>\n<p><strong>设置 Cookie 携带路径</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setPath(String path);</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setPath(<span class=\"string\">&quot;/CookiePro/cookieServlet&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//只有访问 cookieServlet 才携带 cookie 信息</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setPath(<span class=\"string\">&quot;/CookiePro&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//访问指定的工程时，都会携带 cookie 信息</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setPath(<span class=\"string\">&quot;/&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//访问服务器下部署的所有工程时都会携带 cookie 信息</span></span><br></pre></td></tr></table></figure>\n<p><strong>删除 Cookie</strong></p>\n<blockquote>\n<p>使用同名同路径的持久化时间为0的cookie进行覆盖即可</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cookie.setMaxAge(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n<p><strong>服务器如何获取客户端携带的 Cookie</strong></p>\n<blockquote>\n<p>通过 Request 对象的 getCookies() 方法,获取的是所有的 cookie,要进行遍历，找出自己名称的那一个。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.获取所有的cookie的对象</span></span><br><span class=\"line\">Cookie[] cookies = request.getCookies();</span><br><span class=\"line\"><span class=\"comment\">//2.获取的结果不为空</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>(cookies != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//3.遍历所有的cookie</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(Cookie cookie:cookies)</span><br><span class=\"line\">        <span class=\"comment\">//遍历出每一小时，取出对应的名称</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> cookie.getName();</span><br><span class=\"line\">    \t<span class=\"comment\">//判断名称是否为自己储存的哪一个</span></span><br><span class=\"line\">    \t<span class=\"keyword\">if</span>(name.equals(<span class=\"string\">&quot;pinkpeach&quot;</span>))&#123;</span><br><span class=\"line\">            System.out.println(cookie.getValue());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"session对象\">Session对象<a title=\"#session对象\" href=\"#session对象\"></a></h2>\n<p><strong>什么是 session</strong></p>\n<p>session 是一种会话管理技术, session 用来保存会话过程中的数据,保存的数据存储到服务器端。</p>\n<p>session 原理:基于 cookie 实现的,更确切的说是基于会话级别的 cookie 实现的。</p>\n<p><strong>HttpSession API</strong></p>\n<blockquote>\n<p>session 常用方法</p>\n</blockquote>\n<p>得到 session 的id( JESSIONID对应的值): <code>getId();</code></p>\n<p>设置 session 的生命时长: <code>setMaxInactiveInterval(int interval);</code></p>\n<p>销毁 session: <code>invalidate();</code></p>\n<p>得到 sessIon: <code>HttpSession session = request.getsession();</code></p>\n<p><strong>session 域对象</strong></p>\n<blockquote>\n<p>作用范围一次完整的会话(包含多个请求)</p>\n</blockquote>\n<p>存值: <code>setAttribute(String key, Object obj);</code></p>\n<p>取值: <code>Object obj= getAttribute(String key);</code></p>\n<p>移除: <code>removeAttribute(String key);</code></p>\n<p>总结域对象: request 域对象  session 域对象 servletContext 域对象,作用范围以次变大</p>\n<p><strong>Session超时管理</strong></p>\n<blockquote>\n<p>session对象是由生命时长,它的默认存活时间是30分钟。</p>\n</blockquote>\n<p>具体配置找 tomcat 软件的 conf 下的web.xml文件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">session-config</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">session-timeout</span>&gt;</span>30<span class=\"tag\">&lt;/<span class=\"name\">session-timeout</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>立即销毁 session 对象: <code>invalidate();</code></p>\n","prev":{"title":"JSP的基本语法","link":"JSP的基本语法"},"next":{"title":"JavaWeb请求和响应","link":"响应头"},"plink":"https://pinkpeachabc.cn/JavaWeb-会话/","toc":[{"id":"会话概述","title":"会话概述","index":"1"},{"id":"cookie","title":"Cookie","index":"2"},{"id":"session对象","title":"Session对象","index":"3"}],"reward":true,"copyright":{"author":"PinkPeach","link":"<a href=\"https://pinkpeachabc.cn/JavaWeb-会话/\" title=\"cookie与Session\">https://pinkpeachabc.cn/JavaWeb-会话/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"}}