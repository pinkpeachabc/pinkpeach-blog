<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Pink&#39;s Blog</title>
  
  <subtitle>志存骛远，鹰击长空</subtitle>
  <link href="https://pinkpeachabc.cn/atom.xml" rel="self"/>
  
  <link href="https://pinkpeachabc.cn/"/>
  <updated>2022-06-14T04:04:44.631Z</updated>
  <id>https://pinkpeachabc.cn/</id>
  
  <author>
    <name>PinkPeach</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>免费VPS推荐：Evolution Host</title>
    <link href="https://pinkpeachabc.cn/2022-06-14-%E5%85%8D%E8%B4%B9VPS%E6%8E%A8%E8%8D%90%EF%BC%9AEvolution-Host.html"/>
    <id>https://pinkpeachabc.cn/2022-06-14-%E5%85%8D%E8%B4%B9VPS%E6%8E%A8%E8%8D%90%EF%BC%9AEvolution-Host.html</id>
    <published>2022-06-13T19:18:25.000Z</published>
    <updated>2022-06-14T04:04:44.631Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>今天推荐一款号称永久免费的VPS主机：<a href="https://www.machunjie.com/go/?url=https://evolution-host.com/vps-hosting.php" target="_blank">Evolution Host：https://evolution-host.com/vps-hosting.php</a></p></blockquote><a id="more"></a><h2 id="免费vps推荐：evolution-host">免费VPS推荐：Evolution Host<a title="#免费vps推荐：evolution-host" href="#免费vps推荐：evolution-host"></a></h2><blockquote><p>Evolution Host 是一家自2012年以来一直存在，并且自2013年以来一直在托管解决方案方面进行交易（以前称为<a href="https://evolutionhost.co/" target="_blank">evolutionhost.co</a>.uk）。我们希望每6个月左右为品牌引入新技术，新位置和/或新服务，从而保持与时俱进的吸引力。 我们提供100％专用的KVM资源，具有稳定的CPU时间可用性和高时钟速度。阅读：不进行节流或标记化。我们的VPS特别适合游戏服务器托管，其CPU核心时钟高达5.0Ghz，从而实现了很高的单核性能。高时钟速度对于更传统的工作负载也有好处。</p></blockquote><h2 id="免费vps">免费VPS<a title="#免费vps" href="#免费vps"></a></h2><p>免费VPS配置：</p><ul><li>4Ghz +上的4个CPU内核</li><li>4GB DDR4内存</li><li>80GB SSD或350GB HDD</li><li>1Gb / s端口</li><li>60TB每月传输</li><li>先进的DDoS防护</li><li>Linux或Windows</li><li>欧洲/美国位置</li></ul><h2 id="免费申请">免费申请<a title="#免费申请" href="#免费申请"></a></h2><p>申请地址： <a href="https://evolution-host.com/free-vps.php" target="_blank">→→传送门</a></p><p>We do not accept applications for websites of a pornographic nature. Site popularity and relevancy will be the biggest deciding factor for each applicant.</p><p>Don’t worry if you feel your website won’t be eligible for the spec mentioned above, we may be able to offer you an alternate free VPS package.</p><p><img src="https://s2.loli.net/2022/06/14/UMJn9VxagCbi2ZS.png" alt="FireShot Capture 003 - Extreme CPU frequency VPS Hosting from Evolution Host - evolution-host.com" class="φbs"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;今天推荐一款号称永久免费的VPS主机：&lt;a href=&quot;https://www.machunjie.com/go/?url=https://evolution-host.com/vps-hosting.php&quot; target=&quot;_blank&quot;&gt;Evolution Host：https://evolution-host.com/vps-hosting.php&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="云服务器" scheme="https://pinkpeachabc.cn/categories/%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
    <category term="VPS" scheme="https://pinkpeachabc.cn/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>Vue3快速上手</title>
    <link href="https://pinkpeachabc.cn/vue3.html"/>
    <id>https://pinkpeachabc.cn/vue3.html</id>
    <published>2022-02-22T23:51:31.000Z</published>
    <updated>2022-02-23T09:26:33.881Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><h1 id="vue3快速上手">Vue3快速上手<a title="#vue3快速上手" href="#vue3快速上手"></a></h1><p><img src="https://user-images.githubusercontent.com/499550/93624428-53932780-f9ae-11ea-8d16-af949e16a09f.png" alt="" class="φbs"></p><h2 id="1.vue3简介">1.Vue3简介<a title="#1.vue3简介" href="#1.vue3简介"></a></h2><ul><li>2020年9月18日，Vue.js发布3.0版本，代号：One Piece（海贼王）</li><li>耗时2年多、<a href="https://github.com/vuejs/vue-next/graphs/commit-activity" target="_blank">2600+次提交</a>、<a href="https://github.com/vuejs/rfcs/tree/master/active-rfcs" target="_blank">30+个RFC</a>、<a href="https://github.com/vuejs/vue-next/pulls?q=is%3Apr+is%3Amerged+-author%3Aapp%2Fdependabot-preview+" target="_blank">600+次PR</a>、<a href="https://github.com/vuejs/vue-next/graphs/contributors" target="_blank">99位贡献者</a></li><li>github上的tags地址：<a href="https://github.com/vuejs/vue-next/releases/tag/v3.0.0">https://github.com/vuejs/vue-next/releases/tag/v3.0.0</a></li></ul><h2 id="2.vue3带来了什么">2.Vue3带来了什么<a title="#2.vue3带来了什么" href="#2.vue3带来了什么"></a></h2><h3 id="1.性能的提升">1.性能的提升<a title="#1.性能的提升" href="#1.性能的提升"></a></h3><ul><li><p>打包大小减少41%</p></li><li><p>初次渲染快55%, 更新渲染快133%</p></li><li><p>内存减少54%</p><p>…</p></li></ul><h3 id="2.源码的升级">2.源码的升级<a title="#2.源码的升级" href="#2.源码的升级"></a></h3><ul><li><p>使用Proxy代替defineProperty实现响应式</p></li><li><p>重写虚拟DOM的实现和Tree-Shaking</p><p>…</p></li></ul><h3 id="3.拥抱typescript">3.拥抱TypeScript<a title="#3.拥抱typescript" href="#3.拥抱typescript"></a></h3><ul><li>Vue3可以更好的支持TypeScript</li></ul><h3 id="4.新的特性">4.新的特性<a title="#4.新的特性" href="#4.新的特性"></a></h3><ol><li><p>Composition API（组合API）</p><ul><li>setup配置</li><li>ref与reactive</li><li>watch与watchEffect</li><li>provide与inject</li><li>…</li></ul></li><li><p>新的内置组件</p><ul><li>Fragment</li><li>Teleport</li><li>Suspense</li></ul></li><li><p>其他改变</p><ul><li>新的生命周期钩子</li><li>data 选项应始终被声明为一个函数</li><li>移除keyCode支持作为 v-on 的修饰符</li><li>…</li></ul></li></ol><h1 id="一、创建vue3.0工程">一、创建Vue3.0工程<a title="#一、创建vue3.0工程" href="#一、创建vue3.0工程"></a></h1><h2 id="1.使用-vue-cli-创建">1.使用 vue-cli 创建<a title="#1.使用-vue-cli-创建" href="#1.使用-vue-cli-创建"></a></h2><p>官方文档：<a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create">https://cli.vuejs.org/zh/guide/creating-a-project.html#vue-create</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 查看@vue/cli版本，确保@vue/cli版本在4.5.0以上</span></span><br><span class="line">vue --version</span><br><span class="line"><span class="comment">## 安装或者升级你的@vue/cli</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">## 创建</span></span><br><span class="line">vue create vue_test</span><br><span class="line"><span class="comment">## 启动</span></span><br><span class="line"><span class="built_in">cd</span> vue_test</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h2 id="2.使用-vite-创建">2.使用 vite 创建<a title="#2.使用-vite-创建" href="#2.使用-vite-创建"></a></h2><p>官方文档：<a href="https://v3.cn.vuejs.org/guide/installation.html#vite">https://v3.cn.vuejs.org/guide/installation.html#vite</a></p><p>vite官网：<a href="https://vitejs.cn">https://vitejs.cn</a></p><ul><li>什么是vite？—— 新一代前端构建工具。</li><li>优势如下：<ul><li>开发环境中，无需打包操作，可快速的冷启动。</li><li>轻量快速的热重载（HMR）。</li><li>真正的按需编译，不再等待整个应用编译完成。</li></ul></li><li>传统构建 与 vite构建对比图</li></ul><p><img src="https://cn.vitejs.dev/assets/bundler.37740380.png" alt="" class="φbs"></p><p><img src="https://cn.vitejs.dev/assets/esm.3070012d.png" alt="" class="φbs"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## 创建工程</span></span><br><span class="line">npm init vite-app &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 进入工程目录</span></span><br><span class="line"><span class="built_in">cd</span> &lt;project-name&gt;</span><br><span class="line"><span class="comment">## 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"><span class="comment">## 运行</span></span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h1 id="二、常用-composition-api">二、常用 Composition API<a title="#二、常用-composition-api" href="#二、常用-composition-api"></a></h1><p>官方文档: <a href="https://v3.cn.vuejs.org/guide/composition-api-introduction.html">https://v3.cn.vuejs.org/guide/composition-api-introduction.html</a></p><h2 id="1.拉开序幕的setup">1.拉开序幕的setup<a title="#1.拉开序幕的setup" href="#1.拉开序幕的setup"></a></h2><ol><li>理解：Vue3.0中一个新的配置项，值为一个函数。</li><li>setup是所有<strong style="color:#DD5145">Composition API（组合API）</strong><i style="color:gray;font-weight:bold">“ 表演的舞台 ”</i>。</li><li>组件中所用到的：数据、方法等等，均要配置在setup中。</li><li>setup函数的两种返回值：<ol><li>若返回一个对象，则对象中的属性、方法, 在模板中均可以直接使用。（重点关注！）</li><li><span style="color:#aad">若返回一个渲染函数：则可以自定义渲染内容。（了解）</span></li></ol></li><li>注意点：<ol><li>尽量不要与Vue2.x配置混用<ul><li>Vue2.x配置（data、methos、computed…）中<strong style="color:#DD5145">可以访问到</strong>setup中的属性、方法。</li><li>但在setup中<strong style="color:#DD5145">不能访问到</strong>Vue2.x配置（data、methos、computed…）。</li><li>如果有重名, setup优先。</li></ul></li><li>setup不能是一个async函数，因为返回值不再是return的对象, 而是promise, 模板看不到return对象中的属性。（后期也可以返回一个Promise实例，但需要Suspense和异步组件的配合）</li></ol></li></ol><h2 id="2.ref函数">2.ref函数<a title="#2.ref函数" href="#2.ref函数"></a></h2><ul><li>作用: 定义一个响应式的数据</li><li>语法: <code>const xxx = ref(initValue)</code><ul><li>创建一个包含响应式数据的<strong style="color:#DD5145">引用对象（reference对象，简称ref对象）</strong>。</li><li>JS中操作数据： <code>xxx.value</code></li><li>模板中读取数据: 不需要.value，直接：<code>&lt;div&gt;&#123;&#123;xxx&#125;&#125;&lt;/div&gt;</code></li></ul></li><li>备注：<ul><li>接收的数据可以是：基本类型、也可以是对象类型。</li><li>基本类型的数据：响应式依然是靠<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>完成的。</li><li>对象类型的数据：内部 <i style="color:gray;font-weight:bold">“ 求助 ”</i> 了Vue3.0中的一个新函数—— <code>reactive</code>函数。</li></ul></li></ul><h2 id="3.reactive函数">3.reactive函数<a title="#3.reactive函数" href="#3.reactive函数"></a></h2><ul><li>作用: 定义一个<strong style="color:#DD5145">对象类型</strong>的响应式数据（基本类型不要用它，要用<code>ref</code>函数）</li><li>语法：<code>const 代理对象= reactive(源对象)</code>接收一个对象（或数组），返回一个<strong style="color:#DD5145">代理对象（Proxy的实例对象，简称proxy对象）</strong></li><li>reactive定义的响应式数据是“深层次的”。</li><li>内部基于 ES6 的 Proxy 实现，通过代理对象操作源对象内部数据进行操作。</li></ul><h2 id="4.vue3.0中的响应式原理">4.Vue3.0中的响应式原理<a title="#4.vue3.0中的响应式原理" href="#4.vue3.0中的响应式原理"></a></h2><h3 id="vue2.x的响应式">vue2.x的响应式<a title="#vue2.x的响应式" href="#vue2.x的响应式"></a></h3><ul><li><p>实现原理：</p><ul><li><p>对象类型：通过<code>Object.defineProperty()</code>对属性的读取、修改进行拦截（数据劫持）。</p></li><li><p>数组类型：通过重写更新数组的一系列方法来实现拦截。（对数组的变更方法进行了包裹）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(data, <span class="string">&#x27;count&#x27;</span>, &#123;</span><br><span class="line">    get () &#123;&#125;, </span><br><span class="line">    set () &#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>存在问题：</p><ul><li>新增属性、删除属性, 界面不会更新。</li><li>直接通过下标修改数组, 界面不会自动更新。</li></ul></li></ul><h3 id="vue3.0的响应式">Vue3.0的响应式<a title="#vue3.0的响应式" href="#vue3.0的响应式"></a></h3><ul><li>实现原理:<ul><li>通过Proxy（代理）:  拦截对象中任意属性的变化, 包括：属性值的读写、属性的添加、属性的删除等。</li><li>通过Reflect（反射）:  对源对象的属性进行操作。</li><li>MDN文档中描述的Proxy与Reflect：<ul><li><p>Proxy：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Proxy</a></p></li><li><p>Reflect：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Proxy</span>(data, &#123;</span><br><span class="line"><span class="comment">// 拦截读取属性值</span></span><br><span class="line">    get (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, prop)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截设置属性值或添加新属性</span></span><br><span class="line">    set (target, prop, value) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, prop, value)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 拦截删除属性</span></span><br><span class="line">    deleteProperty (target, prop) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Reflect</span>.deleteProperty(target, prop)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">proxy.name = <span class="string">&#x27;tom&#x27;</span>   </span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="5.reactive对比ref">5.reactive对比ref<a title="#5.reactive对比ref" href="#5.reactive对比ref"></a></h2><ul><li>从定义数据角度对比：<ul><li>ref用来定义：<strong style="color:#DD5145">基本类型数据</strong>。</li><li>reactive用来定义：<strong style="color:#DD5145">对象（或数组）类型数据</strong>。</li><li>备注：ref也可以用来定义<strong style="color:#DD5145">对象（或数组）类型数据</strong>, 它内部会自动通过<code>reactive</code>转为<strong style="color:#DD5145">代理对象</strong>。</li></ul></li><li>从原理角度对比：<ul><li>ref通过<code>Object.defineProperty()</code>的<code>get</code>与<code>set</code>来实现响应式（数据劫持）。</li><li>reactive通过使用<strong style="color:#DD5145">Proxy</strong>来实现响应式（数据劫持）, 并通过<strong style="color:#DD5145">Reflect</strong>操作<strong style="color:orange">源对象</strong>内部的数据。</li></ul></li><li>从使用角度对比：<ul><li>ref定义的数据：操作数据<strong style="color:#DD5145">需要</strong><code>.value</code>，读取数据时模板中直接读取<strong style="color:#DD5145">不需要</strong><code>.value</code>。</li><li>reactive定义的数据：操作数据与读取数据：<strong style="color:#DD5145">均不需要</strong><code>.value</code>。</li></ul></li></ul><h2 id="6.setup的两个注意点">6.setup的两个注意点<a title="#6.setup的两个注意点" href="#6.setup的两个注意点"></a></h2><ul><li><p>setup执行的时机</p><ul><li>在beforeCreate之前执行一次，this是undefined。</li></ul></li><li><p>setup的参数</p><ul><li>props：值为对象，包含：组件外部传递过来，且组件内部声明接收了的属性。</li><li>context：上下文对象<ul><li>attrs: 值为对象，包含：组件外部传递过来，但没有在props配置中声明的属性, 相当于 <code>this.$attrs</code>。</li><li>slots: 收到的插槽内容, 相当于 <code>this.$slots</code>。</li><li>emit: 分发自定义事件的函数, 相当于 <code>this.$emit</code>。</li></ul></li></ul></li></ul><h2 id="7.计算属性与监视">7.计算属性与监视<a title="#7.计算属性与监视" href="#7.计算属性与监视"></a></h2><h3 id="1.computed函数">1.computed函数<a title="#1.computed函数" href="#1.computed函数"></a></h3><ul><li><p>与Vue2.x中computed配置功能一致</p></li><li><p>写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line">setup()&#123;</span><br><span class="line">    ...</span><br><span class="line"><span class="comment">//计算属性——简写</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//计算属性——完整</span></span><br><span class="line">    <span class="keyword">let</span> fullName = computed(&#123;</span><br><span class="line">        get()&#123;</span><br><span class="line">            <span class="keyword">return</span> person.firstName + <span class="string">&#x27;-&#x27;</span> + person.lastName</span><br><span class="line">        &#125;,</span><br><span class="line">        set(value)&#123;</span><br><span class="line">            <span class="keyword">const</span> nameArr = value.split(<span class="string">&#x27;-&#x27;</span>)</span><br><span class="line">            person.firstName = nameArr[<span class="number">0</span>]</span><br><span class="line">            person.lastName = nameArr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="2.watch函数">2.watch函数<a title="#2.watch函数" href="#2.watch函数"></a></h3><ul><li><p>与Vue2.x中watch配置功能一致</p></li><li><p>两个小“坑”：</p><ul><li>监视reactive定义的响应式数据时：oldValue无法正确获取、强制开启了深度监视（deep配置失效）。</li><li>监视reactive定义的响应式数据中某个属性时：deep配置有效。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//情况一：监视ref定义的响应式数据</span></span><br><span class="line">watch(sum,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sum变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//情况二：监视多个ref定义的响应式数据</span></span><br><span class="line">watch([sum,msg],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;sum或msg变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 情况三：监视reactive定义的响应式数据</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则无法正确获得oldValue！！</span></span><br><span class="line"><span class="comment">若watch监视的是reactive定义的响应式数据，则强制开启了深度监视 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">watch(person,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">false</span>&#125;) <span class="comment">//此处的deep配置不再奏效</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//情况四：监视reactive定义的响应式数据中的某个属性</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;) </span><br><span class="line"></span><br><span class="line"><span class="comment">//情况五：监视reactive定义的响应式数据中的某些属性</span></span><br><span class="line">watch([<span class="function">()=&gt;</span>person.job,<span class="function">()=&gt;</span>person.name],<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">immediate</span>:<span class="literal">true</span>,<span class="attr">deep</span>:<span class="literal">true</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊情况</span></span><br><span class="line">watch(<span class="function">()=&gt;</span>person.job,<span class="function">(<span class="params">newValue,oldValue</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;person的job变化了&#x27;</span>,newValue,oldValue)</span><br><span class="line">&#125;,&#123;<span class="attr">deep</span>:<span class="literal">true</span>&#125;) <span class="comment">//此处由于监视的是reactive素定义的对象中的某个属性，所以deep配置有效</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3.watcheffect函数">3.watchEffect函数<a title="#3.watcheffect函数" href="#3.watcheffect函数"></a></h3><ul><li><p>watch的套路是：既要指明监视的属性，也要指明监视的回调。</p></li><li><p>watchEffect的套路是：不用指明监视哪个属性，监视的回调中用到哪个属性，那就监视哪个属性。</p></li><li><p>watchEffect有点像computed：</p><ul><li>但computed注重的计算出来的值（回调函数的返回值），所以必须要写返回值。</li><li>而watchEffect更注重的是过程（回调函数的函数体），所以不用写返回值。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//watchEffect所指定的回调中用到的数据只要发生变化，则直接重新执行回调。</span></span><br><span class="line">watchEffect(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">const</span> x1 = sum.value</span><br><span class="line">    <span class="keyword">const</span> x2 = person.age</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;watchEffect配置的回调执行了&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="8.生命周期">8.生命周期<a title="#8.生命周期" href="#8.生命周期"></a></h2><ul><li>vue2.x的生命周期</li></ul><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="" class="φbs"></p><ul><li>vue3.0的生命周期</li></ul><p><img src="https://v3.cn.vuejs.org/images/lifecycle.svg" alt="" class="φbs"></p><ul><li>Vue3.0中可以继续使用Vue2.x中的生命周期钩子，但有有两个被更名：<ul><li><code>beforeDestroy</code>改名为 <code>beforeUnmount</code></li><li><code>destroyed</code>改名为 <code>unmounted</code></li></ul></li><li>Vue3.0也提供了 Composition API 形式的生命周期钩子，与Vue2.x中钩子对应关系如下：<ul><li><code>beforeCreate</code>===&gt;<code>setup()</code></li><li><code>created</code>=======&gt;<code>setup()</code></li><li><code>beforeMount</code> ===&gt;<code>onBeforeMount</code></li><li><code>mounted</code>=======&gt;<code>onMounted</code></li><li><code>beforeUpdate</code>===&gt;<code>onBeforeUpdate</code></li><li><code>updated</code> =======&gt;<code>onUpdated</code></li><li><code>beforeUnmount</code> ==&gt;<code>onBeforeUnmount</code></li><li><code>unmounted</code> =====&gt;<code>onUnmounted</code></li></ul></li></ul><h2 id="9.自定义hook函数">9.自定义hook函数<a title="#9.自定义hook函数" href="#9.自定义hook函数"></a></h2><ul><li><p>什么是hook？—— 本质是一个函数，把setup函数中使用的Composition API进行了封装。</p></li><li><p>类似于vue2.x中的mixin。</p></li><li><p>自定义hook的优势: 复用代码, 让setup中的逻辑更清楚易懂。</p></li></ul><h2 id="10.toref">10.toRef<a title="#10.toref" href="#10.toref"></a></h2><ul><li><p>作用：创建一个 ref 对象，其value值指向另一个对象中的某个属性。</p></li><li><p>语法：<code>const name = toRef(person,'name')</code></p></li><li><p>应用:   要将响应式对象中的某个属性单独提供给外部使用时。</p></li><li><p>扩展：<code>toRefs</code> 与<code>toRef</code>功能一致，但可以批量创建多个 ref 对象，语法：<code>toRefs(person)</code></p></li></ul><h1 id="三、其它-composition-api">三、其它 Composition API<a title="#三、其它-composition-api" href="#三、其它-composition-api"></a></h1><h2 id="1.shallowreactive-与-shallowref">1.shallowReactive 与 shallowRef<a title="#1.shallowreactive-与-shallowref" href="#1.shallowreactive-与-shallowref"></a></h2><ul><li><p>shallowReactive：只处理对象最外层属性的响应式（浅响应式）。</p></li><li><p>shallowRef：只处理基本数据类型的响应式, 不进行对象的响应式处理。</p></li><li><p>什么时候使用?</p><ul><li>如果有一个对象数据，结构比较深, 但变化时只是外层属性变化 ===&gt; shallowReactive。</li><li>如果有一个对象数据，后续功能不会修改该对象中的属性，而是生新的对象来替换 ===&gt; shallowRef。</li></ul></li></ul><h2 id="2.readonly-与-shallowreadonly">2.readonly 与 shallowReadonly<a title="#2.readonly-与-shallowreadonly" href="#2.readonly-与-shallowreadonly"></a></h2><ul><li>readonly: 让一个响应式数据变为只读的（深只读）。</li><li>shallowReadonly：让一个响应式数据变为只读的（浅只读）。</li><li>应用场景: 不希望数据被修改时。</li></ul><h2 id="3.toraw-与-markraw">3.toRaw 与 markRaw<a title="#3.toraw-与-markraw" href="#3.toraw-与-markraw"></a></h2><ul><li>toRaw：<ul><li>作用：将一个由<code>reactive</code>生成的<strong style="color:orange">响应式对象</strong>转为<strong style="color:orange">普通对象</strong>。</li><li>使用场景：用于读取响应式对象对应的普通对象，对这个普通对象的所有操作，不会引起页面更新。</li></ul></li><li>markRaw：<ul><li>作用：标记一个对象，使其永远不会再成为响应式对象。</li><li>应用场景:<ol><li>有些值不应被设置为响应式的，例如复杂的第三方类库等。</li><li>当渲染具有不可变数据源的大列表时，跳过响应式转换可以提高性能。</li></ol></li></ul></li></ul><h2 id="4.customref">4.customRef<a title="#4.customref" href="#4.customref"></a></h2><ul><li><p>作用：创建一个自定义的 ref，并对其依赖项跟踪和更新触发进行显式控制。</p></li><li><p>实现防抖效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;keyword&quot;&gt;</span><br><span class="line">&lt;h3&gt;&#123;&#123;keyword&#125;&#125;&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123;ref,customRef&#125; from &#39;vue&#39;</span><br><span class="line">export default &#123;</span><br><span class="line">name:&#39;Demo&#39;,</span><br><span class="line">setup()&#123;</span><br><span class="line">&#x2F;&#x2F; let keyword &#x3D; ref(&#39;hello&#39;) &#x2F;&#x2F;使用Vue准备好的内置ref</span><br><span class="line">&#x2F;&#x2F;自定义一个myRef</span><br><span class="line">function myRef(value,delay)&#123;</span><br><span class="line">let timer</span><br><span class="line">&#x2F;&#x2F;通过customRef去实现自定义</span><br><span class="line">return customRef((track,trigger)&#x3D;&gt;&#123;</span><br><span class="line">return&#123;</span><br><span class="line">get()&#123;</span><br><span class="line">track() &#x2F;&#x2F;告诉Vue这个value值是需要被“追踪”的</span><br><span class="line">return value</span><br><span class="line">&#125;,</span><br><span class="line">set(newValue)&#123;</span><br><span class="line">clearTimeout(timer)</span><br><span class="line">timer &#x3D; setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">value &#x3D; newValue</span><br><span class="line">trigger() &#x2F;&#x2F;告诉Vue去更新界面</span><br><span class="line">&#125;,delay)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">let keyword &#x3D; myRef(&#39;hello&#39;,500) &#x2F;&#x2F;使用程序员自定义的ref</span><br><span class="line">return &#123;</span><br><span class="line">keyword</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="5.provide-与-inject">5.provide 与 inject<a title="#5.provide-与-inject" href="#5.provide-与-inject"></a></h2><p><img src="https://v3.cn.vuejs.org/images/components_provide.png" alt="" class="φbs"></p><ul><li><p>作用：实现<strong style="color:#DD5145">祖与后代组件间</strong>通信</p></li><li><p>套路：父组件有一个 <code>provide</code> 选项来提供数据，后代组件有一个 <code>inject</code> 选项来开始使用这些数据</p></li><li><p>具体写法：</p><ol><li><p>祖组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup()&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">let</span> car = reactive(&#123;<span class="attr">name</span>:<span class="string">&#x27;奔驰&#x27;</span>,<span class="attr">price</span>:<span class="string">&#x27;40万&#x27;</span>&#125;)</span><br><span class="line">    provide(<span class="string">&#x27;car&#x27;</span>,car)</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>后代组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">setup(props,context)&#123;</span><br><span class="line">......</span><br><span class="line">    <span class="keyword">const</span> car = inject(<span class="string">&#x27;car&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;car&#125;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ul><h2 id="6.响应式数据的判断">6.响应式数据的判断<a title="#6.响应式数据的判断" href="#6.响应式数据的判断"></a></h2><ul><li>isRef: 检查一个值是否为一个 ref 对象</li><li>isReactive: 检查一个对象是否是由 <code>reactive</code> 创建的响应式代理</li><li>isReadonly: 检查一个对象是否是由 <code>readonly</code> 创建的只读代理</li><li>isProxy: 检查一个对象是否是由 <code>reactive</code> 或者 <code>readonly</code> 方法创建的代理</li></ul><h1 id="四、composition-api-的优势">四、Composition API 的优势<a title="#四、composition-api-的优势" href="#四、composition-api-的优势"></a></h1><h2 id="1.options-api-存在的问题">1.Options API 存在的问题<a title="#1.options-api-存在的问题" href="#1.options-api-存在的问题"></a></h2><p>使用传统OptionsAPI中，新增或者修改一个需求，就需要分别在data，methods，computed里修改 。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f84e4e2c02424d9a99862ade0a2e4114~tplv-k3u1fbpfcp-watermark.image" alt="" class="φbs"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e5ac7e20d1784887a826f6360768a368~tplv-k3u1fbpfcp-watermark.image" alt="" class="φbs"></p><h2 id="2.composition-api-的优势">2.Composition API 的优势<a title="#2.composition-api-的优势" href="#2.composition-api-的优势"></a></h2><p>我们可以更加优雅的组织我们的代码，函数。让相关功能的代码更加有序的组织在一起。</p><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bc0be8211fc54b6c941c036791ba4efe~tplv-k3u1fbpfcp-watermark.image" alt="" class="φbs"></p><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6cc55165c0e34069a75fe36f8712eb80~tplv-k3u1fbpfcp-watermark.image" alt="" class="φbs"></p><h1 id="五、新的组件">五、新的组件<a title="#五、新的组件" href="#五、新的组件"></a></h1><h2 id="1.fragment">1.Fragment<a title="#1.fragment" href="#1.fragment"></a></h2><ul><li>在Vue2中: 组件必须有一个根标签</li><li>在Vue3中: 组件可以没有根标签, 内部会将多个标签包含在一个Fragment虚拟元素中</li><li>好处: 减少标签层级, 减小内存占用</li></ul><h2 id="2.teleport">2.Teleport<a title="#2.teleport" href="#2.teleport"></a></h2><ul><li><p>什么是Teleport？—— <code>Teleport</code> 是一种能够将我们的<strong style="color:#DD5145">组件html结构</strong>移动到指定位置的技术。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;teleport to&#x3D;&quot;移动位置&quot;&gt;</span><br><span class="line">&lt;div v-if&#x3D;&quot;isShow&quot; class&#x3D;&quot;mask&quot;&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;dialog&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是一个弹窗&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;button @click&#x3D;&quot;isShow &#x3D; false&quot;&gt;关闭弹窗&lt;&#x2F;button&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;teleport&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="3.suspense">3.Suspense<a title="#3.suspense" href="#3.suspense"></a></h2><ul><li><p>等待异步组件时渲染一些额外内容，让应用有更好的用户体验</p></li><li><p>使用步骤：</p><ul><li><p>异步引入组件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineAsyncComponent&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> Child = defineAsyncComponent(<span class="function">()=&gt;</span><span class="keyword">import</span>(<span class="string">&#x27;./components/Child.vue&#x27;</span>))</span><br></pre></td></tr></table></figure></li><li><p>使用<code>Suspense</code>包裹组件，并配置好<code>default</code> 与 <code>fallback</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;app&quot;&gt;</span><br><span class="line">&lt;h3&gt;我是App组件&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;Suspense&gt;</span><br><span class="line">&lt;template v-slot:default&gt;</span><br><span class="line">&lt;Child&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;template v-slot:fallback&gt;</span><br><span class="line">&lt;h3&gt;加载中.....&lt;&#x2F;h3&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Suspense&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="六、其他">六、其他<a title="#六、其他" href="#六、其他"></a></h1><h2 id="1.全局api的转移">1.全局API的转移<a title="#1.全局api的转移" href="#1.全局api的转移"></a></h2><ul><li><p>Vue 2.x 有许多全局 API 和配置。</p><ul><li><p>例如：注册全局组件、注册全局指令等。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册全局组件</span></span><br><span class="line">Vue.component(<span class="string">&#x27;MyButton&#x27;</span>, &#123;</span><br><span class="line">  data: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    count: <span class="number">0</span></span><br><span class="line">  &#125;),</span><br><span class="line">  template: <span class="string">&#x27;&lt;button @click=&quot;count++&quot;&gt;Clicked &#123;&#123; count &#125;&#125; times.&lt;/button&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//注册全局指令</span></span><br><span class="line">Vue.directive(<span class="string">&#x27;focus&#x27;</span>, &#123;</span><br><span class="line">  inserted: <span class="function"><span class="params">el</span> =&gt;</span> el.focus()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Vue3.0中对这些API做出了调整：</p><ul><li><p>将全局的API，即：<code>Vue.xxx</code>调整到应用实例（<code>app</code>）上</p><div class="φbt"><div class="φbv"><table><thead><tr><th>2.x 全局 API（<code>Vue</code>）</th><th>3.x 实例 API (<code>app</code>)</th></tr></thead><tbody><tr><td>Vue.config.xxxx</td><td>app.config.xxxx</td></tr><tr><td>Vue.config.productionTip</td><td><strong style="color:#DD5145">移除</strong></td></tr><tr><td>Vue.component</td><td>app.component</td></tr><tr><td>Vue.directive</td><td>app.directive</td></tr><tr><td>Vue.mixin</td><td>app.mixin</td></tr><tr><td>Vue.use</td><td>app.use</td></tr><tr><td>Vue.prototype</td><td>app.config.globalProperties</td></tr></tbody></table></div></div></li></ul></li></ul><h2 id="2.其他改变">2.其他改变<a title="#2.其他改变" href="#2.其他改变"></a></h2><ul><li><p>data选项应始终被声明为一个函数。</p></li><li><p>过度类名的更改：</p><ul><li><p>Vue2.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.v-leave</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Vue3.x写法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.v-enter-from</span>,</span><br><span class="line"><span class="selector-class">.v-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.v-leave-from</span>,</span><br><span class="line"><span class="selector-class">.v-enter-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>keyCode作为 v-on 的修饰符，同时也不再支持<code>config.keyCodes</code></p></li><li><p><strong style="color:#DD5145">移除</strong><code>v-on.native</code>修饰符</p><ul><li><p>父组件中绑定事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component</span><br><span class="line">  v-on:close&#x3D;&quot;handleComponentEvent&quot;</span><br><span class="line">  v-on:click&#x3D;&quot;handleNativeClickEvent&quot;</span><br><span class="line">&#x2F;&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中声明自定义事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    emits: [&#39;close&#39;]</span><br><span class="line">  &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong style="color:#DD5145">移除</strong>过滤器（filter）</p><blockquote><p>过滤器虽然这看起来很方便，但它需要一个自定义语法，打破大括号内表达式是 “只是 JavaScript” 的假设，这不仅有学习成本，而且有实现成本！建议用方法调用或计算属性去替换过滤器。</p></blockquote></li><li><p>…</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h1 id=&quot;vue3快速上手&quot;&gt;Vue3快速上手&lt;a title=&quot;#vue3快速上手&quot; href=&quot;#vue3快速上手&quot;&gt;&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://user-images.githubuserconte</summary>
      
    
    
    
    <category term="笔记" scheme="https://pinkpeachabc.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="vue" scheme="https://pinkpeachabc.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue张天禹老师笔记</title>
    <link href="https://pinkpeachabc.cn/vue2.0%E7%AC%94%E8%AE%B0.html"/>
    <id>https://pinkpeachabc.cn/vue2.0%E7%AC%94%E8%AE%B0.html</id>
    <published>2022-02-20T18:43:55.000Z</published>
    <updated>2022-02-21T03:29:16.146Z</updated>
    
    <content type="html"><![CDATA[<p>尚硅谷 张天禹老师vue2笔记（方便自己查阅）</p><a id="more"></a><p>[TOC]</p><h1 id="尚硅谷-张天禹老师vue2笔记">尚硅谷 张天禹老师vue2笔记<a title="#尚硅谷-张天禹老师vue2笔记" href="#尚硅谷-张天禹老师vue2笔记"></a></h1><h2 id="脚手架文件结构">脚手架文件结构<a title="#脚手架文件结构" href="#脚手架文件结构"></a></h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">├── node_modules </span><br><span class="line">├── public</span><br><span class="line">│   ├── favicon.ico: 页签图标</span><br><span class="line">│   └── index.html: 主页面</span><br><span class="line">├── src</span><br><span class="line">│   ├── assets: 存放静态资源</span><br><span class="line">│   │   └── logo.png</span><br><span class="line">│   │── component: 存放组件</span><br><span class="line">│   │   └── HelloWorld.vue</span><br><span class="line">│   │── App.vue: 汇总所有组件</span><br><span class="line">│   │── main.js: 入口文件</span><br><span class="line">├── .gitignore: git版本管制忽略的配置</span><br><span class="line">├── babel.config.js: babel的配置文件</span><br><span class="line">├── package.json: 应用包配置文件 </span><br><span class="line">├── README.md: 应用描述文件</span><br><span class="line">├── package-lock.json：包版本控制文件</span><br></pre></td></tr></table></figure><h2 id="关于不同版本的vue">关于不同版本的Vue<a title="#关于不同版本的vue" href="#关于不同版本的vue"></a></h2><ol><li>vue.js与vue.runtime.xxx.js的区别：<ol><li>vue.js是完整版的Vue，包含：核心功能 + 模板解析器。</li><li>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</li></ol></li><li>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template这个配置项，需要使用render函数接收到的createElement函数去指定具体内容。</li></ol><h2 id="vue.config.js配置文件">vue.config.js配置文件<a title="#vue.config.js配置文件" href="#vue.config.js配置文件"></a></h2><ol><li>使用vue inspect &gt; output.js可以查看到Vue脚手架的默认配置。</li><li>使用vue.config.js可以对脚手架进行个性化定制，详情见：<a href="https://cli.vuejs.org/zh">https://cli.vuejs.org/zh</a></li></ol><h2 id="ref属性">ref属性<a title="#ref属性" href="#ref属性"></a></h2><ol><li>被用来给元素或子组件注册引用信息（id的替代者）</li><li>应用在html标签上获取的是真实DOM元素，应用在组件标签上是组件实例对象（vc）</li><li>使用方式：<ol><li>打标识：<code>&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1&gt;</code>或 <code>&lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</code></li><li>获取：<code>this.$refs.xxx</code></li></ol></li></ol><h2 id="props配置项">props配置项<a title="#props配置项" href="#props配置项"></a></h2><ol><li><p>功能：让组件接收外部传过来的数据</p></li><li><p>传递数据：<code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></p></li><li><p>接收数据：</p><ol><li><p>第一种方式（只接收）：<code>props:['name']</code></p></li><li><p>第二种方式（限制类型）：<code>props:&#123;name:String&#125;</code></p></li><li><p>第三种方式（限制类型、限制必要性、指定默认值）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">name:&#123;</span><br><span class="line">type:<span class="built_in">String</span>, <span class="comment">//类型</span></span><br><span class="line">required:<span class="literal">true</span>, <span class="comment">//必要性</span></span><br><span class="line"><span class="keyword">default</span>:<span class="string">&#x27;老王&#x27;</span> <span class="comment">//默认值</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：props是只读的，Vue底层会监测你对props的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制props的内容到data中一份，然后去修改data中的数据。</p></blockquote></li></ol><h2 id="mixin(混入)">mixin(混入)<a title="#mixin(混入)" href="#mixin(混入)"></a></h2><ol><li><p>功能：可以把多个组件共用的配置提取成一个混入对象</p></li><li><p>使用方式：</p><p>第一步定义混合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    data()&#123;....&#125;,</span><br><span class="line">    methods:&#123;....&#125;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步使用混入：</p><p>全局混入：<code>Vue.mixin(xxx)</code><br>​ 局部混入：<code>mixins:['xxx']</code></p></li></ol><h2 id="插件">插件<a title="#插件" href="#插件"></a></h2><ol><li><p>功能：用于增强Vue</p></li><li><p>本质：包含install方法的一个对象，install的第一个参数是Vue，第二个以后的参数是插件使用者传递的数据。</p></li><li><p>定义插件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">对象.install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue, options</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1. 添加全局过滤器</span></span><br><span class="line">    Vue.filter(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 添加全局指令</span></span><br><span class="line">    Vue.directive(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 配置全局混入(合)</span></span><br><span class="line">    Vue.mixin(....)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 添加实例方法</span></span><br><span class="line">    Vue.prototype.$myMethod = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;...&#125;</span><br><span class="line">    Vue.prototype.$myProperty = xxxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用插件：<code>Vue.use()</code></p></li></ol><h2 id="scoped样式">scoped样式<a title="#scoped样式" href="#scoped样式"></a></h2><ol><li>作用：让样式在局部生效，防止冲突。</li><li>写法：<code>&lt;style scoped&gt;</code></li></ol><h2 id="总结todolist案例">总结TodoList案例<a title="#总结todolist案例" href="#总结todolist案例"></a></h2><ol><li><p>组件化编码流程：</p><p>(1).拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</p><p>(2).实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p><p>1).一个组件在用：放在组件自身即可。</p><p>2). 一些组件在用：放在他们共同的父组件上（状态提升）。</p><p>(3).实现交互：从绑定事件开始。</p></li><li><p>props适用于：</p><p>(1).父组件 ==&gt; 子组件 通信</p><p>(2).子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</p></li><li><p>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</p></li><li><p>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</p></li></ol><h2 id="webstorage">webStorage<a title="#webstorage" href="#webstorage"></a></h2><ol><li><p>存储内容大小一般支持5MB左右（不同浏览器可能还不一样）</p></li><li><p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p></li><li><p>相关API：</p><ol><li><p><code>xxxxxStorage.setItem('key', 'value');</code><br>该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p></li><li><p><code>xxxxxStorage.getItem('person');</code></p><p>该方法接受一个键名作为参数，返回键名对应的值。</p></li><li><p><code>xxxxxStorage.removeItem('key');</code></p><p>该方法接受一个键名作为参数，并把该键名从存储中删除。</p></li><li><p><code>xxxxxStorage.clear()</code></p><p>该方法会清空存储中的所有数据。</p></li></ol></li><li><p>备注：</p><ol><li>SessionStorage存储的内容会随着浏览器窗口关闭而消失。</li><li>LocalStorage存储的内容，需要手动清除才会消失。</li><li><code>xxxxxStorage.getItem(xxx)</code>如果xxx对应的value获取不到，那么getItem的返回值是null。</li><li><code>JSON.parse(null)</code>的结果依然是null。</li></ol></li></ol><h2 id="组件的自定义事件">组件的自定义事件<a title="#组件的自定义事件" href="#组件的自定义事件"></a></h2><ol><li><p>一种组件间通信的方式，适用于：<strong>子组件 ===&gt; 父组件</strong></p></li><li><p>使用场景：A是父组件，B是子组件，B想给A传数据，那么就要在A中给B绑定自定义事件（事件的回调在A中）。</p></li><li><p>绑定自定义事件：</p><ol><li><p>第一种方式，在父组件中：<code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>或 <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p></li><li><p>第二种方式，在父组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Demo ref=<span class="string">&quot;demo&quot;</span>/&gt;</span><br><span class="line">......</span><br><span class="line">mounted()&#123;</span><br><span class="line">   <span class="built_in">this</span>.$refs.xxx.$on(<span class="string">&#x27;atguigu&#x27;</span>,<span class="built_in">this</span>.test)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>若想让自定义事件只能触发一次，可以使用<code>once</code>修饰符，或<code>$once</code>方法。</p></li></ol></li><li><p>触发自定义事件：<code>this.$emit('atguigu',数据)</code></p></li><li><p>解绑自定义事件<code>this.$off('atguigu')</code></p></li><li><p>组件上也可以绑定原生DOM事件，需要使用<code>native</code>修饰符。</p></li><li><p>注意：通过<code>this.$refs.xxx.$on('atguigu',回调)</code>绑定自定义事件时，回调要么配置在methods中，要么用箭头函数，否则this指向会出问题！</p></li></ol><h2 id="全局事件总线（globaleventbus）">全局事件总线（GlobalEventBus）<a title="#全局事件总线（globaleventbus）" href="#全局事件总线（globaleventbus）"></a></h2><ol><li><p>一种组件间通信的方式，适用于任意组件间通信。</p></li><li><p>安装全局事件总线：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">......</span><br><span class="line">beforeCreate() &#123;</span><br><span class="line">Vue.prototype.$bus = <span class="built_in">this</span> <span class="comment">//安装全局事件总线，$bus就是当前应用的vm</span></span><br><span class="line">&#125;,</span><br><span class="line">    ......</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure></li><li><p>使用事件总线：</p><ol><li><p>接收数据：A组件想接收数据，则在A组件中给$bus绑定自定义事件，事件的回调留在A组件自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">  demo(data)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="built_in">this</span>.$bus.$on(<span class="string">&#x27;xxxx&#x27;</span>,<span class="built_in">this</span>.demo)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>this.$bus.$emit('xxxx',数据)</code></p></li></ol></li><li><p>最好在beforeDestroy钩子中，用$off去解绑当前组件所用到的事件。</p></li></ol><h2 id="消息订阅与发布（pubsub）">消息订阅与发布（pubsub）<a title="#消息订阅与发布（pubsub）" href="#消息订阅与发布（pubsub）"></a></h2><ol><li><p>一种组件间通信的方式，适用于任意组件间通信。</p></li><li><p>使用步骤：</p><ol><li><p>安装pubsub：<code>npm i pubsub-js</code></p></li><li><p>引入: <code>import pubsub from 'pubsub-js'</code></p></li><li><p>接收数据：A组件想接收数据，则在A组件中订阅消息，订阅的回调留在A组件自身。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods()&#123;</span><br><span class="line">  demo(data)&#123;......&#125;</span><br><span class="line">&#125;</span><br><span class="line">......</span><br><span class="line">mounted() &#123;</span><br><span class="line">  <span class="built_in">this</span>.pid = pubsub.subscribe(<span class="string">&#x27;xxx&#x27;</span>,<span class="built_in">this</span>.demo) <span class="comment">//订阅消息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>提供数据：<code>pubsub.publish('xxx',数据)</code></p></li><li><p>最好在beforeDestroy钩子中，用<code>PubSub.unsubscribe(pid)</code>去取消订阅。</p></li></ol></li></ol><h2 id="nexttick">nextTick<a title="#nexttick" href="#nexttick"></a></h2><ol><li>语法：<code>this.$nextTick(回调函数)</code></li><li>作用：在下一次 DOM 更新结束后执行其指定的回调。</li><li>什么时候用：当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行。</li></ol><h2 id="vue封装的过度与动画">Vue封装的过度与动画<a title="#vue封装的过度与动画" href="#vue封装的过度与动画"></a></h2><ol><li><p>作用：在插入、更新或移除 DOM元素时，在合适的时候给元素添加样式类名。</p></li><li><p>图示：<img src="https://img04.sogoucdn.com/app/a/100520146/5990c1dff7dc7a8fb3b34b4462bd0105" alt="img"></p></li><li><p>写法：</p><ol><li><p>准备好样式：</p><ul><li>元素进入的样式：<ol><li>v-enter：进入的起点</li><li>v-enter-active：进入过程中</li><li>v-enter-to：进入的终点</li></ol></li><li>元素离开的样式：<ol><li>v-leave：离开的起点</li><li>v-leave-active：离开过程中</li><li>v-leave-to：离开的终点</li></ol></li></ul></li><li><p>使用<code>&lt;transition&gt;</code>包裹要过度的元素，并配置name属性：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;transition name&#x3D;&quot;hello&quot;&gt;</span><br><span class="line">&lt;h1 v-show&#x3D;&quot;isShow&quot;&gt;你好啊！&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;&#x2F;transition&gt;</span><br></pre></td></tr></table></figure></li><li><p>备注：若有多个元素需要过度，则需要使用：<code>&lt;transition-group&gt;</code>，且每个元素都要指定<code>key</code>值。</p></li></ol></li></ol><h2 id="vue脚手架配置代理">vue脚手架配置代理<a title="#vue脚手架配置代理" href="#vue脚手架配置代理"></a></h2><h3 id="方法一">方法一<a title="#方法一" href="#方法一"></a></h3><p>在vue.config.js中添加如下配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">devServer:&#123;</span><br><span class="line">  proxy:<span class="string">&quot;http://localhost:5000&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li><li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li><li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li></ol><h3 id="方法二">方法二<a title="#方法二" href="#方法二"></a></h3><p>编写vue.config.js配置具体代理规则：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">devServer: &#123;</span><br><span class="line">      proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/api1&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api1&#x27;开头的请求路径</span></span><br><span class="line">        target: <span class="string">&#x27;http://localhost:5000&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;<span class="string">&#x27;^/api1&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">&#x27;/api2&#x27;</span>: &#123;<span class="comment">// 匹配所有以 &#x27;/api2&#x27;开头的请求路径</span></span><br><span class="line">        target: <span class="string">&#x27;http://localhost:5001&#x27;</span>,<span class="comment">// 代理目标的基础路径</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">        pathRewrite: &#123;<span class="string">&#x27;^/api2&#x27;</span>: <span class="string">&#x27;&#x27;</span>&#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   changeOrigin设置为true时，服务器收到的请求头中的host为：localhost:5000</span></span><br><span class="line"><span class="comment">   changeOrigin设置为false时，服务器收到的请求头中的host为：localhost:8080</span></span><br><span class="line"><span class="comment">   changeOrigin默认值为true</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>说明：</p><ol><li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li><li>缺点：配置略微繁琐，请求资源时必须加前缀。</li></ol><h2 id="插槽">插槽<a title="#插槽" href="#插槽"></a></h2><ol><li><p>作用：让父组件可以向子组件指定位置插入html结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong> 。</p></li><li><p>分类：默认插槽、具名插槽、作用域插槽</p></li><li><p>使用方式：</p><ol><li><p>默认插槽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">           &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li><li><p>具名插槽：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">        &lt;Category&gt;</span><br><span class="line">            &lt;template slot&#x3D;&quot;center&quot;&gt;</span><br><span class="line">              &lt;div&gt;html结构1&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">            &lt;template v-slot:footer&gt;</span><br><span class="line">               &lt;div&gt;html结构2&lt;&#x2F;div&gt;</span><br><span class="line">            &lt;&#x2F;template&gt;</span><br><span class="line">        &lt;&#x2F;Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">               &lt;!-- 定义插槽 --&gt;</span><br><span class="line">               &lt;slot name&#x3D;&quot;center&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class="line">               &lt;slot name&#x3D;&quot;footer&quot;&gt;插槽默认内容...&lt;&#x2F;slot&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure></li><li><p>作用域插槽：</p><ol><li><p>理解：数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games数据在Category组件中，但使用数据所遍历出来的结构由App组件决定）</p></li><li><p>具体编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">父组件中：</span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是ul列表 --&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&lt;li v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Category&gt;</span><br><span class="line"></span><br><span class="line">&lt;Category&gt;</span><br><span class="line">&lt;template slot-scope&#x3D;&quot;scopeData&quot;&gt;</span><br><span class="line">&lt;!-- 生成的是h4标题 --&gt;</span><br><span class="line">&lt;h4 v-for&#x3D;&quot;g in scopeData.games&quot; :key&#x3D;&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;&#x2F;h4&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line">&lt;&#x2F;Category&gt;</span><br><span class="line">子组件中：</span><br><span class="line">        &lt;template&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;slot :games&#x3D;&quot;games&quot;&gt;&lt;&#x2F;slot&gt;</span><br><span class="line">            &lt;&#x2F;div&gt;</span><br><span class="line">        &lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            export default &#123;</span><br><span class="line">                name:&#39;Category&#39;,</span><br><span class="line">                props:[&#39;title&#39;],</span><br><span class="line">                &#x2F;&#x2F;数据在子组件自身</span><br><span class="line">                data() &#123;</span><br><span class="line">                    return &#123;</span><br><span class="line">                        games:[&#39;红色警戒&#39;,&#39;穿越火线&#39;,&#39;劲舞团&#39;,&#39;超级玛丽&#39;]</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol><h2 id="vuex">Vuex<a title="#vuex" href="#vuex"></a></h2><h3 id="1.概念">1.概念<a title="#1.概念" href="#1.概念"></a></h3><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h3 id="2.何时使用？">2.何时使用？<a title="#2.何时使用？" href="#2.何时使用？"></a></h3><p>多个组件需要共享数据时</p><h3 id="3.搭建vuex环境">3.搭建vuex环境<a title="#3.搭建vuex环境" href="#3.搭建vuex环境"></a></h3><ol><li><p>创建文件：<code>src/store/index.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//应用Vuex插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">//准备actions对象——响应组件中用户的动作</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;&#125;</span><br><span class="line"><span class="comment">//准备mutations对象——修改state中的数据</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;&#125;</span><br><span class="line"><span class="comment">//准备state对象——保存具体的数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>在<code>main.js</code>中创建vm时传入<code>store</code>配置项</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"><span class="comment">//引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建vm</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">el:<span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">store</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ol><h3 id="4.基本使用">4.基本使用<a title="#4.基本使用" href="#4.基本使用"></a></h3><ol><li><p>初始化数据、配置<code>actions</code>、配置<code>mutations</code>，操作文件<code>store.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入Vue核心库</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//引入Vuex</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="comment">//引用Vuex</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    <span class="comment">//响应组件中加的动作</span></span><br><span class="line">jia(context,value)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;actions中的jia被调用了&#x27;,miniStore,value)</span></span><br><span class="line">context.commit(<span class="string">&#x27;JIA&#x27;</span>,value)</span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    <span class="comment">//执行加</span></span><br><span class="line">JIA(state,value)&#123;</span><br><span class="line"><span class="comment">// console.log(&#x27;mutations中的JIA被调用了&#x27;,state,value)</span></span><br><span class="line">state.sum += value</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">   sum:<span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">actions,</span><br><span class="line">mutations,</span><br><span class="line">state,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取vuex中的数据：<code>$store.state.sum</code></p></li><li><p>组件中修改vuex中的数据：<code>$store.dispatch('action中的方法名',数据)</code>或 <code>$store.commit('mutations中的方法名',数据)</code></p><blockquote><p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写<code>dispatch</code>，直接编写<code>commit</code></p></blockquote></li></ol><h3 id="5.getters的使用">5.getters的使用<a title="#5.getters的使用" href="#5.getters的使用"></a></h3><ol><li><p>概念：当state中的数据需要经过加工后再使用时，可以使用getters加工。</p></li><li><p>在<code>store.js</code>中追加<code>getters</code>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">bigSum(state)&#123;</span><br><span class="line"><span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建并暴露store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">......</span><br><span class="line">getters</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>组件中读取数据：<code>$store.getters.bigSum</code></p></li></ol><h3 id="6.四个map方法的使用">6.四个map方法的使用<a title="#6.四个map方法的使用" href="#6.四个map方法的使用"></a></h3><ol><li><p>**mapState方法：**用于帮助我们映射<code>state</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（对象写法）</span></span><br><span class="line">     ...mapState(&#123;<span class="attr">sum</span>:<span class="string">&#x27;sum&#x27;</span>,<span class="attr">school</span>:<span class="string">&#x27;school&#x27;</span>,<span class="attr">subject</span>:<span class="string">&#x27;subject&#x27;</span>&#125;),</span><br><span class="line">         </span><br><span class="line">    <span class="comment">//借助mapState生成计算属性：sum、school、subject（数组写法）</span></span><br><span class="line">    ...mapState([<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>**mapGetters方法：**用于帮助我们映射<code>getters</code>中的数据为计算属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（对象写法）</span></span><br><span class="line">    ...mapGetters(&#123;<span class="attr">bigSum</span>:<span class="string">&#x27;bigSum&#x27;</span>&#125;),</span><br><span class="line"></span><br><span class="line">    <span class="comment">//借助mapGetters生成计算属性：bigSum（数组写法）</span></span><br><span class="line">    ...mapGetters([<span class="string">&#x27;bigSum&#x27;</span>])</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>**mapActions方法：**用于帮助我们生成与<code>actions</code>对话的方法，即：包含<code>$store.dispatch(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（对象形式）</span></span><br><span class="line">    ...mapActions(&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//靠mapActions生成：incrementOdd、incrementWait（数组形式）</span></span><br><span class="line">    ...mapActions([<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="string">&#x27;jiaWait&#x27;</span>])</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>**mapMutations方法：**用于帮助我们生成与<code>mutations</code>对话的方法，即：包含<code>$store.commit(xxx)</code>的函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    <span class="comment">//靠mapActions生成：increment、decrement（对象形式）</span></span><br><span class="line">    ...mapMutations(&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//靠mapMutations生成：JIA、JIAN（对象形式）</span></span><br><span class="line">    ...mapMutations([<span class="string">&#x27;JIA&#x27;</span>,<span class="string">&#x27;JIAN&#x27;</span>]),</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>备注：mapActions与mapMutations使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</p></blockquote><h3 id="7.模块化+命名空间">7.模块化+命名空间<a title="#7.模块化+命名空间" href="#7.模块化+命名空间"></a></h3><ol><li><p>目的：让代码更好维护，让多种数据分类更加明确。</p></li><li><p>修改<code>store.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> countAbout = &#123;</span><br><span class="line">  namespaced:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  state:&#123;<span class="attr">x</span>:<span class="number">1</span>&#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line">    bigSum(state)&#123;</span><br><span class="line">       <span class="keyword">return</span> state.sum * <span class="number">10</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> personAbout = &#123;</span><br><span class="line">  namespaced:<span class="literal">true</span>,<span class="comment">//开启命名空间</span></span><br><span class="line">  state:&#123; ... &#125;,</span><br><span class="line">  mutations: &#123; ... &#125;,</span><br><span class="line">  actions: &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    countAbout,</span><br><span class="line">    personAbout</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取state数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.state.personAbout.list</span><br><span class="line"><span class="comment">//方式二：借助mapState读取：</span></span><br><span class="line">...mapState(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;sum&#x27;</span>,<span class="string">&#x27;school&#x27;</span>,<span class="string">&#x27;subject&#x27;</span>]),</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中读取getters数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接读取</span></span><br><span class="line"><span class="built_in">this</span>.$store.getters[<span class="string">&#x27;personAbout/firstPersonName&#x27;</span>]</span><br><span class="line"><span class="comment">//方式二：借助mapGetters读取：</span></span><br><span class="line">...mapGetters(<span class="string">&#x27;countAbout&#x27;</span>,[<span class="string">&#x27;bigSum&#x27;</span>])</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用dispatch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接dispatch</span></span><br><span class="line"><span class="built_in">this</span>.$store.dispatch(<span class="string">&#x27;personAbout/addPersonWang&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapActions：</span></span><br><span class="line">...mapActions(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">incrementOdd</span>:<span class="string">&#x27;jiaOdd&#x27;</span>,<span class="attr">incrementWait</span>:<span class="string">&#x27;jiaWait&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure></li><li><p>开启命名空间后，组件中调用commit</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方式一：自己直接commit</span></span><br><span class="line"><span class="built_in">this</span>.$store.commit(<span class="string">&#x27;personAbout/ADD_PERSON&#x27;</span>,person)</span><br><span class="line"><span class="comment">//方式二：借助mapMutations：</span></span><br><span class="line">...mapMutations(<span class="string">&#x27;countAbout&#x27;</span>,&#123;<span class="attr">increment</span>:<span class="string">&#x27;JIA&#x27;</span>,<span class="attr">decrement</span>:<span class="string">&#x27;JIAN&#x27;</span>&#125;),</span><br></pre></td></tr></table></figure></li></ol><h2 id="路由">路由<a title="#路由" href="#路由"></a></h2><ol><li>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</li><li>前端路由：key是路径，value是组件。</li></ol><h3 id="1.基本使用">1.基本使用<a title="#1.基本使用" href="#1.基本使用"></a></h3><ol><li><p>安装vue-router，命令：<code>npm i vue-router</code></p></li><li><p>应用插件：<code>Vue.use(VueRouter)</code></p></li><li><p>编写router配置项:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入VueRouter</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">//引入Luyou 组件</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&#x27;../components/About&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建router实例对象，去管理一组一组的路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">routes:[</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">component:About</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">component:Home</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露router</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure></li><li><p>实现切换（active-class可配置高亮样式）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link active-class&#x3D;&quot;active&quot; to&#x3D;&quot;&#x2F;about&quot;&gt;About&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>指定展示位置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2.几个注意点">2.几个注意点<a title="#2.几个注意点" href="#2.几个注意点"></a></h3><ol><li>路由组件通常存放在<code>pages</code>文件夹，一般组件通常存放在<code>components</code>文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的<code>$route</code>属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的<code>$router</code>属性获取到。</li></ol><h3 id="3.多级路由（多级路由）">3.多级路由（多级路由）<a title="#3.多级路由（多级路由）" href="#3.多级路由（多级路由）"></a></h3><ol><li><p>配置路由规则，使用children配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">routes:[</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">component:About,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">component:Home,</span><br><span class="line">children:[ <span class="comment">//通过children配置子级路由</span></span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;news&#x27;</span>, <span class="comment">//此处一定不要写：/news</span></span><br><span class="line">component:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;message&#x27;</span>,<span class="comment">//此处一定不要写：/message</span></span><br><span class="line">component:Message</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>跳转（要写完整路径）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&#x2F;news&quot;&gt;News&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="4.路由的query参数">4.路由的query参数<a title="#4.路由的query参数" href="#4.路由的query参数"></a></h3><ol><li><p>传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail?id&#x3D;666&amp;title&#x3D;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to&#x3D;&quot;&#123;</span><br><span class="line">path:&#39;&#x2F;home&#x2F;message&#x2F;detail&#39;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#39;你好&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.query.id</span><br><span class="line">$route.query.title</span><br></pre></td></tr></table></figure></li></ol><h3 id="5.命名路由">5.命名路由<a title="#5.命名路由" href="#5.命名路由"></a></h3><ol><li><p>作用：可以简化路由的跳转。</p></li><li><p>如何使用</p><ol><li><p>给路由命名：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;/demo&#x27;</span>,</span><br><span class="line">component:Demo,</span><br><span class="line">children:[</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">component:Test,</span><br><span class="line">children:[</span><br><span class="line">&#123;</span><br><span class="line">                      name:<span class="string">&#x27;hello&#x27;</span> <span class="comment">//给路由命名</span></span><br><span class="line">path:<span class="string">&#x27;welcome&#x27;</span>,</span><br><span class="line">component:Hello,</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>简化跳转：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--简化前，需要写完整的路径 --&gt;</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;demo&#x2F;test&#x2F;welcome&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化后，直接通过名字跳转 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123;name:&#39;hello&#39;&#125;&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--简化写法配合传递参数 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to&#x3D;&quot;&#123;</span><br><span class="line">name:&#39;hello&#39;,</span><br><span class="line">query:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#39;你好&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="6.路由的params参数">6.路由的params参数<a title="#6.路由的params参数" href="#6.路由的params参数"></a></h3><ol><li><p>配置路由，声明接收params参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">component:Home,</span><br><span class="line">children:[</span><br><span class="line">&#123;</span><br><span class="line">path:<span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">component:News</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">component:Message,</span><br><span class="line">children:[</span><br><span class="line">&#123;</span><br><span class="line">name:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">path:<span class="string">&#x27;detail/:id/:title&#x27;</span>, <span class="comment">//使用占位符声明接收params参数</span></span><br><span class="line">component:Detail</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>传递参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;</span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#x2F;home&#x2F;message&#x2F;detail&#x2F;666&#x2F;你好&quot;&gt;跳转&lt;&#x2F;router-link&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;</span><br><span class="line">&lt;router-link </span><br><span class="line">:to&#x3D;&quot;&#123;</span><br><span class="line">name:&#39;xiangqing&#39;,</span><br><span class="line">params:&#123;</span><br><span class="line">   id:666,</span><br><span class="line">            title:&#39;你好&#39;</span><br><span class="line">&#125;</span><br><span class="line">&#125;&quot;</span><br><span class="line">&gt;跳转&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure><blockquote><p>特别注意：路由携带params参数时，若使用to的对象写法，则不能使用path配置项，必须使用name配置！</p></blockquote></li><li><p>接收参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$route.params.id</span><br><span class="line">$route.params.title</span><br></pre></td></tr></table></figure></li></ol><h3 id="7.路由的props配置">7.路由的props配置<a title="#7.路由的props配置" href="#7.路由的props配置"></a></h3><p>作用：让路由组件更方便的收到参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">name:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">path:<span class="string">&#x27;detail/:id&#x27;</span>,</span><br><span class="line">component:Detail,</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种写法：props值为对象，该对象中所有的key-value的组合最终都会通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:&#123;a:900&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种写法：props值为布尔值，布尔值为true，则把路由收到的所有params参数通过props传给Detail组件</span></span><br><span class="line"><span class="comment">// props:true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种写法：props值为函数，该函数返回的对象中每一组key-value都会通过props传给Detail组件</span></span><br><span class="line">props(route)&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">id:route.query.id,</span><br><span class="line">title:route.query.title</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8.&lt;router-link&gt;的replace属性">8.<code>&lt;router-link&gt;</code>的replace属性<a title="#8.&lt;router-link&gt;的replace属性" href="#8.&lt;router-link&gt;的replace属性"></a></h3><ol><li>作用：控制路由跳转时操作浏览器历史记录的模式</li><li>浏览器的历史记录有两种写入方式：分别为<code>push</code>和<code>replace</code>，<code>push</code>是追加历史记录，<code>replace</code>是替换当前记录。路由跳转时候默认为<code>push</code></li><li>如何开启<code>replace</code>模式：<code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li></ol><h3 id="9.编程式路由导航">9.编程式路由导航<a title="#9.编程式路由导航" href="#9.编程式路由导航"></a></h3><ol><li><p>作用：不借助<code>&lt;router-link&gt;</code>实现路由跳转，让路由跳转更加灵活</p></li><li><p>具体编码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$router的两个API</span></span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">name:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">params:&#123;</span><br><span class="line">id:xxx,</span><br><span class="line">title:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$router.replace(&#123;</span><br><span class="line">name:<span class="string">&#x27;xiangqing&#x27;</span>,</span><br><span class="line">params:&#123;</span><br><span class="line">id:xxx,</span><br><span class="line">title:xxx</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">this</span>.$router.forward() <span class="comment">//前进</span></span><br><span class="line"><span class="built_in">this</span>.$router.back() <span class="comment">//后退</span></span><br><span class="line"><span class="built_in">this</span>.$router.go() <span class="comment">//可前进也可后退</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="10.缓存路由组件">10.缓存路由组件<a title="#10.缓存路由组件" href="#10.缓存路由组件"></a></h3><ol><li><p>作用：让不展示的路由组件保持挂载，不被销毁。</p></li><li><p>具体编码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;keep-alive include&#x3D;&quot;News&quot;&gt; </span><br><span class="line">    &lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure></li></ol><h3 id="11.两个新的生命周期钩子">11.两个新的生命周期钩子<a title="#11.两个新的生命周期钩子" href="#11.两个新的生命周期钩子"></a></h3><ol><li>作用：路由组件所独有的两个钩子，用于捕获路由组件的激活状态。</li><li>具体名字：<ol><li><code>activated</code>路由组件被激活时触发。</li><li><code>deactivated</code>路由组件失活时触发。</li></ol></li></ol><h3 id="12.路由守卫">12.路由守卫<a title="#12.路由守卫" href="#12.路由守卫"></a></h3><ol><li><p>作用：对路由进行权限控制</p></li><li><p>分类：全局守卫、独享守卫、组件内守卫</p></li><li><p>全局守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置守卫：初始化时执行、每次路由切换前执行</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123; <span class="comment">//权限控制的具体规则</span></span><br><span class="line">next() <span class="comment">//放行</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next() <span class="comment">//放行</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局后置守卫：初始化时执行、每次路由切换后执行</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;afterEach&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.title)&#123; </span><br><span class="line"><span class="built_in">document</span>.title = to.meta.title <span class="comment">//修改网页的title</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">&#x27;vue_test&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>独享守卫:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">beforeEnter(to,<span class="keyword">from</span>,next)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;beforeEnter&#x27;</span>,to,<span class="keyword">from</span>)</span><br><span class="line"><span class="keyword">if</span>(to.meta.isAuth)&#123; <span class="comment">//判断当前路由是否需要进行权限控制</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;school&#x27;</span>) === <span class="string">&#x27;atguigu&#x27;</span>)&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">alert(<span class="string">&#x27;暂无权限查看&#x27;</span>)</span><br><span class="line"><span class="comment">// next(&#123;name:&#x27;guanyu&#x27;&#125;)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">next()</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>组件内守卫：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//进入守卫：通过路由规则，进入该组件时被调用</span></span><br><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//离开守卫：通过路由规则，离开该组件时被调用</span></span><br><span class="line">beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="13.路由器的两种工作模式">13.路由器的两种工作模式<a title="#13.路由器的两种工作模式" href="#13.路由器的两种工作模式"></a></h3><ol><li>对于一个url来说，什么是hash值？—— #及其后面的内容就是hash值。</li><li>hash值不会包含在 HTTP 请求中，即：hash值不会带给服务器。</li><li>hash模式：<ol><li>地址中永远带着#号，不美观 。</li><li>若以后将地址通过第三方手机app分享，若app校验严格，则地址会被标记为不合法。</li><li>兼容性较好。</li></ol></li><li>history模式：<ol><li>地址干净，美观 。</li><li>兼容性和hash模式相比略差。</li><li>应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题。</li></ol></li></ol>]]></content>
    
    
    <summary type="html">&lt;p&gt;尚硅谷 张天禹老师vue2笔记（方便自己查阅）&lt;/p&gt;</summary>
    
    
    
    <category term="笔记" scheme="https://pinkpeachabc.cn/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="vue" scheme="https://pinkpeachabc.cn/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Daily Life 2</title>
    <link href="https://pinkpeachabc.cn/%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0.html"/>
    <id>https://pinkpeachabc.cn/%E6%97%A5%E5%B8%B8%E5%B0%8F%E8%AE%B0.html</id>
    <published>2021-04-20T15:21:02.000Z</published>
    <updated>2021-04-22T03:43:12.335Z</updated>
    
    <content type="html"><![CDATA[<p>失踪人口回来啦🤗，前一篇还是元旦转眼已经将近五个月没写博客了，可以说是终极鸽子🕊怪了。<a id="more"></a></p><h2 id="消失">消失<a title="#消失" href="#消失"></a></h2><p>年味刚过我的专升本考试就提上了日程，这几个月的时间都在备考当中。感觉每一天都在还高中的债，这三年光阴的对我来说可以说段瞬即逝，从大一的排斥到最后的释然。一个成长的过程，路程总是艰辛。直到今年三月底我终于完成我三年的盼望的一天，可以松口气睡个觉打个游戏了。考前一天还和同学在旅馆打趣说必定上岸换个好地方约占上网，还记的刚开始有许多同学在一起坚持，最后我的小圈子只剩一个人陪在身边了，有些人不知不觉中<strong>消失</strong>了。</p><h2 id="除草">除草<a title="#除草" href="#除草"></a></h2><p>难得休憩的日子，也没有去找个兼职<s>主要是懒</s>。这两天一直受到服务器和域名到期的通知，一拍脑门已经把博客放的长满绿毛了。父亲在楼下地上种的瓜果蔬菜需要翻地，养分才能均匀更何况博客了。除草机也需要开几下了。</p><ul><li>全站替换 Https，续费域名。</li><li>主题更新到了最新版本：<a href="https://github.com/ikeq/hexo-theme-inside/releases/tag/2.7.0-beta.13" target="_blank">2.7.0-beta.13</a>。</li><li>由于阿里云服务器 5 月分到期，不在继续续费改用 Vercel 作为托管。</li><li>一直在用笔记本 15.6 寸，博客未能很好适配多分辨率的显示效果优化了显示范围。</li></ul><h2 id="休闲">休闲<a title="#休闲" href="#休闲"></a></h2><p>这两天迷上了又重新入坑的炉石传说<s>战令太香了</s>，但是时间不如许高强度淦小时数。灵机一动使用脚本来刷，找了好久发现就只有一款叫 Hearthbuddy 的脚本软件。脚本用 C# 来写战斗策略配合 AI 计算实现挂机，一直以来对脚本的印象都是呆笨的，从现在起我正式向 AI 道歉。仅仅历时两个晚上，一路从青铜冲到低保<s>恨不得没早用</s>。<img src="https://cdn.jsdelivr.net/gh/pinkpeachabc/images/Blog-imgs/image-20210422111257984.png" alt="image-20210422111257984"></p><h2 id="学习">学习<a title="#学习" href="#学习"></a></h2><p>躺的久了难免成为废人，关于技术栈这一方面已经搁置小半年没有学习了。搁的越久忘的越多，之后的日子从新开始快速学习。会更新一些学习笔记和日常生活。<img src="https://cdn.jsdelivr.net/gh/pinkpeachabc/images/Blog-imgs/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF.png" alt="Java后端开发学习路线"></p><hr><blockquote><p>时间流逝，岁月不饶人。每个人都选择了的自己生活的方向，发小这星期也要结婚了。同学有的也陆续开始工作了，考研的也都已经在准备了。<em>虽世殊事异，所以兴怀，其致一也</em>。我想大家都如此吧，愿今后加油一切顺利。😊</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;失踪人口回来啦🤗，前一篇还是元旦转眼已经将近五个月没写博客了，可以说是终极鸽子🕊怪了。</summary>
    
    
    
    <category term="杂记" scheme="https://pinkpeachabc.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="闲聊" scheme="https://pinkpeachabc.cn/tags/%E9%97%B2%E8%81%8A/"/>
    
  </entry>
  
  <entry>
    <title>Happy New Year</title>
    <link href="https://pinkpeachabc.cn/2021.html"/>
    <id>https://pinkpeachabc.cn/2021.html</id>
    <published>2020-12-31T13:25:07.000Z</published>
    <updated>2021-04-20T11:15:03.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="新年快乐">新年快乐<a title="#新年快乐" href="#新年快乐"></a></h2><p>从前几天开始，手机上就开始不断推送各家的<strong>年终总结</strong>。本想着就着年末也写一篇自己的年终总结，但手指放到键盘才发现自己只是<strong>平淡</strong>的过完这一整年，基本上这一年大部分时光都是在家中度过的。</p><blockquote><p><strong>疫情</strong></p></blockquote><p>2020的第一天，突如其来的疫情，打破的我原本为今年定好的计划。因为疫情的影响从月初就被<strong>困</strong>在家里，接受的愉快的网课<s>水课</s>生活。日子一天天过去，疫情也渐渐好转。</p><blockquote><p><strong>趣事</strong></p></blockquote><p>在一个清晨，被警察👮叔叔找上门。人生第一次被警察叔叔找上门，还以为自己犯了什么错误。原来是来调查网站的用途和有无安全措施，填了张表就送走了。心里还是有点小紧张，现在的监管真的很严格，给👮‍点赞。</p><blockquote><p><strong>学习</strong></p></blockquote><p>忙完了学校的任务，今年的下半年基本都在紧张的复习和备考中，想要在计算机行业站住没有能力和学历<s>各行各业都一样</s>绝对是行不通的，期望专业课有个好成绩。</p><blockquote><p><strong>计划</strong></p></blockquote><p>今年在技能方面基本是处于一个停滞的状态，同时也在考虑今后的发展，和目前的能力适合选择什么样的方向。眼看比自己小一届的学弟已经可以独立开发项目上线，并在国赛取的优异的成绩了。自己还是平平无奇，期望一切顺利，计划在开发方向冲一冲。也是时候看看自己的极限在哪里。</p><hr><p>关于博客的更新，哈哈可能还要继续<strong>鸽</strong>下去。但我想时间不会太久，也祝愿小伙伴们<strong>新年快乐</strong>！</p>]]></content>
    
    
    <summary type="html">日常生活</summary>
    
    
    
    <category term="杂记" scheme="https://pinkpeachabc.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Daily life</title>
    <link href="https://pinkpeachabc.cn/%E5%B0%8F%E8%AE%B0.html"/>
    <id>https://pinkpeachabc.cn/%E5%B0%8F%E8%AE%B0.html</id>
    <published>2020-09-09T15:26:33.000Z</published>
    <updated>2021-04-20T11:00:18.656Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新">更新<a title="#更新" href="#更新"></a></h2><p>由于 hexo 已经升级到了 5.x.x 版本，inside主题会出现一些未知的 bug。本次已经升级到 hexo 5.1.1，主题更新到了最新版本：2.7.0-beta.3。</p><p>另外在之前的设置的 valine 的邮箱回复，会出现未能唤醒的现象 <strong>“因流控原因，通过定时任务唤醒体验版实例失败，建议升级至标准版云引擎实例避免休眠”</strong>。本次通用 <strong>Github Action</strong> 修复了这个唤醒失败的错误。</p><h2 id="说明">说明<a title="#说明" href="#说明"></a></h2><p>由于准备考试，今后的一个月不会更博，目前的 blog 整体度已经很高了。不会再折腾了<s>以后说不定</s>。总之要失踪一阵子了。</p><hr><p>今后争取写优质的原创文章、听几首好听的音乐、考一个理想的分数——2020年9月9日</p>]]></content>
    
    
    <summary type="html">日常生活</summary>
    
    
    
    <category term="杂记" scheme="https://pinkpeachabc.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Valine评论的邮箱提醒</title>
    <link href="https://pinkpeachabc.cn/Valine%E8%AF%84%E8%AE%BA%E7%9A%84%E9%82%AE%E7%AE%B1%E6%8F%90%E9%86%92.html"/>
    <id>https://pinkpeachabc.cn/Valine%E8%AF%84%E8%AE%BA%E7%9A%84%E9%82%AE%E7%AE%B1%E6%8F%90%E9%86%92.html</id>
    <published>2020-08-06T05:21:28.000Z</published>
    <updated>2021-04-20T10:59:50.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>博客搭建了很久了，前两天闲来无事去逛别人博客时发现了别人给我发评论是可以用第三方邮件提醒。突然想起来自己的博客评论却没有这个功能，最早之前用过来必力很可惜加载<strong>龟速</strong><s>服务器不在国内</s>，如今使用的是无后端的Valine，精简快捷。今天就给它设置个第三方邮件提醒吧。</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/06/ac7DiD.png" alt="ac7DiD.png" class="φbs"></p><h2 id="简介">简介<a title="#简介" href="#简介"></a></h2><blockquote><p>此项目是一个对 <a href="https://valine.js.org/" target="_blank">Valine</a> 评论系统的拓展应用，可增强 <code>Valine</code> 的邮件通知功能。基于 Leancloud 的云引擎与云函数。可以提供邮件 <code>通知站长</code> 和 <code>@ 通知</code> 的功能，而且还支持自定义邮件通知模板。</p></blockquote><p><a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank">Valine Admin</a></p><h2 id="配置">配置<a title="#配置" href="#配置"></a></h2><ul><li>首先进入<a href="https://leancloud.cn/" target="_blank">Leancloud</a> 中，在<strong>设置-邮件模板-用于重置密码</strong>的邮件主题中修改为：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hi, &#123;&#123;username&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;你的网址首页链接&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;</span>&gt;</span>马上查看<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/08/06/acqVRe.png" alt="acqVRe.png" class="φbs"></p><ul><li>部署Valine-Admin，在<strong>云引擎-部署-Git部署</strong>中输入 <a href="https://github.com/zhaojun1998/Valine-Admin">https://github.com/zhaojun1998/Valine-Admin</a> ，并在<strong>分支或提交</strong>中输入master点击部署。</li></ul><p><img src="https://s1.ax1x.com/2020/08/06/acqnsA.png" alt="acqnsA.png" class="φbs"></p><ul><li>接下来是配置项，在<strong>云引擎-设置-自定义环境变量</strong>中，<strong>添加新变量</strong>，如表所示：</li></ul><div class="φbt"><div class="φbv"><table><thead><tr><th>变量</th><th>说明</th></tr></thead><tbody><tr><td>SITE_NAME</td><td>[必填] 网站名称</td></tr><tr><td>SITE_URL</td><td>[必填] 网站地址，<strong>最后不要加 <code>/</code></strong></td></tr><tr><td>SMTP_SERVICE</td><td>[必填] 邮件服务提供商，支持 QQ、163、126、Gmail 以及 <a href="https://nodemailer.com/smtp/well-known/#supported-services" target="_blank">更多</a>。 — <em>如这里没有你使用的邮件提供商，请查看<a href="https://blog.csdn.net/%E9%AB%98%E7%BA%A7%E9%85%8D%E7%BD%AE.md#%E8%87%AA%E5%AE%9A%E4%B9%89%E9%82%AE%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank">自定义邮件服务器</a></em></td></tr><tr><td>SMTP_USER</td><td>[必填] SMTP登录用户，一般为邮箱地址</td></tr><tr><td>SMTP_PASS</td><td>[必填] SMTP登录密码，一般为授权码，<strong>而不是邮箱的登陆密码</strong>，请自行查询对应邮件服务商的获取方式</td></tr><tr><td>SENDER_NAME</td><td>[可选] 发件人</td></tr><tr><td>ADMIN_URL</td><td>[建议] Web主机二级域名，用于自动唤醒</td></tr><tr><td>TO_EMAIL</td><td>[可选] 指定站长收信邮箱，默认值为<code>SITE_USER</code>。用于 SMTP 发件人与站长收件人不一致的情况下使用。</td></tr><tr><td>TEMPLATE_NAME</td><td>[可选] 通知邮件的模板（default和rainbow），参考高级功能</td></tr></tbody></table></div></div><p><img src="https://s1.ax1x.com/2020/08/06/acq8JS.png" alt="acq8JS.png" class="φbs"></p><blockquote><p>关于几点注意：SMTP登录密码（例如qq），不是qq密码而是授权码。自定义环境变量保存完只有重启部署才有用。</p></blockquote><p><img src="https://s1.ax1x.com/2020/08/06/acqlIf.png" alt="acqlIf.png" class="φbs"></p><h2 id="后台评论管理">后台评论管理<a title="#后台评论管理" href="#后台评论管理"></a></h2><ul><li>在<strong>设置-域名绑定-云引擎、ClientEngine 域名</strong>中，添加一个二级域名。</li></ul><p><img src="https://s1.ax1x.com/2020/08/06/acqZxH.png" alt="acqZxH.png" class="φbs"></p><ul><li>在<strong>储存-结构化数据-_User</strong>中，点击<strong>添加行</strong>。只需要填写 <code>email</code>、<code>password</code>、<code>username</code>，这三个字段即可, 使用 <code>email</code> 作为账号登陆即可。</li></ul><p><img src="https://s1.ax1x.com/2020/08/06/acqmMd.png" alt="acqmMd.png" class="φbs"></p><ul><li>在浏览器中输入你绑定的web域名，既可以访问到后台评论。</li></ul><p><img src="https://s1.ax1x.com/2020/08/06/acjDB9.png" alt="acjDB9.png" class="φbs"></p><h4 id="leancloud-自带定时器[推荐]">LeanCloud 自带定时器[推荐]<a title="#leancloud-自带定时器[推荐]" href="#leancloud-自带定时器[推荐]"></a></h4><ul><li>首先需要添加环境变量，<code>ADMIN_URL</code>：<code>Web 主机域名</code>，如图所示（添加后重启容器才会生效）：</li></ul><p><img src="https://s1.ax1x.com/2020/08/06/acvXPx.png" alt="acvXPx.png" class="φbs"></p><ul><li>然后在<strong>云引擎-定时任务-创建定时任务</strong>中，新增定时器，如下图所示。</li></ul><p><img src="https://s1.ax1x.com/2020/08/06/acquqI.png" alt="acquqI.png" class="φbs"></p><blockquote><p>注意, LeanCloud 最近更新了定时器校验规则, 需要将 Cron 表达式写为: <code>0 */20 7-23 * * ?</code></p></blockquote><h2 id="测试">测试<a title="#测试" href="#测试"></a></h2><p>用其他邮箱在自己的博客留言板出留言，进入邮箱看是否收到提醒。</p><p><img src="https://s1.ax1x.com/2020/08/06/aczZkR.png" alt="aczZkR.png" class="φbs"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;博客搭建了很久了，前两天闲来无事去逛别人博客时发现了别人给我发评论是可以用第三方邮件提醒。突然想起来自己的博客评论却没有这个功能，最早之前用过来必力很可惜加载&lt;strong&gt;龟速&lt;/strong&gt;&lt;s&gt;服务器不在国内&lt;/s&gt;，如今使用的是无后端的V</summary>
      
    
    
    
    <category term="博客" scheme="https://pinkpeachabc.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://pinkpeachabc.cn/tags/hexo/"/>
    
    <category term="Valine评论" scheme="https://pinkpeachabc.cn/tags/Valine%E8%AF%84%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>入手Y7000 &amp; 黑苹果体验</title>
    <link href="https://pinkpeachabc.cn/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BD%93%E9%AA%8C.html"/>
    <id>https://pinkpeachabc.cn/%E9%BB%91%E8%8B%B9%E6%9E%9C%E4%BD%93%E9%AA%8C.html</id>
    <published>2020-07-24T04:02:18.000Z</published>
    <updated>2021-04-20T11:17:55.344Z</updated>
    
    <content type="html"><![CDATA[<p>hey，我回来更博啦😝。最近在手头一开始忙疫情开学的事情一时抽不开时间，<s>偷懒</s>也是在乐在其中的哈哈。最近刚刚稳定下来准备明年的考试了，今天闲下来坐在电脑边时突然想到我还有个被遗忘的Mac系统，于是就有了今天的更新<s>疯狂灌水</s>。</p><a id="more"></a><h2 id="第一台笔记本电脑">第一台笔记本电脑<a title="#第一台笔记本电脑" href="#第一台笔记本电脑"></a></h2><p>作为一个计算机专业，而且本身对硬件有所了解的一个大学生，对电子设备的选择往往是最纠结的。</p><p>如今的笔电市场上，虽然说机型是遍地开花，但真要说值得买的却只有寥寥几种机型。做为一个学生可能看重的可能就是「性价比」了，我也不例外对于学生党来说一个不错的价格✚一个不错配置可谓是最好的选择。这时候你可能会大喊<s>神舟</s>大法好，可这你就错了。</p><p>相比于游戏本我更喜欢商务本，当然并不是我的选择要Pass掉游戏本，毕竟游戏就目前来说也是生活的一部分<s>csgo</s>。言归正传，在商务本中能够我想的还是三大标杆XPS、苏菲、MBP。我一度疯狂迷恋XPS我觉得这是Windows端唯一和苹果抗衡的笔电了。</p><p>当然你也许我会选择XPS，但最终综合考虑个人需求，经过对比，我选择了y7000。</p><h2 id="为什么会是y7000？">为什么会是Y7000？<a title="#为什么会是y7000？" href="#为什么会是y7000？"></a></h2><p>我最终还是败给了「贵」，同样的我也想要日常的游戏性能。于是另一款笔电就进入的我的眼帘——y7000。由于预算有限我购入的为高色域i5+GTX1650的版本，其实对于游戏玩家我还有个身份苹果粉，我一心想体验Macos，但价格目前是越不过的鸿沟。我转念一想我为何不选一款对黑苹果友好的游戏本，这也就是我在这个价位屏幕、模具、性能、散热等领域中选择的最佳。</p><h2 id="安装黑苹果">安装黑苹果<a title="#安装黑苹果" href="#安装黑苹果"></a></h2><p>话不多说，新机到手，先装系统。目前为Win10和MacOS Catalina双系统。就目前的状况来看基本达到了99%的完美。我使用的EFI是<a href="https://github.com/xiaoMGitHub/LEGION_Y7000Series_Hackintosh" target="_blank">xiaoMGitHub</a>的版本，目前除了声卡偶尔掉其他没有任何问题。目前支持的功能（需要更多请前往Github）：</p><ul><li>UEFI通过 Clover/OC 启动</li><li>支持任意版本系统OTA升级到最新系统</li><li>内置键盘以及数字键盘</li><li>原生USB3.0/USB2.0</li><li>AppleHDA原生音频，包括耳机</li><li>内置摄像头</li><li>原生电源管理</li><li>电池状态</li><li>背光控制</li><li>背光键盘</li><li>核显驱动（独显已经 hotpatch 屏蔽）</li><li>有线以太网卡</li><li>Mac App Store正常运行</li><li>CPU变频</li><li>睡眠唤醒（鼠标，键盘、电源键唤醒均正常）</li><li>无线网络（更换白果卡BCM943602cs）</li><li>蓝牙（更换白果卡BCM943602cs）</li><li>触控板 (部分低配机型不支持多指操作)</li><li>随航（有线/无线）</li><li>4K 屏幕（<a href="https://github.com/xiaoMGitHub/LEGION_Y7000Series_Hackintosh/tree/master/4K_Display_Config" target="_blank">教程</a>）</li><li>iMessage/FaceTime</li></ul><p><img src="https://s1.ax1x.com/2020/07/24/UjJrz8.jpg" alt="UjJrz8.jpg" class="φbs"></p><h2 id="黑苹果体验">黑苹果体验<a title="#黑苹果体验" href="#黑苹果体验"></a></h2><p>从19年购入以来，我也渐渐使用了将近一年的黑苹果。给我感觉最大的是生态的优秀和对程序员的友好，优劣总是并存的，Mac对原生4k的支持是非常好的，但普通笔电15.6寸屏幕的效果就会略显模糊。未更换白果网卡将不会驱动wifi和蓝牙（Intel网卡部分现在已经驱动），在期间也是逛遍了远景和Github在经历了几次失败后，终于达到了几乎完美的状态。</p><h2 id="我卸载掉了黑苹果">我卸载掉了黑苹果<a title="#我卸载掉了黑苹果" href="#我卸载掉了黑苹果"></a></h2><p>2020年7月24日也就是今天，我在长时间不使用黑苹果情况下，再次进入黑果，我忽然觉得我是时候和它说再见了。我是使用clover来引导的，用clover来引导进入日常的Windows端其实会有或多或少的性能损耗，长时间不用初次进入开机也是很缓慢的。</p><p>硬盘的话我是用西数SN720，本想在买个硬盘装上各司其职，但出于经济考虑还是没有购买<s>穷</s>。于是一个硬盘安装了双系统，不知道是什么原因在温控都正常的情况下，在mac环境下硬盘的温度和噪音都在Windows之上。</p><p>为什么想卸载掉这个系统了呢，其实最大的原因还是折腾。即使他看起来很完美，但实际上总会有一些小问题，就像睡觉时候一直有个蚊子在脑袋旁转，转的次数多了也就烦了。当然了在敲代码这方面和环境配置这点我觉得mac还是有绝对优势的，最主要的是美观和简洁，你可以全心全意的干你想做的事情在这个系统下。</p><h2 id="装黑苹果建议">装黑苹果建议<a title="#装黑苹果建议" href="#装黑苹果建议"></a></h2><p>说你好和再见不过一年之久，即使不在使用它，我还是对这个系统保持着热情和喜爱，希望以后购入一台MBP来真正体验一下白苹果给人的感觉。同时对于初来乍到想安装并体验黑苹果的朋友，我建议大家在有精力和能力的基础上都建议尝试一下这种感觉，不仅仅是mac系统给你带来的快乐，还有安装过程中带来问题和惊喜。如果你正在考虑给你的机器装黑苹果，不妨去远景论坛和Github找找是否有和你配置相似的EFI，愿你最后也能吃上苹果！</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;hey，我回来更博啦😝。最近在手头一开始忙疫情开学的事情一时抽不开时间，&lt;s&gt;偷懒&lt;/s&gt;也是在乐在其中的哈哈。最近刚刚稳定下来准备明年的考试了，今天闲下来坐在电脑边时突然想到我还有个被遗忘的Mac系统，于是就有了今天的更新&lt;s&gt;疯狂灌水&lt;/s&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://pinkpeachabc.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="黑苹果" scheme="https://pinkpeachabc.cn/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
  </entry>
  
  <entry>
    <title>Spring框架详解</title>
    <link href="https://pinkpeachabc.cn/IOC%20%E5%92%8C%20DI%20%E7%9A%84%E6%A6%82%E8%BF%B0.html"/>
    <id>https://pinkpeachabc.cn/IOC%20%E5%92%8C%20DI%20%E7%9A%84%E6%A6%82%E8%BF%B0.html</id>
    <published>2020-04-21T03:02:12.000Z</published>
    <updated>2021-04-20T11:20:25.914Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>距离上一次更新已经有一个月的时间了，😀其实本改把 Jdbc 的笔记补完，但是这些天事情太多<s>忙着打csgo</s>导致了博客这段时间没有更新。今天突然在网上找到了一篇关于Spring架构论述很好的文章，正好也是得更新一下。</p><p>原文地址：<a href="https://cruii.io/archives/2019111907160329543#top" target="_blank">Spring框架详解</a></p></blockquote><h1 id="ioc-和-di-的概述">IOC 和 DI 的概述<a title="#ioc-和-di-的概述" href="#ioc-和-di-的概述"></a></h1><h2 id="ioc(inversion-of-controll)">IOC(Inversion of Controll)<a title="#ioc(inversion-of-controll)" href="#ioc(inversion-of-controll)"></a></h2><p><strong>思想是反转资源获取的方向</strong>，传统的资源查找方式要求组件向容器发起请求查找资源。作为回应，容器适时的返回资源。而应用了IOC之后，则是<strong>容器主动的将资源推送给它所管理的组件，组件所要做的仅是选择一种合适的方式来接收资源</strong></p><h2 id="di(dependency-injection)">DI(Dependency Injection)<a title="#di(dependency-injection)" href="#di(dependency-injection)"></a></h2><p>是IOC的另一种表述方式，即<strong>组件以一些预先定义好的方式(如：getter方法)来接收来自容器的资源注入</strong></p><h1 id="spring配置">Spring配置<a title="#spring配置" href="#spring配置"></a></h1><p>在SpringIOC容器读取bean配置创建bean实例之前，必须对它进行实例化。只有在容器实例化后，才可以从IOC容器里获取bean实例并使用</p><p>Spring提供了两种类型的IOC容器实现</p><ul><li><strong>BeanFactory：IOC容器的基本实现，在调用getBean()方法时才会实例化对象</strong></li><li><strong>ApplicationContext：提供了更多的高级特性，在加载配置文件后就会实例化对象。是BeanFactory的子接口</strong></li></ul><p><code>BeanFactory</code>是Spring框架的基础设施，面向Spring本身</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext&#96;面向使用Spring框架的开发者，几乎所有的应用场合都直接使用&#96;ApplicationContext&#96;而非底层的&#96;BeanFactory</span><br></pre></td></tr></table></figure><p><strong>无论使用何种方式，配置文件时都是相同的</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class: bean的全类名，通过反射的方式在IOC容器中创建bean，所以要求bean中必须有无参构造器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;people&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.People&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Chen&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">public class People &#123;</span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public People() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;People&#123;&quot; +</span><br><span class="line">                &quot;name=&#x27;&quot; + name + &#x27;\&#x27;&#x27; +</span><br><span class="line">                &#x27;&#125;&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Test</span><br><span class="line">public void test()&#123;</span><br><span class="line">    // 创建IOC容器</span><br><span class="line">    ApplicationContext ctx = new FileSystemXmlApplicationContext(&quot;F:\\Projects\\IdeaProjects\\LearningSpring\\src\\main\\java\\learningspring\\ioc\\examples\\applicationContext.xml&quot;);</span><br><span class="line"></span><br><span class="line">    // 从IOC容器中获取bean实例</span><br><span class="line">    People people = (People) ctx.getBean(&quot;people&quot;);</span><br><span class="line"></span><br><span class="line">    System.out.println(people);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="applicationcontext">ApplicationContext<a title="#applicationcontext" href="#applicationcontext"></a></h2><p><code>ApplicationContext</code>有两个实现类：</p><ul><li><code>ClassPathXmlApplicationContext</code>：加载类路径里的配置文件</li><li><code>FileSystemXmlApplicationContext</code>：加载文件系统里的配置文件</li></ul><h2 id="bean的相关配置">Bean的相关配置<a title="#bean的相关配置" href="#bean的相关配置"></a></h2><h3 id="bean标签的id和name的配置">bean标签的id和name的配置<a title="#bean标签的id和name的配置" href="#bean标签的id和name的配置"></a></h3><ul><li><code>id</code>：使用了约束中的唯一约束。不能有特殊字符</li><li><code>name</code>：没有使用约束中的唯一约束（理论上可以重复，但是实际开发中不能出现）。可以有特殊字符</li></ul><h3 id="bean的生命周期的配置">bean的生命周期的配置<a title="#bean的生命周期的配置" href="#bean的生命周期的配置"></a></h3><ul><li><code>init-method</code>：bean被初始化的时候执行的方法</li><li><code>destroy-method</code>：bean被销毁的时候执行的方法，前提是bean是单例的，工厂关闭</li></ul><h3 id="bean的作用范围的配置">bean的作用范围的配置<a title="#bean的作用范围的配置" href="#bean的作用范围的配置"></a></h3><ul><li>scope: bean的作用范围</li><li><strong>singleton：单例模式，默认的作用域。</strong></li><li><strong>prototype：多例模式。</strong></li><li>request：应用在Web项目中，Spring创建这个类后，将这个类存入到request范围中。</li><li>session：应用在Web项目中，Spring创建这个类后，将这个类存入到session范围中。</li><li>globalsession：应用在Web项目中，必须在porlet环境下使用。但是如果没有这种环境，相当于session。</li></ul><h2 id="spring的bean管理配置">Spring的Bean管理配置<a title="#spring的bean管理配置" href="#spring的bean管理配置"></a></h2><h3 id="spring的bean的实例化方式">Spring的Bean的实例化方式<a title="#spring的bean的实例化方式" href="#spring的bean的实例化方式"></a></h3><h4 id="无参构造方式（默认）">无参构造方式（默认）<a title="#无参构造方式（默认）" href="#无参构造方式（默认）"></a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(Integer length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, length=&quot;</span> + length +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring Bean的实例化方式--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 无参构造的方式 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dog&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Dog&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="静态工厂实例化方式">静态工厂实例化方式<a title="#静态工厂实例化方式" href="#静态工厂实例化方式"></a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Double price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(String name, Double price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Car&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, price=&quot;</span> + price +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">package</span> learningspring.ioc.examples.demo3;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">createCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring Bean的实例化方式--&gt;</span><br><span class="line">    &lt;!-- 静态工厂的方式 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;car&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;learningspring.ioc.examples.demo3.CarFactory&quot;</span> factory-method=<span class="string">&quot;createCar&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="实例工厂实例化方式">实例工厂实例化方式<a title="#实例工厂实例化方式" href="#实例工厂实例化方式"></a></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getLength</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLength</span><span class="params">(Integer length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, length=&quot;</span> + length +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * //TODO</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Dog <span class="title">createDog</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Dog();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring Bean的实例化方式--&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 实例工厂的方式 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dogFactory&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;learningspring.ioc.examples.demo3.DogFactory&quot;</span>/&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dog2&quot;</span> factory-bean=<span class="string">&quot;dogFactory&quot;</span> factory-method=<span class="string">&quot;createDog&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="spring的属性注入方式">Spring的属性注入方式<a title="#spring的属性注入方式" href="#spring的属性注入方式"></a></h3><h4 id="构造方法方式的属性注入">构造方法方式的属性注入<a title="#构造方法方式的属性注入" href="#构造方法方式的属性注入"></a></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构造方法方式的属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Car&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BWM&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;800000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="set方法方式的属性注入">Set方法方式的属性注入<a title="#set方法方式的属性注入" href="#set方法方式的属性注入"></a></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Set方法方式的属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Golden&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="为bean注入引用类型的数据">为Bean注入引用类型的数据<a title="#为bean注入引用类型的数据" href="#为bean注入引用类型的数据"></a></h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构造方法方式的属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Car&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;BWM&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;price&quot;</span> <span class="attr">value</span>=<span class="string">&quot;800000&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Set方法方式的属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Dog&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Golden&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--为Bean注入对象属性--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--构造方法方式一样可行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Chen&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="p名称空间的属性注入（spring2.5）">P名称空间的属性注入（Spring2.5）<a title="#p名称空间的属性注入（spring2.5）" href="#p名称空间的属性注入（spring2.5）"></a></h4><ul><li>通过引入p名称空间完成属性注入<ul><li>普通属性：p:属性名=“值”</li><li>对象属性：p:属性名-ref=“值”</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--P名称空间的属性注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Cat&quot;</span> <span class="attr">p:name</span>=<span class="string">&quot;Orange&quot;</span> <span class="attr">p:length</span>=<span class="string">&quot;100&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--为Bean注入对象属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;employee&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo3.Employee&quot;</span> <span class="attr">p:cat-ref</span>=<span class="string">&quot;cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Chen&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;car&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;car&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dog&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="spel方式的属性注入（spring3）">SpEL方式的属性注入（Spring3）<a title="#spel方式的属性注入（spring3）" href="#spel方式的属性注入（spring3）"></a></h4><p>SpEL：Spring Expresssion Language 的表达式语言</p><p>语法：#{表达式}</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--SpEL表达式注入--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cat2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examples.demo4.Cat&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--字符串要加单引号--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--也可以通过#&#123;beanName.属性名或方法名&#125;来通过其他bean的属性或者方法来注入--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;&#x27;Orange&#x27;&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;length&quot;</span> <span class="attr">value</span>=<span class="string">&quot;#&#123;101&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注入集合类型的数据">注入集合类型的数据<a title="#注入集合类型的数据" href="#注入集合类型的数据"></a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 注入集合类型的数据测试</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] strs;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; set;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStrs</span><span class="params">(String[] strs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.strs = strs;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setList</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSet</span><span class="params">(Set&lt;String&gt; set)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.set = set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMap</span><span class="params">(Map&lt;String, String&gt; map)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CollectionBean&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;strs=&quot;</span> + Arrays.toString(strs) +</span><br><span class="line">                <span class="string">&quot;, list=&quot;</span> + list +</span><br><span class="line">                <span class="string">&quot;, set=&quot;</span> + set +</span><br><span class="line">                <span class="string">&quot;, map=&quot;</span> + map +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--Spring的集合属性的注入--&gt;</span><br><span class="line">    &lt;!--注入数组类型--&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;collectionBean&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;learningspring.ioc.examples.demo4.CollectionBean&quot;</span>&gt;</span><br><span class="line">        &lt;!-- 注入数组类型 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;strs&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;Tom&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Jack&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注入List集合 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;list&quot;</span>&gt;</span><br><span class="line">            &lt;list&gt;</span><br><span class="line">                &lt;value&gt;Lucy&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;Lily&lt;/value&gt;</span><br><span class="line">            &lt;/list&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注入Set集合 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;set&quot;</span>&gt;</span><br><span class="line">            &lt;set&gt;</span><br><span class="line">                &lt;value&gt;aaa&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;bbb&lt;/value&gt;</span><br><span class="line">                &lt;value&gt;ccc&lt;/value&gt;</span><br><span class="line">            &lt;/set&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">        &lt;!-- 注入Map集合 --&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;map&quot;</span>&gt;</span><br><span class="line">            &lt;map&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;a&quot;</span> value=<span class="string">&quot;1&quot;</span>/&gt;</span><br><span class="line">                &lt;entry key=<span class="string">&quot;b&quot;</span> value=<span class="string">&quot;2&quot;</span>/&gt;</span><br><span class="line">            &lt;/map&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h3 id="spring分模块开发的配置">Spring分模块开发的配置<a title="#spring分模块开发的配置" href="#spring分模块开发的配置"></a></h3><ul><li>加载配置文件时，直接加载多个配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ApplicationContext ctx = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">&quot;applicationContext1.xml&quot;</span>, <span class="string">&quot;applicationContext2.xml&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>在一个配置文件中引入多个配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext2.xml&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="spring开发中的常用注解">Spring开发中的常用注解<a title="#spring开发中的常用注解" href="#spring开发中的常用注解"></a></h1><h2 id="@component">@Component<a title="#@component" href="#@component"></a></h2><p>该注解在类上使用，使用该注解就相当于在配置文件中配置了一个Bean，例如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当于以下内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.ioc.examplesannotation.demo1.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该注解有3个衍生注解：</p><ul><li><strong>@Controller：修饰Web 层类</strong></li><li><strong>@Service：修饰Service层类</strong></li><li><strong>@Repository：修饰Dao层类</strong></li></ul><h2 id="@value">@Value<a title="#@value" href="#@value"></a></h2><p>该注解用于给属性注入值，有2种用法</p><ul><li>如果有set方法，则需要将该注解添加到set方法上</li><li>如果没有set方法，则需要将该注解添加到属性上</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Value 注解用于属性注入</span></span><br><span class="line"><span class="comment"> * 当类有提供set方法时添加在set方法上</span></span><br><span class="line"><span class="comment"> * 如果没有，则添加到属性上</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;dog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;100&quot;)</span> <span class="comment">// 注入属性值</span></span><br><span class="line">    <span class="keyword">private</span> Double length;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Dog</span><span class="params">(String name, Double length)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;Golden&quot;)</span> <span class="comment">// 注入属性值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Dog&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, length=&quot;</span> + length +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="@autowired">@Autowired<a title="#@autowired" href="#@autowired"></a></h2><p><code>@Value</code> 通常用于普通属性的注入。</p><p><code>@Autowired</code> 通常用于为对象类型的属性注入值，但是按照<strong>类型</strong>完成属性注入</p><p>习惯是按照<strong>名称</strong>完成属性注入，所以必须让<code>@Autowired</code>注解和<code>@Qualifier</code>注解<strong>一同使用</strong>。</p><p>（如果没有<code>@Qualifier</code>注解，修改以下例子中<code>@Repository</code>注解的值，也能编译成功）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl.save&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="@resource">@Resource<a title="#@resource" href="#@resource"></a></h2><p>该注解也可以用于属性注入，通常情况下使用**@Resource注解**，默认按照<strong>名称</strong>完成属性注入。</p><p>该注解由J2EE提供，需要导入包<code>javax.annotation.Resource</code>。</p><p><code>@Resource</code>有两个重要的属性：<code>name</code>和<code>type</code>，而Spring将<code>@Resource</code>注解的<code>name</code>属性解析为bean的名字，而<code>type</code>属性则解析为bean的类型。所以，如果使用<code>name</code>属性，则使用byName的自动注入策略，而使用<code>type</code>属性时则使用byType自动注入策略。如果既不制定<code>name</code>也不制定<code>type</code>属性，这时将通过反射机制使用byName自动注入策略。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserController</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Controller(&quot;userController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource(name = &quot;userService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserService实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service(&quot;userService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource(name = &quot;userDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserServiceImpl.save&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserDao实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="@postconstruct-和-@predestroy">@PostConstruct 和 @PreDestroy<a title="#@postconstruct-和-@predestroy" href="#@postconstruct-和-@predestroy"></a></h2><p><code>@PostConstruct</code>和<code>@PreDestroy</code>注解，前者为Bean生命周期相关的注解，在配置文件中，使用到了i<code>nit-method</code>参数来配置Bean初始化之前要执行的方法，该注解也是同样的作用。将该注解添加到想在初始化之前执行的目标方法上，就可以实现该功能，而后者则是Bean生命周期中<code>destroy-method</code>目标方法，使用该注解在指定方法上，即可实现在Bean销毁之前执行该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserDao实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="@scope">@Scope<a title="#@scope" href="#@scope"></a></h2><p>Bean的作用范围的注解，默认为singleton（单例）</p><p>可选值：</p><ul><li>singleton</li><li>prototype</li><li>request</li><li>session</li><li>globalsession</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * UserDao实现类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;userDao&quot;)</span></span><br><span class="line"><span class="meta">@Scope</span> <span class="comment">// 默认为singleton</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.save&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserDaoImpl.destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="基于xml配置和基于注解配置的对比">基于XML配置和基于注解配置的对比<a title="#基于xml配置和基于注解配置的对比" href="#基于xml配置和基于注解配置的对比"></a></h2><div class="φbt"><div class="φbv"><table><thead><tr><th style="padding:0"></th><th>基于XML的配置</th><th>基于注解的配置</th></tr></thead><tbody><tr><td>Bean的定义</td><td><bean id="Bean的id" class="类的全路径"/></td><td>@Component或衍生注解@Controller，@Service和@Repository</td></tr><tr><td>Bean的名称</td><td>通过id或name指定</td><td>@Component(“Bean的id”)</td></tr><tr><td>Bean的属性注入</td><td><property>或者通过p命名空间</td><td>通过注解@Autowired 按类型注入 通过@Qualifier按名称注入</td></tr><tr><td>Bean的生命周期</td><td>init-method指定Bean初始化前执行的方法，destroy-method指定Bean销毁前执行的方法</td><td>@PostConstruct 对应于int-method @PreDestroy 对应于destroy-method</td></tr><tr><td>Bean的作用域</td><td>在bean标签中配置scope属性</td><td>@Scope, 默认是singleton 配置多例可以在目标类上使用@Scope(“prototype”)</td></tr><tr><td>使用场景</td><td>Bean来自第三方，可以使用在任何场景</td><td>Bean的实现类由自己维护</td></tr></tbody></table></div></div><p>XML可以适用于任何场景，就算Bean来自第三方也可以适用XML方式来管理。而注解方式就无法在此场景下使用，注解方式可以让开发的过程更加方便，但前提是Bean由自己维护，这样才能在源码中添加注解。</p><p>所以可以使用<strong>两者混合</strong>的方式来开发项目，使用<strong>XML配置文件来管理Bean，使用注解来进行属性注入</strong></p><h1 id="spring-aop">Spring AOP<a title="#spring-aop" href="#spring-aop"></a></h1><h2 id="aop的概述">AOP的概述<a title="#aop的概述" href="#aop的概述"></a></h2><p>即<strong>面向切面编程</strong>，通过<strong>预编译</strong>方式和运行期动态代理实现程序功能的统一维护的一种技术。利用AOP可以对业务逻辑的各个部分进行<strong>隔离</strong>，从而使得业务逻辑各部分之间的<strong>耦合度降低</strong>，提高程序的<strong>可重用性</strong>，同时提高了开发的效率。</p><h2 id="aop的案例（应用场景）">AOP的案例（应用场景）<a title="#aop的案例（应用场景）" href="#aop的案例（应用场景）"></a></h2><p>背景：某项目已经写好了保存到数据库的方法。假设现在需要添加一个新的功能，例如权限校验，在保存到数据库之前要对用户权限进行校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在需要多加一个需求，在用户将数据保存到数据库之前，进行权限校验。</p><p>此时通常就会在该方法中添加一个方法来进行权限校验然后在save方法中调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        checkPri();</span><br><span class="line">        <span class="comment">// 保存到数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 权限校验</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用这样的方法来实现，弊端就是只能在这一个类中使用，通常一个项目中有许多的方法都可能需要执行权限校验，此时就要在每个类中编写同样的代码，所以该方法并不科学。</p><p>此时就有了一个更好的方法，即<strong>纵向继承</strong>。</p><p>定义一个通用的Dao，在通用的Dao中编写权限校验的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 权限校验</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后每一个不同的类都去继承这个类，再调用该方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">extends</span> <span class="title">BaseDao</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        checkPri();</span><br><span class="line">        <span class="comment">// 保存到数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时就只需要维护<code>BaseDao</code>中的一份代码就可以，大大减轻了工作量，提高了效率。</p><p>但AOP的思想更高一步，不采用纵向继承，而采用<strong>横向抽取</strong>来取代</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 保存到数据库</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>横向抽取机制实质上就是<strong>代理机制</strong>，通过创建<code>UserDaoImpl</code>类的代理类，通过代理类来调用权限校验的方法。</p><h2 id="aop底层实现原理">AOP底层实现原理<a title="#aop底层实现原理" href="#aop底层实现原理"></a></h2><p>AOP的实现使用了动态代理技术，动态代理分为两种</p><ul><li>JDK动态代理：只能对实现了接口的类产生代理</li><li>Cglib动态代理（类似于javassist的第三方代理技术）：对没有实现接口的类产生代理对象，即生成子类对象。</li></ul><h3 id="jdk动态代理">JDK动态代理<a title="#jdk动态代理" href="#jdk动态代理"></a></h3><h4 id="jdk动态代理案例">JDK动态代理案例<a title="#jdk动态代理案例" href="#jdk动态代理案例"></a></h4><p>该案例实现一个计算器的日志功能</p><p>首先创建一个接口<code>Calculator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 实数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 实数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相加结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 减法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 实数,被减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 实数,减数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相减结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乘法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 实数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 实数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相乘结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 除法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> a 实数,被除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> b 实数,除数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 相除结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个类<code>CalculatorImpl</code>来实现该接口并重写方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorImpl</span> <span class="keyword">implements</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除数不能为0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在测试类中测试该计算器代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calculator target = <span class="keyword">new</span> CalculatorImpl();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + target.add(a, b));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + target.mul(a, b));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + target.sub(a, b));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + target.div(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时控制台的输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">res --&gt; 20</span><br><span class="line">res --&gt; 100</span><br><span class="line">res --&gt; 0</span><br><span class="line">res --&gt; 1</span><br></pre></td></tr></table></figure><p>现在为该计算器增加<strong>打印日志</strong>的功能</p><p>创建一个计算器的代理类<code>CalculatorLoggingProxy</code>，在类中首先定义被代理的目标对象target，并通过构造函数进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器代理类</span></span><br><span class="line"><span class="comment"> * 实现扩展打印日志功能</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被代理的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculatorProxy</span><span class="params">(Calculator target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Calculator <span class="title">createProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Calculator proxy;</span><br><span class="line"></span><br><span class="line">        ClassLoader classLoader = target.getClass().getClassLoader();</span><br><span class="line"></span><br><span class="line">        Class[] interfaces = <span class="keyword">new</span> Class[]&#123;Calculator.class&#125;;</span><br><span class="line"></span><br><span class="line">        InvocationHandler handler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> proxy     正在返回的代理对象，一般在invoke方法中都不使用该对象</span></span><br><span class="line"><span class="comment">             *                  如果使用该对象，则会引发栈内存溢出。因为会循环调用invoke方法。</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> method    正在被调用的方法</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> args      调用方式时传入的参数</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">             * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                <span class="comment">// 获取方法名</span></span><br><span class="line">                String methodName = method.getName();</span><br><span class="line">                <span class="comment">// 输出日志逻辑</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date() + <span class="string">&quot;: The method &quot;</span> + methodName + <span class="string">&quot; begins with &quot;</span> + Arrays.asList(args));</span><br><span class="line">                <span class="comment">// 执行方法</span></span><br><span class="line">                Object result = method.invoke(target, args);</span><br><span class="line">                <span class="comment">// 输出日志逻辑</span></span><br><span class="line">                System.out.println(<span class="keyword">new</span> Date() + <span class="string">&quot;: The method &quot;</span> + methodName + <span class="string">&quot; ends with &quot;</span> + result);</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        proxy = (Calculator) Proxy.newProxyInstance(classLoader,interfaces,handler);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时重新编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Calculator target = <span class="keyword">new</span> CalculatorImpl();</span><br><span class="line">        <span class="comment">// 创建代理对象</span></span><br><span class="line">        Calculator proxy = <span class="keyword">new</span> CalculatorProxy(target).createProxy();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">10</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + proxy.add(a, b));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + proxy.mul(a, b));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + proxy.sub(a, b));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;res --&gt; &quot;</span> + proxy.div(a, b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到此就完成了在不改变<code>CalculatorImpl</code>类的源代码的情况下，实现对计算器的功能增加，实现了日志打印的功能。此时控制台的打印内容为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Sun Mar 17 20:36:26 CST 2019: The method add begins with [10, 10]</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method add ends with 20</span><br><span class="line">res --&gt; 20</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method mul begins with [10, 10]</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method mul ends with 100</span><br><span class="line">res --&gt; 100</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method sub begins with [10, 10]</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method sub ends with 0</span><br><span class="line">res --&gt; 0</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method div begins with [10, 10]</span><br><span class="line">Sun Mar 17 20:36:26 CST 2019: The method div ends with 1</span><br><span class="line">res --&gt; 1</span><br></pre></td></tr></table></figure><h3 id="cglib动态代理">Cglib动态代理<a title="#cglib动态代理" href="#cglib动态代理"></a></h3><h4 id="cglib动态代理案例">Cglib动态代理案例<a title="#cglib动态代理案例" href="#cglib动态代理案例"></a></h4><p>同样来实现一个对计算器来增加打印日志功能</p><p>首先创建计算器类<code>Calculator</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a * b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除数不能为0&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时需要导入cglib的jar包，在maven中添加依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着创建计算器的代理类<code>CalculatorProxy</code>并且实现<code>MethodInterceptor</code>接口并重写<code>intercept</code>方法。</p><p>在类中首先定义被代理的目标对象，并通过构造函数进行赋值。然后创建<code>createProxy()</code>方法返回被增强的计算器对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计算器代理类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CalculatorProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 被代理的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CalculatorProxy</span><span class="params">(Calculator target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Calculator <span class="title">createProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建cglib的核心类对象</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.设置父类</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.设置回调（类似于jdk动态代理中的InvocationHandler对象）</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.创建代理对象</span></span><br><span class="line">        Calculator proxy = (Calculator) enhancer.create();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> proxy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="comment">// 获取方法名</span></span><br><span class="line">        String methodName = method.getName();</span><br><span class="line">        <span class="comment">// 输出日志逻辑</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">&quot;: The method &quot;</span> + methodName + <span class="string">&quot; begins with &quot;</span> + Arrays.asList(args));</span><br><span class="line">        <span class="comment">// 执行方法</span></span><br><span class="line">        Object result = methodProxy.invokeSuper(proxy, args);</span><br><span class="line">        <span class="comment">// 输出日志逻辑</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> Date() + <span class="string">&quot;: The method &quot;</span> + methodName + <span class="string">&quot; ends with &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="spring中的aop实现——aspectj">Spring中的AOP实现——AspectJ<a title="#spring中的aop实现——aspectj" href="#spring中的aop实现——aspectj"></a></h2><h3 id="aop开发中的相关术语">AOP开发中的相关术语<a title="#aop开发中的相关术语" href="#aop开发中的相关术语"></a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDao</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>joinpoint(连接点) ： 可以被拦截到的点。save(), query(),update(),delete()方法都可以增强，这些方法就可以称为连接点。</li><li>pointcut(切入点)：真正被拦截到的点。在实际开发中，可以只对save()方法进行增强，那么save()方法就是切入点。</li><li>advice(增强)：方法层面的增强，现在可以对save()方法进行权限校验，权限校验(checkPri())的方法称为增强。</li><li>introduction(引介)：类层面的增强。</li><li>target(目标)：被增强的对象。</li><li>weaving(织入)：将增强(advice)应用到目标(target)的过程</li><li>proxy(代理)：代理对象，被增强以后的代理对象</li><li>aspect(切面)：多个增强(advice)和多个切入点(pointcut)的组合</li></ul><h3 id="aspectj的xml配置案例">AspectJ的XML配置案例<a title="#aspectj的xml配置案例" href="#aspectj的xml配置案例"></a></h3><p>首先创建一个接口<code>ProductDao</code>，在里面定义添加商品，查询商品，修改商品，删除商品方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建一个类<code>ProductDaoImpl</code>来实现该接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在目的就是给<code>save()</code>方法进行增强，使得在调用<code>save()</code>方法前进行权限校验。</p><p>要实现此功能，先创建一个<strong>增强类</strong>，或者叫<strong>切面类</strong>。里面编写要增强的功能，例如权限校验。</p><p>创建增强类<code>ProductEnhancer</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建配置文件<code>aspectj-xml.xml</code>来配置，该文件名此案例仅用于演示，实际开发中不要采取此名，依据实际需求编写。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象，即被增强的对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将增强类(切面类)交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productEnhancer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductEnhancer&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通过对AOP的配置完成对目标对象产生代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表达式配置哪些类的哪些方法需要进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对ProductDaoImpl类中的save方法进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        “*” 表示任意返回值类型</span></span><br><span class="line"><span class="comment">        “..” 表示任意参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.save(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;productEnhancer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 前置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 实现在调用save方法之前调用checkPri方法来进行权限校验--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;checkPri&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>至此切入点及切面都已配置完成，编写测试类和方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AspectJ的XML方式配置测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:aspectj-xml.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;productDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 对save方法进行增强</span></span><br><span class="line">        productDao.save();</span><br><span class="line"></span><br><span class="line">        productDao.delete();</span><br><span class="line">        </span><br><span class="line">        productDao.modify();</span><br><span class="line">        </span><br><span class="line">        productDao.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行<code>test()</code>方法，控制台打印结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验</span><br><span class="line">添加商品</span><br><span class="line">删除商品</span><br><span class="line">修改商品</span><br><span class="line">查询商品</span><br></pre></td></tr></table></figure><p>至此就实现了在不修改<code>ProductDaoImpl</code>类的情况下，对其中的<code>save()</code>方法进行增强。</p><h3 id="spring中常用的增强类型">Spring中常用的增强类型<a title="#spring中常用的增强类型" href="#spring中常用的增强类型"></a></h3><h4 id="前置增强">前置增强<a title="#前置增强" href="#前置增强"></a></h4><p>在目标方法执行之前执行，可以获得切入点的信息</p><p>修改之前的<code>ProductEnhancer</code>类的<code>checkPri()</code>方法的参数。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行测试方法，控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验execution(void learningspring.aop.aspectj.xml.demo2.ProductDao.save())</span><br><span class="line">添加商品</span><br><span class="line">删除商品</span><br><span class="line">修改商品</span><br><span class="line">查询商品</span><br></pre></td></tr></table></figure><h4 id="后置增强">后置增强<a title="#后置增强" href="#后置增强"></a></h4><p>在目标方法执行之后执行，可以获得方法的返回值</p><p>首先修改<code>ProductDao</code>中的<code>delete()</code>方法的返回值类型，改成String</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再修改<code>ProductDaoImpl</code>中的<code>delete()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除商品&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>ProductEnhancer</code>类，添加<code>writeLog()</code>方法，实现写日志功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用save方法之前进行权限校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用delete方法之后，写入日志记录操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 目标方法返回的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【后置增强】写入日志 操作时间：&quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改<code>aspectj.xml</code>配置文件，配置新的<strong>切入点</strong>和<strong>切面</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象，即被增强的对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将增强类(切面类)交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productEnhancer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductEnhancer&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通过对AOP的配置完成对目标对象产生代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表达式配置哪些类的哪些方法需要进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对ProductDaoImpl类中的save方法进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        “*” 表示任意返回值类型</span></span><br><span class="line"><span class="comment">        “..” 表示任意参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.save(..))&quot;</span>/&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">&lt;!-- 后置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.delete(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;productEnhancer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 前置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 实现在调用save方法之前调用checkPri方法来进行权限校验--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;checkPri&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!-- 后置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- returning里面的值必须和writeLog()方法里的参数名相同，本案例为result--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;writeLog&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut2&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行测试方法，控制台打印结果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验execution(void learningspring.aop.aspectj.xml.demo2.ProductDao.save())</span><br><span class="line">添加商品</span><br><span class="line">删除商品</span><br><span class="line">【后置增强】写入日志 操作时间：Tue Mar 19 15:59:48 CST 2019</span><br><span class="line">修改商品</span><br><span class="line">查询商品</span><br></pre></td></tr></table></figure><h4 id="环绕增强">环绕增强<a title="#环绕增强" href="#环绕增强"></a></h4><p>在目标方法执行之前和之后都执行</p><p>利用环绕增强来实现在调用<code>modify()</code>方法前后进行性能监控</p><p>首先修改<code>ProductEnhancer</code>类，添加<code>monitor()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用save方法之前进行权限校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用delete方法之后，写入日志记录操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 目标方法返回的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【后置增强】写入日志 操作时间：&quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕增强</span></span><br><span class="line"><span class="comment">     * 在调用modify方法前后，显示性能参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 可抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitor</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        Object obj = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再修改<code>aspectj.xml</code>配置文件，添加新的<strong>切入点</strong>和<strong>切面</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象，即被增强的对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将增强类(切面类)交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productEnhancer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductEnhancer&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通过对AOP的配置完成对目标对象产生代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表达式配置哪些类的哪些方法需要进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对ProductDaoImpl类中的save方法进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        “*” 表示任意返回值类型</span></span><br><span class="line"><span class="comment">        “..” 表示任意参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.save(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 后置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.delete(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 环绕增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.modify(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;productEnhancer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 前置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 实现在调用save方法之前调用checkPri方法来进行权限校验--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;checkPri&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 后置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- returning里面的值必须和writeLog()方法里的参数名相同，本案例为result--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;writeLog&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 环绕增强 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;monitor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行测试方法，控制台打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验execution(void learningspring.aop.aspectj.xml.demo2.ProductDao.save())</span><br><span class="line">添加商品</span><br><span class="line">删除商品</span><br><span class="line">【后置增强】写入日志 操作时间：Tue Mar 19 15:58:49 CST 2019</span><br><span class="line">【环绕增强】当前空闲内存185MB</span><br><span class="line">修改商品</span><br><span class="line">【环绕增强】当前空闲内存185MB</span><br><span class="line">查询商品</span><br></pre></td></tr></table></figure><h4 id="异常抛出增强">异常抛出增强<a title="#异常抛出增强" href="#异常抛出增强"></a></h4><p>在程序出现异常时执行</p><p>利用异常抛出增强来实现获取异常信息的功能</p><p>首先修改<code>ProductDaoImpl</code>中的<code>query()</code>方法，使该方法抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除商品&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改<code>ProductEnhancer</code>类，添加<code>exception()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用save方法之前进行权限校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用delete方法之后，写入日志记录操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 目标方法返回的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【后置增强】写入日志 操作时间：&quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕增强</span></span><br><span class="line"><span class="comment">     * 在调用modify方法前后，显示性能参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 可抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitor</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        Object obj = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常抛出增强</span></span><br><span class="line"><span class="comment">     * 在调用query时若抛出异常则打印异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(Throwable ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【异常抛出增强】&quot;</span> + <span class="string">&quot;异常信息：&quot;</span> +ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再修改<code>aspectj-xml.xml</code>配置文件，添加新的<strong>切入点</strong>和<strong>切面</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象，即被增强的对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将增强类(切面类)交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productEnhancer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductEnhancer&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通过对AOP的配置完成对目标对象产生代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表达式配置哪些类的哪些方法需要进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对ProductDaoImpl类中的save方法进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        “*” 表示任意返回值类型</span></span><br><span class="line"><span class="comment">        “..” 表示任意参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.save(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 后置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.delete(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 环绕增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.modify(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 异常抛出增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.query(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;productEnhancer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 前置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 实现在调用save方法之前调用checkPri方法来进行权限校验--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;checkPri&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 后置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- returning里面的值必须和writeLog()方法里的参数名相同，本案例为result--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;writeLog&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 环绕增强 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;monitor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 异常抛出增强 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut4&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后执行测试方法，控制台输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验execution(void learningspring.aop.aspectj.xml.demo2.ProductDao.save())</span><br><span class="line">添加商品</span><br><span class="line">删除商品</span><br><span class="line">【后置增强】写入日志 操作时间：Tue Mar 19 15:58:16 CST 2019</span><br><span class="line">【环绕增强】当前空闲内存183MB</span><br><span class="line">修改商品</span><br><span class="line">【环绕增强】当前空闲内存183MB</span><br><span class="line">查询商品</span><br><span class="line">【异常抛出增强】异常信息：&#x2F; by zero</span><br></pre></td></tr></table></figure><h4 id="最终增强">最终增强<a title="#最终增强" href="#最终增强"></a></h4><p>无论代码是否有异常最终都会执行</p><p>继续在异常抛出增强的代码修改，实现无论是否抛出异常都会打印当前时间信息</p><p>首先修改<code>ProductEnhancer</code>类，添加<code>finallyAdvice()</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用save方法之前进行权限校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用delete方法之后，写入日志记录操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 目标方法返回的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【后置增强】写入日志 操作时间：&quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕增强</span></span><br><span class="line"><span class="comment">     * 在调用modify方法前后，显示性能参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 可抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitor</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        Object obj = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常抛出增强</span></span><br><span class="line"><span class="comment">     * 在调用query时若抛出异常则打印异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(Throwable ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【异常抛出增强】&quot;</span> + <span class="string">&quot;异常信息：&quot;</span> +ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终增强</span></span><br><span class="line"><span class="comment">     * 无论query方法是否抛出异常都打印当前时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finallyAdvice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【最终增强】&quot;</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>aspectj.xml</code>配置文件，添加新的<strong>切面</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象，即被增强的对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 将增强类(切面类)交给Spring管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;productEnhancer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.aop.aspectj.xml.demo2.ProductEnhancer&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 通过对AOP的配置完成对目标对象产生代理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 表达式配置哪些类的哪些方法需要进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 对ProductDaoImpl类中的save方法进行增强 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        “*” 表示任意返回值类型</span></span><br><span class="line"><span class="comment">        “..” 表示任意参数</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.save(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 后置增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.delete(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 环绕增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut3&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.modify(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 异常抛出增强的切入点配置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut4&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.query(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置切面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;productEnhancer&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 前置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 实现在调用save方法之前调用checkPri方法来进行权限校验--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;checkPri&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 后置增强 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- returning里面的值必须和writeLog()方法里的参数名相同，本案例为result--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;writeLog&quot;</span> <span class="attr">returning</span>=<span class="string">&quot;result&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut2&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 环绕增强 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;monitor&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut3&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 异常抛出增强 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;exception&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut4&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 最终增强 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;finallyAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut4&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后运行测试代码，控制台输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验execution(void learningspring.aop.aspectj.xml.demo2.ProductDao.save())</span><br><span class="line">添加商品</span><br><span class="line">删除商品</span><br><span class="line">【后置增强】写入日志 操作时间：Tue Mar 19 15:57:01 CST 2019</span><br><span class="line">【环绕增强】当前空闲内存183MB</span><br><span class="line">修改商品</span><br><span class="line">【环绕增强】当前空闲内存183MB</span><br><span class="line">查询商品</span><br><span class="line">【最终增强】Tue Mar 19 15:57:01 CST 2019</span><br><span class="line">【异常抛出增强】异常信息：&#x2F; by zero</span><br></pre></td></tr></table></figure><h3 id="aop切入点表达式语法">AOP切入点表达式语法<a title="#aop切入点表达式语法" href="#aop切入点表达式语法"></a></h3><p>AOP切入点表达式是基于execution的函数完成的</p><p>语法：<strong>[访问修饰符] 方法返回值 包名.类名.方法名(参数)</strong></p><p>“*” 表示任意返回值类型 “…” 表示任意参数</p><ul><li><code>public void learningspring.aop.aspectj.xml.demo2.ProductDaoImpl.save(..)</code>：具体到某个增强的方法</li><li><code>* *.*.*.*Dao.save(..)</code>：所有包下的所有以Dao结尾的类中的save方法都会被增强</li><li><code>* learningspring.aop.aspectj.xml.demo2.ProductDaoImpl+.save(..)</code>：ProductDaoImpl及其子类的save方法都会被增强</li><li><code>* learningspring.aop.aspectj.xml..*.*(..)</code>：xml包及其子包的所有类的方法都会被增强</li></ul><h3 id="aspectj的注解配置案例">AspectJ的注解配置案例<a title="#aspectj的注解配置案例" href="#aspectj的注解配置案例"></a></h3><p>首先也是创建一个接口<code>ProductDao</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao接口</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">save</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除商品</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">delete</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建一个Dao实现类<code>ProductDaoImpl</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductDaoImpl</span> <span class="keyword">implements</span> <span class="title">ProductDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;添加商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除商品&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;查询商品&quot;</span>);</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建<strong>增强类</strong><code>ProductEnhancer</code>，在该类里面使用注解</p><p>使用<code>@Pointcut</code>注解可以配置切入点信息，在较多的方法都要使用同一个增强时，就可以配置一个切入点让目标方法都去引用</p><p><code>@Before</code>：前置增强</p><p><code>@AfterReturning</code>：后置增强，其中的returning的值必须和方法传入的参数名相同</p><p><code>@Around</code>：环绕增强</p><p><code>@AfterThrowing</code>：异常抛出增强，其中的throwing的值必须和方法传入的参数名相同</p><p><code>@After</code>：最终增强</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ProductDao的增强类(切面类)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductEnhancer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 切入点配置</span></span><br><span class="line"><span class="comment">     * 对ProductDaoImpl里的方法都增强</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* learningspring.aop.aspectj.annotation.demo2.ProductDaoImpl.*(..))&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">pointcut1</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用save方法之前进行权限校验</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(* learningspring.aop.aspectj.annotation.demo2.ProductDaoImpl.save())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPri</span><span class="params">(JoinPoint joinPoint)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【前置增强】权限校验&quot;</span> + joinPoint);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置增强案例</span></span><br><span class="line"><span class="comment">     * 在调用delete方法之后，写入日志记录操作时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 目标方法返回的对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterReturning(returning = &quot;result&quot;, value = &quot;execution(* learningspring.aop.aspectj.annotation.demo2.ProductDaoImpl.delete())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">writeLog</span><span class="params">(Object result)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【后置增强】写入日志 操作时间：&quot;</span> + result.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕增强</span></span><br><span class="line"><span class="comment">     * 在调用modify方法前后，显示性能参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> joinPoint 切入点对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable 可抛出的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around(value = &quot;execution(* learningspring.aop.aspectj.annotation.demo2.ProductDaoImpl.modify())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">monitor</span><span class="params">(ProceedingJoinPoint joinPoint)</span> <span class="keyword">throws</span> Throwable</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        Object obj = joinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;【环绕增强】当前空闲内存&quot;</span> + Runtime.getRuntime().freeMemory()/(<span class="number">1024</span> * <span class="number">1024</span>) + <span class="string">&quot;MB&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常抛出增强</span></span><br><span class="line"><span class="comment">     * 在调用query时若抛出异常则打印异常信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterThrowing(throwing = &quot;ex&quot;, value = &quot;execution(* learningspring.aop.aspectj.annotation.demo2.ProductDaoImpl.query())&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exception</span><span class="params">(Throwable ex)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【异常抛出增强】&quot;</span> + <span class="string">&quot;异常信息：&quot;</span> +ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 最终增强</span></span><br><span class="line"><span class="comment">     * 无论ProductDaoImpl里的每个方法是否抛出异常都打印当前时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@After(value = &quot;pointcut1()&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finallyAdvice</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;【最终增强】&quot;</span> + <span class="keyword">new</span> Date().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AspectJ的注解方式配置测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:aspectj-annotation.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;productDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> ProductDao productDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        productDao.save();</span><br><span class="line"></span><br><span class="line">        productDao.delete();</span><br><span class="line"></span><br><span class="line">        productDao.modify();</span><br><span class="line"></span><br><span class="line">        productDao.query();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，控制台输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">【前置增强】权限校验execution(void learningspring.aop.aspectj.annotation.demo2.ProductDao.save())</span><br><span class="line">添加商品</span><br><span class="line">【最终增强】Tue Mar 19 16:01:06 CST 2019</span><br><span class="line">删除商品</span><br><span class="line">【最终增强】Tue Mar 19 16:01:06 CST 2019</span><br><span class="line">【后置增强】写入日志 操作时间：Tue Mar 19 16:01:06 CST 2019</span><br><span class="line">【环绕增强】当前空闲内存186MB</span><br><span class="line">修改商品</span><br><span class="line">【环绕增强】当前空闲内存186MB</span><br><span class="line">【最终增强】Tue Mar 19 16:01:06 CST 2019</span><br><span class="line">查询商品</span><br><span class="line">【最终增强】Tue Mar 19 16:01:06 CST 2019</span><br><span class="line">【异常抛出增强】异常信息：&#x2F; by zero</span><br></pre></td></tr></table></figure><h1 id="spring-jdbc-template">Spring JDBC Template<a title="#spring-jdbc-template" href="#spring-jdbc-template"></a></h1><p>Spring提供了提供了多种持久层技术的模板类</p><div class="φbt"><div class="φbv"><table><thead><tr><th>ORM持久化技术</th><th>模板类</th></tr></thead><tbody><tr><td>JDBC</td><td>org.springframework.jdbc.core.JdbcTemplate</td></tr><tr><td>Hibernate3.0</td><td>org.springframework.orm.hibernate3.HibernateTemplate</td></tr><tr><td>IBatis(Mybatis)</td><td>org.springframework.orm.ibatis.SqlMapClientTemplate</td></tr><tr><td>JPA</td><td>org.springframework.orm.jpa.JpaTemplate</td></tr></tbody></table></div></div><h2 id="jdbc-template的入门">JDBC Template的入门<a title="#jdbc-template的入门" href="#jdbc-template的入门"></a></h2><p>首先引入jar包，在<code>pom.xml</code>文件中加入<code>spring-jdbc</code>，<code>spring-tx</code>，<code>mysql-connector-java</code>（本案例使用的是MySQL8）三个依赖。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.14.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后创建数据库表，本例使用的MySQL8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">create table account</span><br><span class="line">(</span><br><span class="line">id int auto_increment</span><br><span class="line">primary key,</span><br><span class="line">name varchar(8) not null,</span><br><span class="line">money double default 0</span><br><span class="line">)</span><br><span class="line">comment &#39;账户表&#39;;</span><br></pre></td></tr></table></figure><h3 id="基本使用">基本使用<a title="#基本使用" href="#基本使用"></a></h3><p>最基本的使用，不依赖于Spring 的管理，手动创建对象，采用硬编码的方式进行属性注入。不推荐使用该方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 硬编码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">// 创建连接池</span></span><br><span class="line">        DriverManagerDataSource dataSource = <span class="keyword">new</span> DriverManagerDataSource();</span><br><span class="line">        dataSource.setDriverClassName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dataSource.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/springjdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false &quot;</span>);</span><br><span class="line">        dataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        dataSource.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建JDBC Template</span></span><br><span class="line">        JdbcTemplate jdbcTemplate = <span class="keyword">new</span> JdbcTemplate(dataSource);</span><br><span class="line">        <span class="keyword">int</span> i = jdbcTemplate.update(<span class="string">&quot;INSERT INTO account VALUES (null ,?,?)&quot;</span>, <span class="string">&quot;Tom&quot;</span>, <span class="number">20000d</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Update Successful&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来使用第二种方法，把连接池对象和模板(Template)都交给Spring来管理</p><p>创建<code>spring-jdbc.xml</code>该文件用来管理Bean</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据库连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DriverManagerDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springjdbc?useUnicode=true<span class="symbol">&amp;amp;</span>characterEncoding=utf-8<span class="symbol">&amp;amp;</span>serverTimezone=Asia/Shanghai<span class="symbol">&amp;amp;</span>useSSL=false&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring JDBC Template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在测试类中加入相应的注解，以及配置文件信息，编写新的测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring JDBC Template的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-jdbc.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spring 配置文件方式</span></span><br><span class="line"><span class="comment">     * 把连接池和模板(Template)都交给spring管理</span></span><br><span class="line"><span class="comment">     * 日志信息：Loaded JDBC driver: com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">     * 是使用的默认的连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplate&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = jdbcTemplate.update(<span class="string">&quot;INSERT INTO account VALUES (null ,?,?)&quot;</span>, <span class="string">&quot;Jack&quot;</span>, <span class="number">30000d</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Update Successful&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>通过<code>@Resource</code>注解从IOC容器中获取到模板对象，然后通过该模板对象来操作数据库。</p><p>这样就完成了Spring JDBC Template的最基本使用</p><h3 id="数据库连接池">数据库连接池<a title="#数据库连接池" href="#数据库连接池"></a></h3><p>在实际开发中，可能并不会使用默认的连接池，而是去使用一些开源的数据库连接池，在该例中介绍两种数据库连接池DBCP和C3P0</p><h4 id="dbcp连接池的配置">DBCP连接池的配置<a title="#dbcp连接池的配置" href="#dbcp连接池的配置"></a></h4><p>首先创建连接数据库的配置文件<code>db.properties</code>，注意，不同的MySQL版本可能url信息会不同，比如MySQL8就需要添加<code>serverTimezone</code>参数。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">jdbc.driverClassName</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/springjdbc?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false </span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><p>接着创建一个新的配置文件<code>spring-dbcp.xml</code>和前面的配置文件做区分。</p><p>利用<code>context:property-placeholder</code>标签引入<code>db.properties</code>配置文件，通过<code>$&#123;key&#125;</code>的方式来获取对应的value。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置DBCP连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.commons.dbcp2.BasicDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring JDBC Template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplateDBCP&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring JDBC Template的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-dbcp.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用开源的数据库连接池进行配置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用DBCP连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplateDBCP&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplateDBCP;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = jdbcTemplateDBCP.update(<span class="string">&quot;INSERT INTO account VALUES (null ,?,?)&quot;</span>, <span class="string">&quot;Lucy&quot;</span>, <span class="number">40000d</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Update Successful&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="c3p0连接池配置">C3P0连接池配置<a title="#c3p0连接池配置" href="#c3p0连接池配置"></a></h4><p>同样是创建一个新的配置文件<code>spring-c3p0.xml</code>，以作区分，同时也要引入数据库配置文件<code>db.properties</code></p><p>要注意<code>property</code>标签的<code>name</code>属性和前面的配置文件<strong>稍有不同</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Spring JDBC Template --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplateC3P0&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Spring JDBC Template的使用</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(&quot;classpath:spring-*.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用开源的数据库连接池进行配置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用C3P0连接池</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource(name = &quot;jdbcTemplateC3P0&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplateC3P0;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = jdbcTemplateC3P0.update(<span class="string">&quot;INSERT INTO account VALUES (null ,?,?)&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="number">50000d</span>);</span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Update Successful&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="完成基本的crud操作">完成基本的CRUD操作<a title="#完成基本的crud操作" href="#完成基本的crud操作"></a></h3><p>以下内容都是使用的<strong>C3P0连接池</strong>，并且通过<code>@Resource</code>注解从IOC容器中获取了<code>jdbcTemplateC3P0</code>对象</p><h4 id="插入操作">插入操作<a title="#插入操作" href="#插入操作"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 插入操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = jdbcTemplateC3P0.update(<span class="string">&quot;INSERT INTO account VALUES (null ,?,?)&quot;</span>, <span class="string">&quot;Lily&quot;</span>, <span class="number">50000d</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Update Successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="修改操作">修改操作<a title="#修改操作" href="#修改操作"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 修改操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = jdbcTemplateC3P0.update(<span class="string">&quot;UPDATE account SET name = ? WHERE id = ?&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Update Successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除操作">删除操作<a title="#删除操作" href="#删除操作"></a></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 删除操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = jdbcTemplateC3P0.update(<span class="string">&quot;DELETE FROM account WHERE id = ?&quot;</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span> (i &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Delete Successful&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查询操作">查询操作<a title="#查询操作" href="#查询操作"></a></h4><h5 id="查询某个属性">查询某个属性<a title="#查询某个属性" href="#查询某个属性"></a></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询操作</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 查询单个字符串结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String result = jdbcTemplateC3P0.queryForObject(<span class="string">&quot;SELECT name FROM account WHERE id = ?&quot;</span>, String.class, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (result != <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 统计查询</span></span><br><span class="line"><span class="comment"> * 返回数据表中的记录数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Long result = jdbcTemplateC3P0.queryForObject(<span class="string">&quot;SELECT COUNT(*) FROM account&quot;</span>, Long.class);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询返回单个对象">查询返回单个对象<a title="#查询返回单个对象" href="#查询返回单个对象"></a></h5><p>要实现查询的数据封装成一个对象的话，查询<code>queryForObject</code>的参数列表可知需要一个<code>rowMapper</code>的参数。所以需要创建一个执行数据封装的类来实现<code>RowMapper</code>接口里的<code>mapRow</code>方法，在这个方法里进行数据对象的封装。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据封装类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRowMapper</span> <span class="keyword">implements</span> <span class="title">RowMapper</span>&lt;<span class="title">Account</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">mapRow</span><span class="params">(ResultSet rs, <span class="keyword">int</span> rowNum)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Account account = <span class="keyword">new</span> Account();</span><br><span class="line">        account.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        account.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        account.setMoney(rs.getDouble(<span class="string">&quot;money&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> account;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将查询的结果封装成对象</span></span><br><span class="line"><span class="comment"> * 要创建一个自定义rowMapper来实现RowMapper接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Account account = jdbcTemplateC3P0.queryForObject(<span class="string">&quot;SELECT * FROM account WHERE id = ?&quot;</span>, <span class="keyword">new</span> MyRowMapper(), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (account != <span class="keyword">null</span>)&#123;</span><br><span class="line">        System.out.println(account);</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;NULL&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="查询返回对象集合">查询返回对象集合<a title="#查询返回对象集合" href="#查询返回对象集合"></a></h5><p>要实现查询返回对象集合依然需要自定义类实现<code>RowMapper</code>接口，调用的是<code>query</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询多条记录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test10</span><span class="params">()</span></span>&#123;</span><br><span class="line">    List&lt;Account&gt; accounts = jdbcTemplateC3P0.query(<span class="string">&quot;SELECT * FROM account&quot;</span>, <span class="keyword">new</span> MyRowMapper());</span><br><span class="line">    accounts.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="spring事务管理">Spring事务管理<a title="#spring事务管理" href="#spring事务管理"></a></h1><h2 id="什么是事务">什么是事务<a title="#什么是事务" href="#什么是事务"></a></h2><p>事务：逻辑上的一组操作，组成这组操作的各个单元，要么全部成功，要么全部失败。</p><h2 id="事务的特性">事务的特性<a title="#事务的特性" href="#事务的特性"></a></h2><ul><li>原子性：事务不可分割</li><li>一致性：事务执行前后数据完整性保持一致</li><li>隔离性：一个事务的执行不应该受到其他事务的干扰</li><li>持久性：一旦事务结束，数据就持久化到数据库</li></ul><h2 id="不考虑隔离性引发的安全性问题">不考虑隔离性引发的安全性问题<a title="#不考虑隔离性引发的安全性问题" href="#不考虑隔离性引发的安全性问题"></a></h2><ul><li>读问题<ul><li>脏读：A事务读到B事务未提交的数据</li><li>不可重复读：B事务在A事务两次读取数据之间，修改了数据，导致A事务两次读取结果不一致</li><li>幻读/虚读：B事务在A事务批量修改数据时，插入了一条新的数据，导致数据库中仍有一条数据未被修改。</li></ul></li><li>写问题<ul><li>丢失更新：</li></ul></li></ul><h2 id="解决读问题">解决读问题<a title="#解决读问题" href="#解决读问题"></a></h2><ul><li>设置事务的隔离级别<ul><li><code>Read uncommitted</code>：未提交读，任何读问题都解决不了</li><li><code>Read committed</code>：已提交读，解决脏读，但是不可重复读和幻读有可能发生</li><li><code>Repeatable read</code>：重复读，解决脏读和不可重复读，但是幻读有可能发生</li><li><code>Serializable</code>：解决所有读问题，因为禁止并行执行</li></ul></li></ul><h2 id="spring事务管理api">Spring事务管理API<a title="#spring事务管理api" href="#spring事务管理api"></a></h2><ul><li><p><code>PlatformTransactionManager</code>：平台事务管理器</p><ul><li><code>DataSourceTransactionManager</code>：底层使用JDBC管理事务</li></ul></li><li><p><code>TransactionDefinition</code>：事务定义信息</p><p>用于定义事务相关的信息，隔离级别，超时信息，传播行为，是否只读……</p></li><li><p><code>TransactionStatus</code>：事务的状态</p><p>用于记录在事务管理过程中，事务的状态</p></li></ul><p>API的关系：</p><p>Spring在进行事务管理的时候，首先<strong>平台事务管理器</strong>根据<strong>事务定义信息</strong>进行事务的管理，在事务管理过程中，产生各种状态，将这些状态信息记录到<strong>事务状态对象</strong></p><h2 id="spring事务的传播行为">Spring事务的传播行为<a title="#spring事务的传播行为" href="#spring事务的传播行为"></a></h2><p>首先假设一个背景，Service1里的x()方法已经定义了一个事务，Service2里的y()方法也有一个事务，但现在新增一行代码在Service2的y()方法中要先调用Service1里的x()方法然后再执行本身的方法。这时就涉及到<strong>事务的传播行为</strong>。</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321110709.png" alt="img" class="φbs"></p><p>Spring中提供了7种传播行为</p><p><strong>假设x()方法称为A，y()方法称为B</strong></p><ul><li>保证多个操作在同一个事务中<ul><li><strong><code>PROPAGATION_REQUIRED</code></strong>(*)：Spring事务隔离级别的默认值。如果A中有事务，则使用A中的事务。如果没有，则创建一个新的事务，将操作包含进来。</li><li><code>PROPAGATION_SUPPORTS</code>：支持事务。如果A中有事务，使用A中的事务。如果A没有事务，则不使用事务。</li><li><code>PROPAGATION_MANDATORY</code>：如果A中有事务，使用A中的事务。如果没有事务，则抛出异常。</li></ul></li><li>保证多个事务不在同一个事务中<ul><li><strong><code>PROPAGATION_REQUIRES_NEW</code></strong>(*)：如果A中有事务，将A的事务挂起，创建新事务，只包含自身操作。如果A中没有事务，创建一个新事物，包含自身操作。</li><li><code>PROPAGATION_NOT_SUPPORTED</code>：如果A中有事务，将A的事务挂起，不使用事务。</li><li><code>PROPAGATION_NEVER</code>：如果A中有事务，则抛出异常。</li></ul></li><li>嵌套式事务<ul><li><strong><code>PROPAGATION_NESTED</code></strong>(*)：嵌套事务，如果A中有事务，则按照A的事务执行，执行完成后，设置一个保存点，再执行B中的操作，如果无异常，则执行通过，如果有异常，则可以选择回滚到初始位置或者保存点。</li></ul></li></ul><h2 id="spring事务管理案例——转账情景">Spring事务管理案例——转账情景<a title="#spring事务管理案例——转账情景" href="#spring事务管理案例——转账情景"></a></h2><h3 id="转账情景实现">转账情景实现<a title="#转账情景实现" href="#转账情景实现"></a></h3><p>首先创建接口<code>AccountDao</code>，定义两个方法分别是<code>out</code>和<code>in</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountDao</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转出</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from  转出账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转出金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">out</span><span class="params">(String from, <span class="keyword">double</span> money)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转入</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to    转入账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 转入金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">in</span><span class="params">(String to, <span class="keyword">double</span> money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着创建实现类<code>AccountDaoImpl</code>实现<code>out</code>和<code>in</code>方法并且继承<code>JdbcSupport</code>类。这样就可以直接使用父类的<code>JDBCTemplate</code>对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountDao实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountDaoImpl</span> <span class="keyword">extends</span> <span class="title">JdbcDaoSupport</span> <span class="keyword">implements</span> <span class="title">AccountDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">out</span><span class="params">(String from, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">&quot;UPDATE account SET money = money - ? WHERE name = ?&quot;</span>, money, from);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">(String to, <span class="keyword">double</span> money)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.getJdbcTemplate().update(<span class="string">&quot;UPDATE account SET money = money + ? WHERE name = ?&quot;</span>, money, to);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建接口<code>AccountrService</code>，定义<code>transfer</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountService</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> from 转出账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to 转入账户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 交易金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Double money)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再创建类<code>AccountServiceImpl</code>实现该接口，并声明<code>AccountDao</code>引用并创建<code>set</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountService实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Double money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(from, money);</span><br><span class="line">        accountDao.in(to, money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后创建配置文件<code>spring-tx-programmatic.xml</code>，用来管理Bean。</p><p>引入数据库连接文件，配置数据源，创建Bean对象<code>accountDao</code>将数据源<code>dataSource</code>注入到<code>accountDao</code>中，再创建Bean对象<code>accountService</code>，将<code>accountDao</code>注入。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;                                             </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 编程式事务管理配置文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.programmatic.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.programmatic.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>到此一个转账模拟业务就实现了，数据库表依然使用前面创建的<code>account</code>表，先查询当前数据库的数据。</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321124514.png" alt="img" class="φbs"></p><p>编写测试方法，实现让姓名为Bob的账户向Jack转账1000元。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编程式事务测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value = &quot;classpath:spring-tx-programmatic.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="number">1000d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321124630.png" alt="img" class="φbs"></p><p>现在对类<code>AccountServiceImpl</code>里的<code>transfer</code>方法进行修改，让其发生异常，再观察结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountService实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Double money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(from, money);</span><br><span class="line">        <span class="comment">// 抛出异常</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(to, money);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查询数据库数据</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321125027.png" alt="img" class="φbs"></p><p>这时Bob账户的钱就少了1000元，而Jack账户也没有增加1000元。</p><p>所以就需要事务来进行管理。</p><h3 id="编程式事务">编程式事务<a title="#编程式事务" href="#编程式事务"></a></h3><p>所谓编程式事务，就是要在源码中编写事务相关的代码。实现编程式事务，首先要在<code>AccountServiceImpl</code>中声明<code>TransactionTemplate</code>对象，并创建set方法。然后修改<code>transfer</code>参数列表所有参数都用<code>final</code>(因为使用了匿名内部类)修饰，并修改方法体内容。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountService实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> TransactionTemplate transactionTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTransactionTemplate</span><span class="params">(TransactionTemplate transactionTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transactionTemplate = transactionTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(<span class="keyword">final</span> String from, <span class="keyword">final</span> String to, <span class="keyword">final</span> Double money)</span> </span>&#123;</span><br><span class="line">        transactionTemplate.execute(<span class="keyword">new</span> TransactionCallbackWithoutResult() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doInTransactionWithoutResult</span><span class="params">(TransactionStatus status)</span> </span>&#123;</span><br><span class="line">                accountDao.out(from, money);</span><br><span class="line">                <span class="comment">// 抛出异常</span></span><br><span class="line">                <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">                accountDao.in(to,money);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后修改<code>spring-tx-programmatic.xml</code>文件，创建Bean对象<code>transactionManager</code>和<code>transactionTemplate</code>，并将<code>transactionTemplate</code>注入到<code>accountService</code>中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;                                             </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context   </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd  </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx </span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 编程式事务管理配置文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.programmatic.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionTemplate&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionTemplate&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.programmatic.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置模板 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.transaction.support.TransactionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时异常依然存在，数据库数据仍然是上次执行的结果状态</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321125027.png" alt="img" class="φbs"></p><p>再次运行测试方法，并查询结果，观察是否发生变化</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321130039.png" alt="img" class="φbs"></p><p>现在就实现了编程式事务，当出现异常时，数据库的数据就不会被修改。</p><h3 id="声明式事务">声明式事务<a title="#声明式事务" href="#声明式事务"></a></h3><h4 id="xml配置方式">XML配置方式<a title="#xml配置方式" href="#xml配置方式"></a></h4><p>声明式事务即通过配置文件实现，利用的就是Spring的AOP</p><p>修改类<code>AccountServiceImpl</code>，删除<code>TransactionTemplate</code>对象，并修改<code>transfer</code>方法，保留异常代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountService实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Double money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(from, money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(to,money);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后创建配置文件<code>spring-tx-declarative.xml</code>，配置数据源即Bean对象，然后配置事务管理器。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务管理配置文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.declarative.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.declarative.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接着就配置事务的增强，配置文件中加入以下配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置事务的增强 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置事务的规则 根据实际业务修改--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRED&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AOP的配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;pointcut1&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* learningspring.transaction.declarative.AccountServiceImpl.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;pointcut1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>先查看当前数据库数据</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321130039.png" alt="img" class="φbs"></p><p>编写测试方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 声明式事务配置测试类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(value = &quot;classpath:spring-tx-declarative.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource(name = &quot;accountService&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Bob&quot;</span>,<span class="string">&quot;Jack&quot;</span>,<span class="number">1000d</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行查看结果，是否变化</p><p><img src="https://blogpictrue-1251547651.cos.ap-chengdu.myqcloud.com/blog/20190321132512.png" alt="img" class="φbs"></p><p>至此就实现了声明式事务XML方式的配置。</p><h4 id="注解配置方式">注解配置方式<a title="#注解配置方式" href="#注解配置方式"></a></h4><p>Spring的事务配置仍然支持注解配置</p><p>继续沿用<code>spring-tx-declarative.xml</code>文件，把事务增强和AOP相关的配置注释，并开启注解事务。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx/spring-tx.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 声明式事务管理配置文件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Service --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.declarative.AccountServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Dao --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;learningspring.transaction.declarative.AccountDaoImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入数据库配置文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置C3P0连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置事务的增强 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;tx:advice id=&quot;txAdvice&quot; transaction-manager=&quot;transactionManager&quot;&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:attributes&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置事务的规则 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;/tx:attributes&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/tx:advice&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- AOP的配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;aop:config&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:pointcut id=&quot;pointcut1&quot; expression=&quot;execution(* learningspring.transaction.declarative.AccountServiceImpl.*(..))&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pointcut1&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--&lt;/aop:config&gt;--&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接下来就可以在业务层类上使用事务管理的注解了。修改<code>AccountServiceImpl</code>类，添加<code>@Transactional</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * AccountService实现类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Chen Rui</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title">AccountService</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAccountDao</span><span class="params">(AccountDao accountDao)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.accountDao = accountDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(String from, String to, Double money)</span> </span>&#123;</span><br><span class="line">        accountDao.out(from, money);</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.in(to,money);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再次运行测试方法，数据库也不会发生改变。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;距离上一次更新已经有一个月的时间了，😀其实本改把 Jdbc 的笔记补完，但是这些天事情太多&lt;s&gt;忙着打csgo&lt;/s&gt;导致了博客这段时间没有更新。今天突然在网上找到了一篇关于Spring架构论述很好的文章，正好也是得更新一下。&lt;/p&gt;
&lt;p&gt;原文</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://pinkpeachabc.cn/categories/JavaWeb/"/>
    
    
    <category term="IOC" scheme="https://pinkpeachabc.cn/tags/IOC/"/>
    
    <category term="AOP" scheme="https://pinkpeachabc.cn/tags/AOP/"/>
    
    <category term="Spring" scheme="https://pinkpeachabc.cn/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>EL与JSTL</title>
    <link href="https://pinkpeachabc.cn/EL%E4%B8%8EJSTL.html"/>
    <id>https://pinkpeachabc.cn/EL%E4%B8%8EJSTL.html</id>
    <published>2020-03-08T13:18:24.000Z</published>
    <updated>2020-07-18T13:08:53.737Z</updated>
    
    <content type="html"><![CDATA[<p>经历过了 JSP，发现既能写 Html 又能写 Java 代码确实很方便，但是对于JSP 内部脚本的编写，却是很不友好😭 今天来介绍能够替代 JSP 页面中的脚本——EL 与 JSTL</p><h2 id="el表达式">EL表达式<a title="#el表达式" href="#el表达式"></a></h2><p><strong>作用</strong></p><blockquote><p>EL最主要的作用是获得四大域中的数据</p></blockquote><p><strong>从四大域当中取数据</strong></p><p>pageContext</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;pageScope.key&#125;;</span><br></pre></td></tr></table></figure><p>request</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;requestScope.key&#125;</span><br></pre></td></tr></table></figure><p>session</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;sessionScope.key&#125;</span><br></pre></td></tr></table></figure><p>application</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;applicationScope.key&#125;</span><br></pre></td></tr></table></figure><p><strong>简写</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;EL表达式&#125;</span><br></pre></td></tr></table></figure><blockquote><p>EL 从四个域中获得某个值 ${key}，依次从 pageContext 域，request 域，session 域，application 域中，获取属性在某个域中获取后将不在向后寻找。</p></blockquote><p><strong>EL 内置 11 对象</strong></p><p><em>pageScope</em><br>获取 JSP 中 pageScope 域中的数据</p><p><em>requestScope</em><br>获取 JSP 中 requestScope 域中的数据</p><p><em>sessionScope</em><br>获取 JSP 中 sessionScope 域中的数据</p><p>applicationScope<br>获取 JSP 中 applicationScope 域中的数据</p><p><em>param</em><br><code>request.getParameter()</code></p><p><em>paramValues</em><br><code>rquest.getParameterValues()</code></p><p><em>header</em><br><code>request.getHeader(name)</code></p><p><em>headerValues</em><br><code>request.getHeaderValues()</code></p><p><em>initParam</em><br><code>this.getServletContext().getInitParameter(name)</code></p><p><em>cookie</em><br><code>request.getCookies()---cookie.getName()---cookie.getValue()</code></p><p><em>pageContext</em><br>pageContext 获得其他八大对象，获取当前项目的名称<br><code>$&#123;pageContext.request.contextPath&#125;</code></p><p><strong>EL 执行表达式</strong></p><blockquote><p>内部可以进行运算，只要有结果</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;<span class="number">1</span>+<span class="number">1</span>&#125;</span><br><span class="line">$&#123;empty user&#125;</span><br><span class="line">$&#123;user==<span class="keyword">null</span>?<span class="keyword">true</span>:<span class="keyword">false</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="jstl">JSTL<a title="#jstl" href="#jstl"></a></h2><p><strong>什么是JSTL</strong></p><blockquote><p>JSTL（JSP Standard Tag Library)，JSP 标准标签库。可以嵌入在 jsp 页面中使用标签的形式完成业务逻辑等功能，jstl 出现的目的同el一样也是要代替 jsp 页面中的脚本代码。</p></blockquote><p><strong>导包和引入</strong></p><p>使用 jstl 需要先把 jar 包引入工程当中 (jstl-1.2.jar)，然后引入标签库才能够继续使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> prefix=<span class="string">&quot;c&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><p><strong>if 标签</strong></p><p><code>&lt;c:if test=&quot;$&#123;1==1 &#125;&quot;&gt;</code>满足条件时，中间的内容才会显示出来<code>&lt;/c:if&gt;</code></p><blockquote><p>通过是结合 EL 表达式一起使用，EL 从域中取数据，使用JSTL进行判断或者遍历</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;%request.setAttribute(<span class="string">&quot;money&quot;</span>, <span class="number">3</span>);%&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;money &gt; 50&#125;&quot;&gt;金额大于：50&lt;/c:if&gt;</span><br><span class="line">&lt;c:if test=&quot;$&#123;money &lt; 50&#125;&quot;&gt;金额小于：50&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p>做一个 if 标签的使用，<strong>需求：用户登录成功时， 进入首页中，显示用户名。</strong></p><blockquote><p>1.登录成功时，把用户写到 session 域当中。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//有值</span></span><br><span class="line"><span class="keyword">if</span>(u != <span class="keyword">null</span>)&#123;</span><br><span class="line">    response.getWriter().write(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">    <span class="comment">//把用户存在session当中</span></span><br><span class="line">    HttpSession session = request.getSeesion();</span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>,u);</span><br><span class="line">    <span class="comment">//跳转到登录</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;refresh&quot;</span>,<span class="string">&quot;3;url=/项目地址/index.jsp&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.在首页当中进行判断，从 session 域当中取数据。</p><p>3.通过EL结合JSTL进行判断</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;empty user&#125;&quot;</span>&gt;</span><br><span class="line">&lt;a href=&quot;Login.jsp&quot;&gt;登录&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;regist.jsp&quot;&gt;免费注册&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">    </span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;！empty user&#125;&quot;</span>&gt;</span><br><span class="line">欢迎：$&#123;user.username&#125;</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;退出&lt;/a&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br></pre></td></tr></table></figure><p><strong>foreach 标签</strong></p><blockquote><p>普通循环</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 从域当中取数据 自动把数据存储 pageScope --&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;5&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;i&quot;</span>&gt;</span><br><span class="line">$&#123;i&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><blockquote><p>增加 for 循环</p></blockquote><p>遍历字符串集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    list&lt;String&gt; strList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">strList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">strList.add(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"> %&gt;</span><br><span class="line">   &lt;!--会自动把取出来的值放入到pageScope域当中--&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;strList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;str&quot;</span>&gt;</span><br><span class="line">    $&#123;str&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>遍历对象集合</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">    list&lt;User&gt; userList = <span class="keyword">new</span> ArrayList&lt;User&gt;();</span><br><span class="line">User u1 = <span class="keyword">new</span> User();</span><br><span class="line">u1.setUsername(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">User u2 = <span class="keyword">new</span> User();</span><br><span class="line">u2.setUsername(<span class="string">&quot;王五&quot;</span>);</span><br><span class="line">userList.add(u1);</span><br><span class="line">userList.add(u2);</span><br><span class="line">session.setAttribute(<span class="string">&quot;userList&quot;</span>,userList);</span><br><span class="line"> %&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;userList&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span>&gt;</span><br><span class="line">  $&#123;user.username&#125;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure><p>遍历 map</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">Map&lt;String,String&gt; strMap = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">strMap.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;李四&quot;</span>);</span><br><span class="line">strMap.put(<span class="string">&quot;age&quot;</span>,<span class="string">&quot;28&quot;</span>);</span><br><span class="line">strMap.put(<span class="string">&quot;addr&quot;</span>,<span class="string">&quot;天津&quot;</span>);</span><br><span class="line">session.setAttribute(<span class="string">&quot;me&quot;</span>,strMap);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;:forEach items=<span class="string">&quot;$&#123;me&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;entry&quot;</span>&gt;</span><br><span class="line">$&#123;entry.key&#125;:$&#123;entry.value&#125;</span><br><span class="line">&lt;/:forEach&gt;</span><br></pre></td></tr></table></figure><hr><p>像是 jstl 的标签库还有很多，这里只介绍了两个标签。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;经历过了 JSP，发现既能写 Html 又能写 Java 代码确实很方便，但是对于JSP 内部脚本的编写，却是很不友好😭 今天来介绍能够替代 JSP 页面中的脚本——EL 与 JSTL&lt;/p&gt;
&lt;h2 id=&quot;el表达式&quot;&gt;EL表达式&lt;a title=&quot;#el表达式&quot; h</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://pinkpeachabc.cn/categories/JavaWeb/"/>
    
    
    <category term="EL" scheme="https://pinkpeachabc.cn/tags/EL/"/>
    
    <category term="JSTL" scheme="https://pinkpeachabc.cn/tags/JSTL/"/>
    
  </entry>
  
  <entry>
    <title>JSP的基本语法</title>
    <link href="https://pinkpeachabc.cn/JSP%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html"/>
    <id>https://pinkpeachabc.cn/JSP%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95.html</id>
    <published>2020-03-04T06:42:17.000Z</published>
    <updated>2020-08-16T13:30:21.449Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jsp-简介">JSP 简介<a title="#jsp-简介" href="#jsp-简介"></a></h2><blockquote><p>前两章写的响应和 session，这次我来说一下 jsp 😀</p></blockquote><p><strong>什么是 JSP</strong></p><p>JSP 全名为 Java Server Pages，中文名叫 java 服务器页面。在传统的网页HTML文件(<em>.htm,</em>.html)中插入 Java 程序段和 JSP 标记，缀名为(*.jsp)。</p><p><strong>为什么要有 JSP</strong></p><p>直接使用 Html 文件是没有办法输出 Java 当中的信息，使用 servlet 来去输出一个网页非常的麻烦。于是就出现了jsp，又能写 html，又能写 Java 代码</p><p><strong>JSP 的组成部分</strong></p><p>静态数据，如 HTML</p><p>JSP 脚本元素和变量</p><p>JSP 指令，如 include 指令</p><p>JSP 标签动作</p><p>用户自定义标签</p><h2 id="jsp脚本元素和变量">JSP脚本元素和变量<a title="#jsp脚本元素和变量" href="#jsp脚本元素和变量"></a></h2><p><strong>在 JSP 当中写 Java 代码</strong></p><p><code>&lt;%java代码%&gt;</code>内部的 java 代码翻译到 service 方法的内部<br><code>&lt;%=java变量或表达式&gt;</code>会被翻译成 service 方法内部 <code>out.print()</code><br><code>&lt;%!java代码%&gt;</code>会被翻译成 servlet 的成员的内容<br><strong>JSP 注释</strong></p><p>HTML 注释：<code>&lt;!--注释内容--&gt;</code><br>可见范围 jsp 源码、翻译后的 servlet、页面<br><strong>Java 注释</strong></p><p><code>//单行注释  /*多行注释*/</code><br>可见范围 jsp 源码 翻译后的 servlet,页面中看不到<br><strong>Jsp 注释</strong></p><p><code>&lt;%--注释内容--%&gt;</code><br>可见范围 jsp 源码可见</p><h2 id="jsp-指令">JSP 指令<a title="#jsp-指令" href="#jsp-指令"></a></h2><p><strong>什么是指令</strong></p><blockquote><p>JSP 指令用于设置整个 JSP 页面的相关信息，以及用于 JSP 页面与其它容器之间的通信。</p></blockquote><p><strong>有哪些指令</strong></p><blockquote><p>page 指令include 指令taglib 指令</p></blockquote><p><strong>page 指令</strong></p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> <span class="string">&quot;指令&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>用于设定整个 JSP 页面的属性和相关功能，多个属性之间使用空格隔开。page 指令共有 11 个属性分别是：</p><p>​<em>contentType</em><br>​contentType 属性指定 JSP 页面的 MIME 和编码格式</p><p>​<em>buffer</em><br>​用来设置输出流缓冲区,缓冲区的作用就是为了提高 IO 性能,也就是说减少 write 的次数</p><p>​<em>language 属性</em><br>​指定页面中使用的脚本语言种类,目前只支持 java</p><p>​isErrorPage<br>​允许指定的 JSP 页面为错误处理页面</p><p>​<em>autoFlush</em><br>​用来指定当输出流缓冲区满了的时候，是否自动刷新缓冲区</p><p>​<em>errorPage</em><br>​如果当前页面发生异常,网页会重定向到 errorPage 所指定的页面进行处理</p><p>​<em>extends</em><br>​用于指定该 JSP 生成的 servlet 继承自哪个父类,必须指定包名加类名</p><p>​<em>session</em><br>​指定当前页面是否能获得当前用户的 session 对象,缺省是 true<br>​如果指定为 false,那么在该页面中无法使用 session，使用的话会提示500错误</p><p>​<em>import</em><br>​在 JSP 中引入 Java 的包和类，多个包之间以逗号隔开</p><p>​<em>info</em><br>​用来设置该 jsp 文件的介绍信息</p><p>​<em>pageEncoding</em><br>​pageEncoding 属性用来指定 JSP 文件的编码格式</p><p>​<em>isELIgnored</em><br>​用来标示是否支持 EL 表达式</p><p>​<em>isThreadSafe</em><br>​缺省值为 true<br>​指定该 JSP 文件是否支持多线程访问</p><p><strong>include指令</strong></p><p>表示在JSP编译时插入一个包含文件或者代码的文件，include 指令所包含的文件名不能是一个变量 url,只能是静态的文件名。</p><blockquote><p>静态包含</p></blockquote><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;header.jsp&quot;</span>%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">&quot;footer.jsp&quot;</span>%&gt;</span><br></pre></td></tr></table></figure><p>将两个 jsp 页面接着到一起， 然后再翻译成 servlet</p><p><strong>taglib指令</strong></p><p>声明 JSP 文件使用了标签库</p><blockquote><p>有哪些标签库</p></blockquote><p>JSP 标准标签库，第三方标签库，自定义标签库</p><h2 id="jsp-标签动作">JSP 标签动作<a title="#jsp-标签动作" href="#jsp-标签动作"></a></h2><p><strong>页面包含</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:include page=&quot;被包含的页面&quot;&gt;&lt;/jsp:include&gt;</span><br></pre></td></tr></table></figure><blockquote><p>动态包含</p></blockquote><p>各自翻译自己的页面，然后再引入</p><p><strong>请求转发</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=&quot;要转发的资源&quot;&gt;&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure><h2 id="jsp-隐式对象">JSP 隐式对象<a title="#jsp-隐式对象" href="#jsp-隐式对象"></a></h2><p><em>out</em></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//out的类型：JspWriter</span></span><br><span class="line"><span class="comment">//out作用就是想客户端输出内容 out.write()</span></span><br><span class="line"><span class="comment">//out缓冲区默认8kb</span></span><br><span class="line"><span class="comment">//可以设置成0 代表关闭out缓冲区内容直接写到respons缓冲区</span></span><br><span class="line"><span class="comment">//out写的内容写到out缓冲区当中</span></span><br><span class="line"><span class="comment">//最后再把out缓冲区当中的内容合并到response缓冲区当中</span></span><br></pre></td></tr></table></figure><p><em>request</em><br>得到用户请求信息对象</p><p><em>response</em><br>服务器向客户端的响应对象</p><p><em>config</em><br>服务器配置，可以取得初始化参数</p><p><em>session</em><br>用来保存用户会话的信息</p><p><em>application</em><br>所有用户的共享信息，就是 servletContext</p><p><em>page</em><br>指当前页面转换后的 Servlet 类的实例</p><p><em>pageContext</em><br>jsp 页面的上下文对象</p><blockquote><p>是一个域对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setAttribute(String name,Object obj)</span><br><span class="line">getAttribute(String name)</span><br><span class="line">removeAttrbute(String name)</span><br></pre></td></tr></table></figure><blockquote><p>可以向指定的其他域中存取数据</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">setAttribute(String name,Object obj,<span class="keyword">int</span> scope)</span><br><span class="line">setAttribute(“name”,<span class="string">&quot;lk&quot;</span>,PageContext.REQUEST_SCOPE);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getAttribute(String name,<span class="keyword">int</span> scope)</span><br><span class="line">getAttribute(<span class="string">&quot;lk&quot;</span>,PageContext.REQUEST_SCOPE)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeAttrbute(String name,<span class="keyword">int</span> scope)</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">findAttribute(String name)</span><br><span class="line"><span class="comment">//自动到所有的域当中找数据</span></span><br><span class="line"><span class="comment">//从小到大的范围搜索数据</span></span><br><span class="line"><span class="comment">//依次从 pageContext 域，request 域，session 域，application 域中获取属性</span></span><br><span class="line"><span class="comment">//在某个域中获取后将不在向后寻找</span></span><br></pre></td></tr></table></figure><blockquote><p>可以获得其他 8 大隐式对象</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pageContext.getRequest()</span><br><span class="line">pageContext.getSession()</span><br></pre></td></tr></table></figure><p><em>exception</em><br>表示 JSP 页面所发生的异常，在错误页中才起作用<br>只有是错误页面的时候，才会有该对象</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;jsp-简介&quot;&gt;JSP 简介&lt;a title=&quot;#jsp-简介&quot; href=&quot;#jsp-简介&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;前两章写的响应和 session，这次我来说一下 jsp 😀&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://pinkpeachabc.cn/categories/JavaWeb/"/>
    
    
    <category term="JSP" scheme="https://pinkpeachabc.cn/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>cookie与Session</title>
    <link href="https://pinkpeachabc.cn/JavaWeb-%E4%BC%9A%E8%AF%9D.html"/>
    <id>https://pinkpeachabc.cn/JavaWeb-%E4%BC%9A%E8%AF%9D.html</id>
    <published>2020-02-27T12:33:57.000Z</published>
    <updated>2020-08-16T13:30:25.537Z</updated>
    
    <content type="html"><![CDATA[<h2 id="会话概述">会话概述<a title="#会话概述" href="#会话概述"></a></h2><blockquote><p>什么是会话:从打开浏览器,到访问网页,到最终关闭浏览器,整个过程就是一次会话。</p></blockquote><p><strong>会话的特点</strong></p><p>包含多个请求,一次完整的会话针对一个用户。</p><p><strong>会话管理技术</strong></p><ul><li>第一种: cookie 技术,客户端技术</li><li>第二种: session 技术,服务端技术</li></ul><p><strong>购物车案列</strong></p><blockquote><p>买完商品后,加入购入车,买的商品存到什么对象比较合适?</p></blockquote><ul><li><p>使用 request 域对象保存商品信息<br>结论:使用 request 保存商品信息不可以,因为每次发送请求,都会产生一个新的请求对象</p></li><li><p>使用 ServletContext 域对象保存商品信息<br>结论:使用 ServletContext对象保存商品信息,可以,但是不合理</p></li></ul><p>所以在开发中,保存会话过程中产生的数据,采用会话管理技术,也就是使用 cookie 和  session 技术来保存会话过程产生的数据。</p><h2 id="cookie">Cookie<a title="#cookie" href="#cookie"></a></h2><blockquote><p>服务器怎样把 cookie 发给客户端</p></blockquote><p><strong>创建 Cookie</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(String cookieName,String cookieValue);</span><br></pre></td></tr></table></figure><p><strong>向客户端发送 cookie</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.addCookie(cookie);</span><br></pre></td></tr></table></figure><p><strong>访问</strong></p><blockquote><p>第一次访问时,请求头当中没有 cookie</p><p>第一次访问时, 响应当中会看到 set-cookie</p><p>再一次访问时,请求头当中就能够看到 cookie 信息</p></blockquote><p>访问服务器的任何资源，一般情况下都会把 cookie 带去过。</p><p><strong>Cookie 默认存储时间</strong></p><blockquote><p>默认 cookie 的是会话级别</p></blockquote><p>打开浏览器，关闭浏览器为一次会话，如果不设置持久化时间，cookie 会存储在浏览器的内存中，浏览器关闭 cookie 信息销毁。</p><p><strong>设置 Cookie 在客户端的存储时间</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="keyword">int</span> seconds);</span><br></pre></td></tr></table></figure><p>设置的时间为秒，如果设置持久化时间，cookie 信息会被持久化到浏览器的磁盘文件里，过期会自动删除。</p><p><strong>Cookie 的携带路径</strong></p><blockquote><p>访问某一个资源时，要不要带 cookie 信息。如果每一外资源都携带，会影响传输速度 。如果不设置携带路径，默认情况下会在访问创建 cookie 的 web 资源相同的路径都携带 cookie 信息。</p></blockquote><p>在 myxq/CookieServlet 下创建的 cookie</p><p>在 myxq/下的index.jsp 访问时会携带 cookie</p><p>不是在 myxq 下，不会携带 cookie</p><p><strong>设置 Cookie 携带路径</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setPath(String path);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie.setPath(<span class="string">&quot;/CookiePro/cookieServlet&quot;</span>);</span><br><span class="line"><span class="comment">//只有访问 cookieServlet 才携带 cookie 信息</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie.setPath(<span class="string">&quot;/CookiePro&quot;</span>);</span><br><span class="line"><span class="comment">//访问指定的工程时，都会携带 cookie 信息</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cookie.setPath(<span class="string">&quot;/&quot;</span>);</span><br><span class="line"><span class="comment">//访问服务器下部署的所有工程时都会携带 cookie 信息</span></span><br></pre></td></tr></table></figure><p><strong>删除 Cookie</strong></p><blockquote><p>使用同名同路径的持久化时间为0的cookie进行覆盖即可</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cookie.setMaxAge(<span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><strong>服务器如何获取客户端携带的 Cookie</strong></p><blockquote><p>通过 Request 对象的 getCookies() 方法,获取的是所有的 cookie,要进行遍历，找出自己名称的那一个。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.获取所有的cookie的对象</span></span><br><span class="line">Cookie[] cookies = request.getCookies();</span><br><span class="line"><span class="comment">//2.获取的结果不为空</span></span><br><span class="line"><span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//3.遍历所有的cookie</span></span><br><span class="line">    <span class="keyword">for</span>(Cookie cookie:cookies)</span><br><span class="line">        <span class="comment">//遍历出每一小时，取出对应的名称</span></span><br><span class="line">        String name = cookie.getName();</span><br><span class="line">    <span class="comment">//判断名称是否为自己储存的哪一个</span></span><br><span class="line">    <span class="keyword">if</span>(name.equals(<span class="string">&quot;pinkpeach&quot;</span>))&#123;</span><br><span class="line">            System.out.println(cookie.getValue());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="session对象">Session对象<a title="#session对象" href="#session对象"></a></h2><p><strong>什么是 session</strong></p><p>session 是一种会话管理技术, session 用来保存会话过程中的数据,保存的数据存储到服务器端。</p><p>session 原理:基于 cookie 实现的,更确切的说是基于会话级别的 cookie 实现的。</p><p><strong>HttpSession API</strong></p><blockquote><p>session 常用方法</p></blockquote><p>得到 session 的id( JESSIONID对应的值): <code>getId();</code></p><p>设置 session 的生命时长: <code>setMaxInactiveInterval(int interval);</code></p><p>销毁 session: <code>invalidate();</code></p><p>得到 sessIon: <code>HttpSession session = request.getsession();</code></p><p><strong>session 域对象</strong></p><blockquote><p>作用范围一次完整的会话(包含多个请求)</p></blockquote><p>存值: <code>setAttribute(String key, Object obj);</code></p><p>取值: <code>Object obj= getAttribute(String key);</code></p><p>移除: <code>removeAttribute(String key);</code></p><p>总结域对象: request 域对象  session 域对象 servletContext 域对象,作用范围以次变大</p><p><strong>Session超时管理</strong></p><blockquote><p>session对象是由生命时长,它的默认存活时间是30分钟。</p></blockquote><p>具体配置找 tomcat 软件的 conf 下的web.xml文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>立即销毁 session 对象: <code>invalidate();</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;会话概述&quot;&gt;会话概述&lt;a title=&quot;#会话概述&quot; href=&quot;#会话概述&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;什么是会话:从打开浏览器,到访问网页,到最终关闭浏览器,整个过程就是一次会话。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;stro</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://pinkpeachabc.cn/categories/JavaWeb/"/>
    
    
    <category term="session" scheme="https://pinkpeachabc.cn/tags/session/"/>
    
    <category term="cookie" scheme="https://pinkpeachabc.cn/tags/cookie/"/>
    
    <category term="会话" scheme="https://pinkpeachabc.cn/tags/%E4%BC%9A%E8%AF%9D/"/>
    
  </entry>
  
  <entry>
    <title>JavaWeb请求和响应</title>
    <link href="https://pinkpeachabc.cn/%E5%93%8D%E5%BA%94%E5%A4%B4.html"/>
    <id>https://pinkpeachabc.cn/%E5%93%8D%E5%BA%94%E5%A4%B4.html</id>
    <published>2020-02-25T00:59:04.000Z</published>
    <updated>2020-07-18T13:09:00.225Z</updated>
    
    <content type="html"><![CDATA[<h2 id="request-请求对象、response-响应对象">request 请求对象、response 响应对象<a title="#request-请求对象、response-响应对象" href="#request-请求对象、response-响应对象"></a></h2><p> </p><h4 id="请求和响应的概述">请求和响应的概述<a title="#请求和响应的概述" href="#请求和响应的概述"></a></h4><p>什么请求: 在浏览器地址栏输入地址,点击回车请求服务器,这个过程就是一个请求过程。</p><p>什么响应: 服务器根据浏览器发送的请求,返回数据到浏览器在网页上进行显示,这个过程就称之为响应。<br> </p><h4 id="httpservletresponse-对象">HttpServletResponse 对象<a title="#httpservletresponse-对象" href="#httpservletresponse-对象"></a></h4><p>HttpServletResponse 是一个接口,它的父接囗是 ServletResponse ,在开发中通常使用，响应信息分为三部分:响应行、响应头、响应正文(响应体)</p><p><strong>发送状态码的相关方法：</strong></p><p>设置状态码 setStatus(int sc):参数就是状态码</p><p>常见的状态码:200 响应成功 、302 重定向 、484 请求资源找不到 、500 服务器代码出异常</p><p><strong>错误信息方法：</strong><br>sendError(int sc):参数状态码<br>setStatus(int sc, String sm):第一个参数表示状态码,第二个参数就状态码的描述。</p><p> </p><h2 id="发送响应消息头相关的方法">发送响应消息头相关的方法<a title="#发送响应消息头相关的方法" href="#发送响应消息头相关的方法"></a></h2><blockquote><p>响应消息头的数据格式:key- value的形式,有的是一个key,一个 value,有的是一个key,多个 value。</p></blockquote><ul><li><p>设置响应消息头:</p><p>一个 key ,对应一个  value<br><code>setHeader(String key, String value);</code></p><p>比如:</p><p><code>setHeader(&quot;aa&quot;,&quot;A&quot;);</code><br>如果:</p><p><code>setHeader(&quot;aa&quot;,&quot;AA&quot;);</code></p><p><code>setHeader(&quot;aa&quot;,&quot;BB&quot;);</code></p><p>最终的结果: aa 这个头对应的值就是 BB</p><p>一个key,对应多个 value<br><code>addHeader(String key, String value);</code></p><p>比如:</p><p><code>addHeader(&quot;aa&quot;,&quot;AA&quot;);</code></p><p><code>addHeader(&quot;aa&quot;,&quot;BB&quot;);</code></p><p>最终的结果: aa 这个头对应的值 AA 和 BB</p></li><li><p>设置响应数据的长度:</p><p>setContentLength(int src) 方法</p></li><li><p>设置处理乱码的方法：<br>setCharacterEncoding(String a);参数就是一个码表格式,比如:“utf-8”<br>setContentType(String a);参数代表响应数据的类型和码表格式,比如:“text/htm1; harset=utf-8”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure></li></ul><p> </p><h2 id="发送响应体相关的方法">发送响应体相关的方法<a title="#发送响应体相关的方法" href="#发送响应体相关的方法"></a></h2><p>第一个方法: <code>getOutputStream()</code>,通过 response 向浏览器返回图片、视频等二进制数据的文件,当然也可以向浏览器、返回文本数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ServletOutputStream out = response.getOutputStream();</span><br><span class="line">String value = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">out.write(value.getBytes());</span><br></pre></td></tr></table></figure><p>第二个方法: <code>getWriter()</code>,通常 response 向浏览器返回文本数据,不能向浏览器返回图片、视频等二进制文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///字符流向浏览器输出数据</span></span><br><span class="line">PrintWriter out = response.getWriter();</span><br><span class="line">out.print(<span class="string">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure><p> </p><h2 id="解决中文输出的乱码问题">解决中文输出的乱码问题<a title="#解决中文输出的乱码问题" href="#解决中文输出的乱码问题"></a></h2><p>第一种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html; charset=utf-8);</span></span><br></pre></td></tr></table></figure><p>第二种方式:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br></pre></td></tr></table></figure><p> </p><h2 id="实现网页的定时跳转并刷新">实现网页的定时跳转并刷新<a title="#实现网页的定时跳转并刷新" href="#实现网页的定时跳转并刷新"></a></h2><p>定时跳转:从一个注册页面跳转到登录页面,输入之前注册的用户名和密码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定时跳转:需要用到 Refresh响应头</span></span><br><span class="line">sponse.setHeader(<span class="string">&quot;Refresh&quot;</span>,<span class="string">&quot;5;URL=/chapter04/login.html&quot;</span>);</span><br></pre></td></tr></table></figure><p>定时刷新:在当前页面的地址不发生变化,但是当前页面自己定时刷新,页面数据会发生变化。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Refresh&quot;</span>,<span class="string">&quot;5&quot;</span>);</span><br><span class="line">response.getwriter().print (<span class="keyword">new</span> Date());</span><br></pre></td></tr></table></figure><p> </p><h2 id="实现重定向">实现重定向<a title="#实现重定向" href="#实现重定向"></a></h2><p> </p><h4 id="实现重定向的相关方法：">实现重定向的相关方法：<a title="#实现重定向的相关方法：" href="#实现重定向的相关方法："></a></h4><p>第一种方式：302 和 Location 配合使用，实现重定向。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.setStatus(<span class="number">302</span>);</span><br><span class="line">response.setHeader(<span class="string">&quot;Location&quot;</span>,<span class="string">&quot;项目地址/index.html&quot;</span>);</span><br></pre></td></tr></table></figure><p>第二种方式：sendRedirect(“项目地址/index.html”);</p><p>重定向通过登录案例来完成：</p><p>需求分析:</p><p>在登录页面输入用户名和密码,在 LoginServlet 里面,判断用户名和密码是否正确。如果输入错误,会重新定向到登录界面,如果正确,跳转到欢迎页面。获取登录页面提交的用户名和密码: <code>request. getParameter()</code> 方法。</p><p>重定向的特点:</p><ul><li>浏览器地址栏发生变化</li><li>发送了两次请求。都是由浏览器发送的请求</li></ul><p>重定向的路径:</p><ul><li>由于是浏览器发送得到请求,所以路径必须要带项目名称。</li></ul><p> </p><h2 id="httpservletrequest请求对象">HttpServletRequest请求对象<a title="#httpservletrequest请求对象" href="#httpservletrequest请求对象"></a></h2><p>HttpServletRequest 它是一个按口,它的父接囗 ServletRequest,在开发中,常用的是带协议的请求对象。请求消息:请求行,请求头,请求参数<br> </p><h4 id="获取请求行消息的相关方法:">获取请求行消息的相关方法:<a title="#获取请求行消息的相关方法:" href="#获取请求行消息的相关方法:"></a></h4><p>获取请求提交的方式: <code>getMethod();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String method = request.getMethod();</span><br><span class="line">System.out.println(<span class="string">&quot;请求方式：&quot;</span>+ method);</span><br></pre></td></tr></table></figure><p>获取请求的协议: <code>getProtocol();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String protocol = request.getProtocol();</span><br><span class="line">System.out.println(<span class="string">&quot;请求的协议&quot;</span>+ protocol);</span><br></pre></td></tr></table></figure><p>获取项目名称: <code>getContextPath();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String contextPath = request.getContextPath();</span><br><span class="line">System.out.println(<span class="string">&quot;项目路径：&quot;</span>+contextPath);</span><br></pre></td></tr></table></figure><p>获取 servlet 路径: <code>getServletPath();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String servletPath = request.getServletPath();</span><br><span class="line">System.out.println(<span class="string">&quot;servlet路径&quot;</span>+servletPath);</span><br></pre></td></tr></table></figure><p>获取请求路径: <code>getRequsetURI();  getRequestURL();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String uri = request.getRequestURI();</span><br><span class="line">StringBuffer url = request.getRequestURL();</span><br><span class="line">System.out.println(<span class="string">&quot;uri对应的值：&quot;</span> + uri + <span class="string">&quot;url对应的值&quot;</span> + url);</span><br></pre></td></tr></table></figure><p>url 对应的值:/项目名称/servlet路径<br>url 对应的值:<a href="http://localhost:8080/url">http://localhost:8080/url</a><br> </p><h4 id="获取请求消息头相关的方法">获取请求消息头相关的方法<a title="#获取请求消息头相关的方法" href="#获取请求消息头相关的方法"></a></h4><p>根据消息头,获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String value = request.getHeader(消息头的名称);</span><br></pre></td></tr></table></figure><p>获取所有的消息头</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br></pre></td></tr></table></figure><p> </p><h4 id="获取请求参数相关的方法">获取请求参数相关的方法<a title="#获取请求参数相关的方法" href="#获取请求参数相关的方法"></a></h4><p>根据 name 属性值,获取用户输入的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String value = getParameter(name属性对应的值);</span><br></pre></td></tr></table></figure><p>根据 name 属性值,获取用户选择的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String[] vaules = getParametervalues(name属性对应的值);</span><br></pre></td></tr></table></figure><p>没有参数,获取所有值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; map = getparameterMap();</span><br></pre></td></tr></table></figure><p> </p><h4 id="解决请求参数的中文乱码问题:">解决请求参数的中文乱码问题:<a title="#解决请求参数的中文乱码问题:" href="#解决请求参数的中文乱码问题:"></a></h4><p>中文乱码处理分两种情况</p><p>第一种情况:处理 get 方式提交的中文乱码</p><p>使用的 String 的构造方法解决的中文乱码: new String(字节数组,编码格式);</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String newvalue = <span class="keyword">new</span> String(<span class="function">value <span class="title">getBytes</span><span class="params">(<span class="string">&quot;IS08859-1&quot;</span>)</span>,&quot;utf-8&quot;)</span>;</span><br></pre></td></tr></table></figure><p>第二种情况:处理 post 请求的中文乱码<br>post提交,会把参数首先提交到 request 对象的缓冲 区中,缓冲区默认编码是 ISO8859-1,不支持中文<br>处理方法:把 request 缓冲区的编码给设置成支持中文的码表格式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br></pre></td></tr></table></figure><p> </p><h4 id="通过-requset对象传递数据">通过 Requset对象传递数据<a title="#通过-requset对象传递数据" href="#通过-requset对象传递数据"></a></h4><p>什么域对象:在一定的范围内,可以存值和取值。request 域对象:在一次请求中,可以存值和取值。</p><p>存值: <code>setAttribute(String key, Object obj);</code></p><p>取值: <code>Object obj =  getAttribyte(String key);</code></p><p>移除: <code>removeAttribute(String key);</code><br> </p><h4 id="requestdispatcher-接口">RequestDispatcher 接口<a title="#requestdispatcher-接口" href="#requestdispatcher-接口"></a></h4><p>在开发中访问到一个 web 资源后,需要服务器跳转到另一个资源去处理请求,可以通过 sendRedirect 重定向<br>方法来实现,也可以 RequestDispatcher 转发对象的 forward 方法来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RequestDispatcher forwardobj = request. getRequestDispatcher(<span class="string">&quot;另一个资源的路径&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>常用方法:</strong></p><p>实现请求转发: <code>forwardobj.forward(request,response);</code></p><p>实现请求包含: <code>forwardobj.include(request,response);</code></p><p><strong>请求转发:</strong></p><p>特点:发送了一次请求,响应一次,和 request 域对象配合使用,可以实现值得传递。</p><p>转发路径:转发动作是在服务器内部实现的,所以转发路径不要携带项目名称。</p><p><strong>请求重定向:</strong></p><p>特点:发送了两次请求,响应了两次,不能和 request 域对象配合使用。</p><p>重定向路径:重定向动作在浏览器端执行的,所以路径需要携带项目名称。</p><p><strong>请求包含:</strong></p><p>特点:发送一次请求,请求包含是由服务器完成。</p><p>请求包含路径:在服务器内部完成的,路径不需要携带项目名称。</p><p><img src="https://tva1.sinaimg.cn/large/00831rSTly1gcd5gaqk3nj31400u0ndn.jpg" alt="重定向与转发" class="φbs"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;request-请求对象、response-响应对象&quot;&gt;request 请求对象、response 响应对象&lt;a title=&quot;#request-请求对象、response-响应对象&quot; href=&quot;#request-请求对象、response-响应对象&quot;&gt;&lt;/a&gt;</summary>
      
    
    
    
    <category term="JavaWeb" scheme="https://pinkpeachabc.cn/categories/JavaWeb/"/>
    
    
    <category term="JavaWeb" scheme="https://pinkpeachabc.cn/tags/JavaWeb/"/>
    
    <category term="eclipse" scheme="https://pinkpeachabc.cn/tags/eclipse/"/>
    
  </entry>
  
  <entry>
    <title>Blog定位方向和主题选择</title>
    <link href="https://pinkpeachabc.cn/theme-change.html"/>
    <id>https://pinkpeachabc.cn/theme-change.html</id>
    <published>2020-02-08T07:40:13.000Z</published>
    <updated>2021-04-20T10:59:05.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于blog">关于Blog<a title="#关于blog" href="#关于blog"></a></h2><blockquote><p>本站历史</p></blockquote><p>博客从<ahref="http://localhost:4000/2019/12/29/%E8%A7%86%E5%9B%BE%E7%9A%84%E6%93%8D%E4%BD%9C"><strong>2019.8.11</strong></a>至今已经运行<span id="htmer_time" style="color: #90CAF9; font-weight: bold;"></span>由于磕磕绊绊只能从19年开始计算😁</p><ul><li>2018.8月建立，使用开源博客程序Jekyll，托管于GIthub pages，域名为<code>pinkpeachabc.githu.io</code></li><li>2018.12月，更换为开源博客程序hexo，托管于GIthub pages</li><li>2019.3月，由于访问速度原因，将博客迁移阿里云，域名为<code>pinkpeachabc.cn</code></li><li>2020.2月，主题由<a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank">Archer</a>换为<a href="https://github.com/SumiMakito/hexo-theme-typography" target="_blank">Typography</a></li><li>2020.5月，很可惜<a href="https://github.com/SumiMakito/hexo-theme-typography" target="_blank">Typography</a>对排版的支持很差，不得已抛弃，主题换为<a href="https://github.com/ikeq/hexo-theme-inside" target="_blank">inside</a>.</li></ul><h2 id="起步">起步<a title="#起步" href="#起步"></a></h2><blockquote><p>📝记录从初识到熟悉的过程</p></blockquote><p>第一次搭建blog的准确时间是2018年的8月份，出于分享和写作。我初建是Github pages + Jekyll的组合方式。</p><ul><li>博客版本管理</li><li>静态博客网站</li><li>不需要像WordPress那样繁琐(<s>其实是比较懒</s>)</li><li>可以直接在github网页版上编辑和发布博客</li></ul><p>总之是把博客搭建好了，可之后的过程我变没在管过。由于各式各样的原因(<s>就是玩去了</s>)也不写文章，于是我的第一个博客也就经过长时间的吃土💸，直至我最终把它抛弃。</p><h2 id="再次起步">再次起步<a title="#再次起步" href="#再次起步"></a></h2><p><img src="https://tva1.sinaimg.cn/large/0082zybply1gbp30n0h1jj31ey0u0dqs.jpg" alt="博客" class="φbs"></p><p>由于上一次的失败，我便很久没有再次搭建博客的想法了。但是我本人喜欢看科技文章，看的久了也想自己写点把自己知道的分享给其他人。由于刚好那时候在学习前端的东西。于是我想不如在搭建一个吧。那时候想想其实写文章发布到网上的平台很多，没必要单独自己搭建一个。</p><ul><li>博客园</li><li>CSDN</li><li>简书</li><li>知乎</li></ul><p>还有很多很多就不多赘述了，其实真正再次搭建是觉得自己操作可以学习Git和其他方面的只是于是就开始二次起步。</p><p>这一次使用的和第二次不同这次是Github + hexo的组合，搭建起来也是比较轻松。直接放到了github上面取名<code>Pinkpeachabc.github.io</code>并选择了<a href="https://github.com/fi3ework/hexo-theme-archer" target="_blank">Archer</a>作为博客的主题。</p><p>出于Github的服务器在国外，国内的访问速度很缓慢（<s>龟速</s>）。于是我在阿里云购买了服务器，并且购买第一个域名<code>pinkpeachabc.cn</code>我也没辜负之死去的博客，从建站至今我还在更新着博客，虽然目前没什么技术含量。起码不会再让它吃土了😁</p><h2 id="至今">至今<a title="#至今" href="#至今"></a></h2><p>可以看到现在的主题已经更换为 <a href="https://github.com/SumiMakito/hexo-theme-typography" target="_blank">Typography</a>当然了我并不是喜新厌旧🌶，经过这几个月的运营博客来看，我太注重外观反而缺少了对阅读和观感体验（<s>注重图片添加无用插件等等</s>）。同样的我也开始想起建博客的初衷。这个是主题是我无意间看到了给我简洁而不失美观的感觉。想初衷的作者一样——<strong>重新发现 文字之美</strong></p><p>很可惜<a href="https://github.com/SumiMakito/hexo-theme-typography" target="_blank">Typography</a>对于排版不是很友好，并且不支持目录，我目前的能力没有办法完善，只能对它说抱歉了。由于疫情的原因，学校🏫也暂未开学。这期间我对博客以后的方向思考了很多，我将会把学习中的笔记整理发布在博客中(尽最大可能写优质)，我也会删除一些我自认为<s>无用</s>的文章，让整个博客看起来更高效优质——<strong>2020-5-20</strong></p><h2 id="致谢">致谢<a title="#致谢" href="#致谢"></a></h2><p>对于以上的所有作者我由衷的表示感谢，<strong>开源分享、技术无价</strong>。同时本次应用的并不是原版的<a href="https://github.com/SumiMakito/hexo-theme-typography" target="_blank">Typography</a>本是基于<a href="https://imjad.cn/" target="_blank">journey.ad</a>修改过的版本。由于这次的主题<code>layout</code>里面是<code>jade</code>写的所以修改起来可能有点难度，所以我直接<s>抄</s>借鉴了过来。</p><script>function secondToDate(second) {     if (!second) {         return 0;     }     var time = new Array(0, 0, 0, 0, 0);     if (second >= 365 * 24 * 3600) {        time[0] = parseInt(second / (365 * 24 * 3600));        second %= 365 * 24 * 3600;    }    if (second >= 24 * 3600) {        time[1] = parseInt(second / (24 * 3600));        second %= 24 * 3600;    }    if (second >= 3600) {        time[2] = parseInt(second / 3600);        second %= 3600;    }    if (second >= 60) {        time[3] = parseInt(second / 60);        second %= 60;    }    if (second > 0) {        time[4] = second;    }    return time;};function setTime() {         // 博客创建时间秒数，时间格式中，月比较特殊，是从0开始的，所以想要显示5月，得写4才行，如下         var create_time = Math.round(new Date(Date.UTC(2019, 8, 11, 18, 37, 16)).getTime() / 1000);// 当前时间秒数,增加时区的差异         var timestamp = Math.round((new Date().getTime() + 8 * 60 * 60 * 1000) / 1000);         currentTime = secondToDate((timestamp - create_time));         if (currentTime[0]==0){             currentTimeHtml = currentTime[1] + '天'+ currentTime[2] + '时' + currentTime[3] + '分' + currentTime[4] + '秒';         }else{             currentTimeHtml = currentTime[0] + '年' + currentTime[1] + '天' + currentTime[2] + '时' + currentTime[3] + '分' + currentTime[4] + '秒';         }         // 兼容pjax，当htmer_time存在时输出，否则清空计时器         if (document.getElementById("htmer_time")){             document.getElementById("htmer_time").innerHTML = currentTimeHtml;         }else{              clearInterval(timer);         }}var timer = setInterval(setTime, 1000);</script>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;关于blog&quot;&gt;关于Blog&lt;a title=&quot;#关于blog&quot; href=&quot;#关于blog&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;本站历史&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;博客从&lt;ahref=&quot;http://localhost:4000</summary>
      
    
    
    
    <category term="博客" scheme="https://pinkpeachabc.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="小记" scheme="https://pinkpeachabc.cn/tags/%E5%B0%8F%E8%AE%B0/"/>
    
    <category term="hexo" scheme="https://pinkpeachabc.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac终端配置代理</title>
    <link href="https://pinkpeachabc.cn/Mac-terminal.html"/>
    <id>https://pinkpeachabc.cn/Mac-terminal.html</id>
    <published>2020-01-31T11:45:51.000Z</published>
    <updated>2020-06-06T13:01:13.585Z</updated>
    
    <content type="html"><![CDATA[<p>在使用终端时候难免会浏览和下载墙外的资料，这时候就要用到代理。下面我来为大家介绍一下在Mac环境下终端的代理方法。</p><a id="more"></a><h3 id="准备">准备<a title="#准备" href="#准备"></a></h3><p>在操作以下步骤之前，需要配置好 Shadowsocks。</p><h3 id="方法一：">方法一：<a title="#方法一：" href="#方法一："></a></h3><p>在终端中依次执行以下命令的前两个或者直接执行最后一个即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 配置http访问的</span><br><span class="line">export http_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line"># 配置https访问的</span><br><span class="line">export https_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line"># 配置http和https访问</span><br><span class="line">export all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br></pre></td></tr></table></figure><blockquote><p>这里的端口具体要看使用的工具，具体如下。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gbfzmadu91j30gg0nmjzh.jpg" alt="Xnip2020-01-31_19-52-00" class="φbs"></p><p>这里就要输入1086端口。</p><p>这个办法的好处是简单直接，并且影响面很小（只对当前终端有效）。</p><p>输入<code>curl cip.cc</code>来查看终端是否成功代理。</p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwgy1gbfzrlu1ulj30kj0d9grz.jpg" alt="Xnip2020-01-31_19-56-20" class="φbs"></p><h3 id="方法二：">方法二：<a title="#方法二：" href="#方法二："></a></h3><p>把代理服务器地址写入 shell 配置文件 <code>.bash_profile</code> 或者 <code>.zshrc</code>。</p><p>终端执行 <code>vim ~/.bash_profile</code> 或者 <code>vim ~/.zshrc</code> 配置全局环境变量。</p><p>直接在 <code>. bash_profile</code> 或者 <code>.zshrc</code> 添加下面内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 终端设置代理</span><br><span class="line"># -------------------------------</span><br><span class="line"># polipo proxy on&#x2F;off</span><br><span class="line"># ------------------------------</span><br><span class="line">function proxy_on() &#123;</span><br><span class="line">    # 配置http访问的</span><br><span class="line">    export http_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">    # 配置https访问的</span><br><span class="line">    export https_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">    # 配置http和https访问</span><br><span class="line">    export all_proxy&#x3D;socks5:&#x2F;&#x2F;127.0.0.1:1080</span><br><span class="line">    echo &#39;********   开启当前终端代理   ********&#39;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function proxy_off() &#123;</span><br><span class="line">    # 移除代理</span><br><span class="line">    unset http_proxy</span><br><span class="line">    unset https_proxy</span><br><span class="line">    unset all_proxy</span><br><span class="line">    echo &#39;********   关闭当前终端代理   ********&#39;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编辑完之后执行 <code>source ~/.bash_profile</code> 或者 <code>source ~/.zshrc</code> ，编辑的哪个执行哪个就行。</p><p>使用时在终端执行</p><blockquote><p>启动：<code>proxy_on</code><br>关闭：<code>proxy_off</code></p></blockquote><p>这个办法的好处是随时用随时开关，方便快捷，并且影响面也同样很小（在执行的终端设置代理，只对执行的终端有效，不影响其他终端）。</p><h3 id="方法三：（配置全局代理-慎用）">方法三：（配置全局代理 <code>慎用</code>）<a title="#方法三：（配置全局代理-慎用）" href="#方法三：（配置全局代理-慎用）"></a></h3><h6 id="a.-设置代理">a. 设置代理<a title="#a.-设置代理" href="#a.-设置代理"></a></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br><span class="line">git config --global https.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:1080&#39;</span><br></pre></td></tr></table></figure><h6 id="b.-查看信息-git-配置信息">b. 查看信息 git 配置信息<a title="#b.-查看信息-git-配置信息" href="#b.-查看信息-git-配置信息"></a></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global -l </span><br></pre></td></tr></table></figure><h6 id="c.-git-移除全局配置代理">c. git 移除全局配置代理<a title="#c.-git-移除全局配置代理" href="#c.-git-移除全局配置代理"></a></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><blockquote><p>如果 git 配置了全局的代理会影响到 sourcetree 或者其他命令终端的 git 命令，请小心使用！！！</p></blockquote><hr><h3 id="参考文章">参考文章<a title="#参考文章" href="#参考文章"></a></h3><p><a href="http://www.imooc.com/article/285912" target="_blank">Mac终端配置代理</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在使用终端时候难免会浏览和下载墙外的资料，这时候就要用到代理。下面我来为大家介绍一下在Mac环境下终端的代理方法。&lt;/p&gt;</summary>
    
    
    
    <category term="实用知识" scheme="https://pinkpeachabc.cn/categories/%E5%AE%9E%E7%94%A8%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="终端" scheme="https://pinkpeachabc.cn/tags/%E7%BB%88%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>你活成你想要的样子了吗？</title>
    <link href="https://pinkpeachabc.cn/2020.01.17.html"/>
    <id>https://pinkpeachabc.cn/2020.01.17.html</id>
    <published>2020-01-17T02:56:06.000Z</published>
    <updated>2020-05-23T13:40:32.898Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>20年的时光悄然而逝，现在我也清楚了高中时在作文纸上写的光阴似箭，日月如梭。回头想想，我现在的样子是我曾经想要成为的样子吗。</p></blockquote><a id="more"></a><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=550 height=86 src="//music.163.com/outchain/player?type=2&id=227724&auto=1&height=66"></iframe><h2 id="日程">日程<a title="#日程" href="#日程"></a></h2><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gazddi8v60j30t30jqdo4.jpg" alt="Xnip2020-01-17_10-53-10" class="φbs"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">- 放假的第10天</span><br><span class="line">- 小年</span><br><span class="line">- 距离除夕7天</span><br><span class="line"></span><br><span class="line">- 假期倒计时30天</span><br><span class="line">- 认真学习</span><br><span class="line">- 快乐生活</span><br><span class="line">- 完成一个项目</span><br><span class="line">- 勤更新博客</span><br></pre></td></tr></table></figure><h2 id="追赶">追赶<a title="#追赶" href="#追赶"></a></h2><p><strong>没能活成别人期待的模样，</strong></p><p><strong>也没活成自己想要的样子。</strong></p><p>不知觉的自己看看流失的时间回头看看已经二十一二岁。</p><p>慢慢独立，对自己的行为、生活负责。</p><p>回想起高中坐在教室中的自己奋笔疾书的样子，现在也许会一笑而过。</p><p>高考失利对我来说可以说是在情理之中，说实话现在想想那时候还挺难受的。</p><p>我还是来到了现在的学校报到了，我没有选择复读。一是条件麻烦、二是压力太大，又害怕第二年承受不住亲戚朋友的“关怀”，现在想想也许是后者吧。</p><p>第一年的时光，慢慢过去了。我也就这件事慢慢释然了，有时候我觉得这样也好做点自己喜欢的事，认真学习，好好的生活。争取能和以前不同。</p><p>我还是喜欢不同和新鲜，像是很久不见再相逢之后的那种新鲜，但在交流后却还能保持那种熟悉的味道。</p><p>16年高中，我记得当时在一起看过电影《谁的青春不迷茫》，在枯燥的校园也算是一个开心事。</p><p>当时想想现在的导演天天拿这些IP做宣传，拍电影真没新意。我也不是活的好好不如好好的睡一觉想想晚饭吃什么。</p><p>渐渐的我也出现了迷茫期，高三我拿着那时候的成绩单，看看分数在看看自己，也不过轻叹口气罢了。</p><p>我也开始<strong>追赶</strong>的大家的脚步，集腋成裘，积沙成塔。这两个也是当时的语文老师教给我的。</p><p>一粒砂土，或许太渺小，但堆积起来，却是大山的脊梁。</p><p>我虽然没成为脊梁，但起码不会让自己为了后悔而抱怨了。因为我知道我现在是起点，我还有更好的重点等着我。</p><p>高中的我感觉时间过的真的很慢，你打个瞌睡、偷个懒也不会影响当时的自己。现在想想自己也太可笑了，眼看就要大三了，专业课是否学的扎实，是否能胜任一份好的工作。</p><p>在这长河中有几只船只，两只：一只为<strong>名</strong>，一只为<strong>利</strong>。越长大越知道钱的作用。</p><p>我想要快乐。我想要快乐。我想要快乐。细想之下我已经很久没有真诚地快乐过，始终背着不知何处来的重担行走在冷夜里，担子里有焦虑、自我厌弃、负罪感、虚无感……崩溃和哭泣。</p><p>亲戚吃饭，席间话话题落到我身上，嘘寒问暖，我很开心，很也讨厌。我享受亲情的温暖也害怕自己的不足。我笑，心里也觉得好笑。</p><p>我也会和以前做个记号，为以前的生活<code>Delete</code> 有时候有的生活是不需要保存的，因为期待总在明天。</p><h2 id="奔跑🏃">奔跑🏃<a title="#奔跑🏃" href="#奔跑🏃"></a></h2><p>如今，是我缓口气的日子。然而我又喜欢又害怕这种生活，缓的气的多了也会得病。</p><p>环境造就人没错，我相信真正影响自己的还是自己。</p><p>自己不相信自己终究还是不自信。</p><p>改变需要时间也需要勇气，我要改变的不只是外观，还有内在。</p><p>我讨厌追赶的日子，也许你当年并没有掉队。你不过是没有追赶的方向，你嫉妒和你一起的朋友同学考上的更好的学校。</p><p>现在我喜欢上了将自己写在文字里，即使没有文笔，我也特别喜欢这种感觉。</p><p>表述只是一种方式，希望你能找到你的way。</p><p>愿你再次见我的时候不是在追赶，而是在<strong>奔跑</strong>。</p><hr><blockquote><p>最后我将这篇文章由Text2Image转化成的图片，贴附文章底部。</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gazqnua20dj30mk3mzu0y.jpg" alt="Untitled" class="φbs"></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;20年的时光悄然而逝，现在我也清楚了高中时在作文纸上写的光阴似箭，日月如梭。回头想想，我现在的样子是我曾经想要成为的样子吗。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="杂记" scheme="https://pinkpeachabc.cn/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
    <category term="小记" scheme="https://pinkpeachabc.cn/tags/%E5%B0%8F%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>在Mac上为图片添加阴影，让截图更好看</title>
    <link href="https://pinkpeachabc.cn/%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7.html"/>
    <id>https://pinkpeachabc.cn/%E6%88%AA%E5%9B%BE%E5%B7%A5%E5%85%B7.html</id>
    <published>2020-01-15T09:19:59.000Z</published>
    <updated>2020-05-23T13:45:04.014Z</updated>
    
    <content type="html"><![CDATA[<p>对于经常写文章稿件类的工作者来说，排版决定给读者的第一印象。虽然Mac本身就自带为图片加阴影的功能，但却仅仅于此。下面为大家带来一款方便好用的截图工具**——Xnip**</p><blockquote><p>首先让我来介绍Mac截图的使用技巧</p></blockquote><h2 id="mac-截图阴影-&amp;-截图小技巧">Mac 截图阴影 &amp; 截图小技巧<a title="#mac-截图阴影-&amp;-截图小技巧" href="#mac-截图阴影-&amp;-截图小技巧"></a></h2><p>大家都知道，macOS 自带的 <strong>自由截图键</strong> 是 <code>Command + Shift + 4</code>，<strong>全屏截图键</strong> 是 <code>Command + Shift + 3</code>。</p><p><strong>添加截图阴影</strong>：当你希望给某个窗口添加阴影时，只需要再按下空格键。也就是组合键 <code>Command + Shift + 4 + Spacebar</code> 就可以截下这个窗口，保存时会自动添加阴影。</p><p><strong>截图到剪贴板</strong>：在进行上面这些组合键的同时，多按一个 <code>Control</code> 键，截图就不会保存到桌面，而是自动进入剪切板，方便粘贴到其他地方。</p><p><strong>调整截图范围</strong>：先按下 <code>Command + Shift + 4</code> 后，拖动鼠标截图，此时——</p><ul><li><p>按住鼠标，同时按住 Option，可以让截图范围以中心对称。</p></li><li><p>按住鼠标，同时按住 Shift，可以固定截图范围的宽高。</p></li><li><p>按住鼠标，同时按住 Spacebar，可以整块移动截图范围。</p></li><li><p>Option 和 Shift 可以组合使用。</p></li></ul><h2 id="xnip---screenshot-&amp;-annotation">Xnip - Screenshot &amp; Annotation<a title="#xnip---screenshot-&amp;-annotation" href="#xnip---screenshot-&amp;-annotation"></a></h2><blockquote><p>外观美丽的不像实力派，我本是一直使用Mac自带的截图工具。每当想要长截图或者做一些更高级的注释的时候自带的截图工具就不在满足我的要求。于是这款软件片成为了我最爱的截图工具。</p></blockquote><p><strong>滚动截图</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaxevvm54ig31460qh7ws.gif" alt="2020-01-15 18.12.01" class="φbs"></p><p>这个功能是我最喜欢的功能不仅可以完美的把整个网页截图下来，并且可以指定我截取的范围。</p><p><strong>截取多个窗口</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaxf29fg78g31hc0u07wn.gif" alt="2020-01-15 18.19.15" class="φbs"></p><p>这项功能是对我来说是比较有特色的，当运用对比的时候这个功能可以更好的实现。同时添加了Mac自带的截取窗口阴影，这样也有利于排版。</p><p><strong>标注</strong></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaxhnsxurqg31360p0x6t.gif" alt="2020-01-15 19.48.51" class="φbs"></p><p>Xnip 拥有齐全的标注功能，你可以对截取的图片进行标注，在标注的同时还能重新调整截图大小。</p><h2 id="参考文章">参考文章<a title="#参考文章" href="#参考文章"></a></h2><p><a href="https://sspai.com/post/41443" target="_blank">在 Windows 上为图片添加阴影，让截图更好看</a></p><p><a href="https://www.jianshu.com/p/cdd5f11399f9" target="_blank">Xnip - Mac 上方便好用的截图工具，支持滚动截图</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;对于经常写文章稿件类的工作者来说，排版决定给读者的第一印象。虽然Mac本身就自带为图片加阴影的功能，但却仅仅于此。下面为大家带来一款方便好用的截图工具**——Xnip**&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;首先让我来介绍Mac截图的使用技巧&lt;/p&gt;
&lt;/blockqu</summary>
      
    
    
    
    <category term="实用工具" scheme="https://pinkpeachabc.cn/categories/%E5%AE%9E%E7%94%A8%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="工具" scheme="https://pinkpeachabc.cn/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>域名解析配置教程</title>
    <link href="https://pinkpeachabc.cn/yu-ming-jie-xi.html"/>
    <id>https://pinkpeachabc.cn/yu-ming-jie-xi.html</id>
    <published>2020-01-09T05:58:38.000Z</published>
    <updated>2020-05-20T01:13:27.147Z</updated>
    
    <content type="html"><![CDATA[<h2 id="域名">域名<a title="#域名" href="#域名"></a></h2><p>关于域名简单的来说就是网址。我们购买的域名一般都是一级域名，一级域名又叫顶级域名，域名大概分三种分别是。</p><ul><li><p>一级域名：我购买的<a href="pinkpeachabc.cn">pinkpeachabc.cn</a>就是一级域名，一串字符串中间一个点隔开，并且一级域名比二级域名更容易收录。</p></li><li><p>二级域名：二级域名相当于一级域名前面的前缀，只要是xxx.xxxx.xxx此类都属于二级域名，.的前面可以写任意内容只需要在域名解析里面添加就可以了。</p></li><li><p>三级域名：二级域名的子域名，特征是包含三个“.”。<a href="http://xn--xxx-uc0ep96b.xxx.baidu.com">例如xxx.xxx.baidu.com</a> ，xxx上可以填写任意内容，都属于三级域名。</p></li></ul><blockquote><p>由于国内和国外对域名级别的解读不同就不在赘述区别，国内很多资料认为，顶级域和一级域是分开的，也就是说顶级域左侧的域名是一级域。所以 <a href="http://www.baidu.com">www.baidu.com</a> 解读域名级别就是：顶级域 com，一级域 baidu，二级域 www。</p></blockquote><h2 id="域名类型">域名类型<a title="#域名类型" href="#域名类型"></a></h2><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaq91rfoolj31af0sqaj7.jpg" alt="屏幕快照 2020-01-09 13.32.14" class="φbs"></p><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaq9446sytj31bn0sktjd.jpg" alt="屏幕快照 2020-01-09 13.35.47" class="φbs"></p><p>这里我以腾讯云云解析为例，介绍我们解析中最常用的几个。一般的情况下选择快速添加解析，只需要把服务器ip填入就可以直接解析。</p><ul><li><p>www：解析后可用 <a href="http://www.xxxx.xxx">www.xxxx.xxx</a> 访问。</p></li><li><p>@：是指前面不带任何主机名的，以百度为例，就是 <a href="http://baidu.com">baidu.com</a>。</p></li><li><p>*：此为泛解析，在域名前添加任何子域名，均可访问到所指向的WEB地址。</p></li><li><p>A：用于记录用来指定主机名对应的ip地址记录。</p></li><li><p>CNAME：CNAME类型解析设置的方法和A记录类型基本是一样的，其中将记录类型修改为“CNAME”，并且记录值填写服务器主机地址即可。</p></li></ul><hr><p>更全面的用法和类型，可以直接登录你所购买域名地方具体查看，若怕麻烦可以直接选择快速解析直接填入服务器地址即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;域名&quot;&gt;域名&lt;a title=&quot;#域名&quot; href=&quot;#域名&quot;&gt;&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;关于域名简单的来说就是网址。我们购买的域名一般都是一级域名，一级域名又叫顶级域名，域名大概分三种分别是。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一级域名：我购买的&lt;a href=</summary>
      
    
    
    
    <category term="实用知识" scheme="https://pinkpeachabc.cn/categories/%E5%AE%9E%E7%94%A8%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="域名" scheme="https://pinkpeachabc.cn/tags/%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Blog搭建流程</title>
    <link href="https://pinkpeachabc.cn/Blog%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B.html"/>
    <id>https://pinkpeachabc.cn/Blog%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B.html</id>
    <published>2020-01-01T15:11:10.000Z</published>
    <updated>2020-05-23T13:44:22.364Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文转自: <a href="http://www.ivan-zcy.top/" target="_blank">Blog搭建流程(Mac系统完结帖)</a></p><p>原文地址: <a href="http://www.ivan-zcy.top/2018/09/30/Blog">http://www.ivan-zcy.top/2018/09/30/Blog</a></p></blockquote><a id="more"></a><h3 id="step1-安装node.js">Step1 安装Node.js<a title="#step1-安装node.js" href="#step1-安装node.js"></a></h3><p>可通过以下两种方式在 Mac OS 上安装 node.js：</p><p>方式一： 在<a href="https://nodejs.org/en/download/" target="_blank">官方下载网站</a>下载 pkg 安装包，直接点击安装即可</p><p>方式二： 使用 brew 命令来安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><h3 id="step2-安装git">Step2 安装Git<a title="#step2-安装git" href="#step2-安装git"></a></h3><p>首先查看电脑是否安装Git，终端输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git</span><br></pre></td></tr></table></figure><p>安装过则会输出下表，然后跳过该步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">WMBdeMacBook-Pro:~ WENBO$ git</span><br><span class="line">usage: git [--version] [--help] [-C &lt;path&gt;] [-c name&#x3D;value]</span><br><span class="line">           [--exec-path[&#x3D;&lt;path&gt;]] [--html-path] [--man-path] [--info-path]</span><br><span class="line">           [-p | --paginate | --no-pager] [--no-replace-objects] [--bare]</span><br><span class="line">           [--git-dir&#x3D;&lt;path&gt;] [--work-tree&#x3D;&lt;path&gt;] [--namespace&#x3D;&lt;name&gt;]</span><br><span class="line">           &lt;command&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">These are common Git commands used in various situations:</span><br><span class="line"></span><br><span class="line">start a working area (see also: git help tutorial)</span><br><span class="line">   clone      Clone a repository into a new directory</span><br><span class="line">   init       Create an empty Git repository or reinitialize an existing one</span><br><span class="line"></span><br><span class="line">work on the current change (see also: git help everyday)</span><br><span class="line">   add        Add file contents to the index</span><br><span class="line">   mv         Move or rename a file, a directory, or a symlink</span><br><span class="line">   reset      Reset current HEAD to the specified state</span><br><span class="line">   rm         Remove files from the working tree and from the index</span><br><span class="line"></span><br><span class="line">examine the history and state (see also: git help revisions)</span><br><span class="line">   bisect     Use binary search to find the commit that introduced a bug</span><br><span class="line">   grep       Print lines matching a pattern</span><br><span class="line">   log        Show commit logs</span><br><span class="line">   show       Show various types of objects</span><br><span class="line">   status     Show the working tree status</span><br><span class="line"></span><br><span class="line">grow, mark and tweak your common history</span><br><span class="line">   branch     List, create, or delete branches</span><br><span class="line">   checkout   Switch branches or restore working tree files</span><br><span class="line">   commit     Record changes to the repository</span><br><span class="line">   diff       Show changes between commits, commit and working tree, etc</span><br><span class="line">   merge      Join two or more development histories together</span><br><span class="line">   rebase     Reapply commits on top of another base tip</span><br><span class="line">   tag        Create, list, delete or verify a tag object signed with GPG</span><br><span class="line"></span><br><span class="line">collaborate (see also: git help workflows)</span><br><span class="line">   fetch      Download objects and refs from another repository</span><br><span class="line">   pull       Fetch from and integrate with another repository or a local branch</span><br><span class="line">   push       Update remote refs along with associated objects</span><br><span class="line"></span><br><span class="line">&#39;git help -a&#39; and &#39;git help -g&#39; list available subcommands and some</span><br><span class="line">concept guides. See &#39;git help &lt;command&gt;&#39; or &#39;git help &lt;concept&gt;&#39;</span><br><span class="line">to read about a specific subcommand or concept.</span><br></pre></td></tr></table></figure><p>如果没有显示上面内容，我们可以通过homebrew安装GIt，若未安装homebrew 则通过终端执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e <span class="string">&quot;<span class="subst">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>&quot;</span></span><br></pre></td></tr></table></figure><p>随后执行一下命令进行Git的安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install git</span><br></pre></td></tr></table></figure><h3 id="step3-注册github账号并新建仓库">Step3 注册Github账号并新建仓库<a title="#step3-注册github账号并新建仓库" href="#step3-注册github账号并新建仓库"></a></h3><p>网站链接：<a href="https://github.com/" target="_blank">Github</a></p><p>注册完账号后需新建一个仓库。注意！！<a href="http://xn--username-8k1mt54bqqt31ihkbl7eew7ai0bv97k40wh.github.io">新建的仓库名字必须是username.github.io</a>。例如我username是ivan-zcy，<a href="http://xn--ivan-zcy-ik0m08bsy7a1jvrtjq9dzv5abi9mr41a.github.io">那么仓库名字必须是ivan-zcy.github.io</a></p><h3 id="step4-配置ssh-key（可省略-建议配置）">Step4 配置SSH Key（可省略 建议配置）<a title="#step4-配置ssh-key（可省略-建议配置）" href="#step4-配置ssh-key（可省略-建议配置）"></a></h3><p>这一步能省略 但是配置后更新博客就不用每次都输入用户名密码了</p><p>步骤：<br>​ 1 检查主机是否已存在SSH Key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd .ssh</span><br><span class="line">ls -la</span><br></pre></td></tr></table></figure><p>若输出的文件列表中存在id_rsa.pub 或 id_dsa.pub 文件，则直接跳到第三小步</p><p>2 创建SSH Key<br>在终端输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>按下回车 会让输入文件名，直接回车会创建默认文件名的文件 然后会提示输入两次密码(可为空)</p><p>3 添加SSH Key到Github</p><p>（如果之前在Github中添加过SSH 则跳过该步）</p><p>如果你没有指定文件名（也就是使用默认文件名），那么在.ssh文件夹下会有一个id_rsa.pub文件，打开该文件并复制里面的内容</p><p>登录Github，点击右上角头像右边的三角图标，点击Settings –&gt; SSH and GPG keys –&gt; New SSH key。Title 随便填一个，在Key栏中填入复制的内容，点击Add SSH key，就添加成功了</p><p>4 检验SSH Key是否配置成功<br>在终端输入如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果最后出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi username! You&#39;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><p>就说明SSH Key配置成功了</p><h3 id="step5-安装hexo">Step5 安装Hexo<a title="#step5-安装hexo" href="#step5-安装hexo"></a></h3><p>使用npm命令安装Hexo</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo</span><br></pre></td></tr></table></figure><p>接着在任意位置创建一个文件夹，如Blog，cd到该路径下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>该命令会在目标文件夹内建立网站所需的基础文件</p><p>接着安装安装依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>此时本地博客就搭建好了</p><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>此时可在浏览器中输入<a href="https://link.jianshu.com/?t=http://localhost:4000/" target="_blank">http://localhost:4000/</a>进行本地查看（其他人无法访问）</p><p>当然 此时可修改本地博客路径下的_config文件对博客进行全局设置，里边设置项挺多就不一一列举啦！自行百度</p><h3 id="step6-同步到远程github仓库">Step6 同步到远程Github仓库<a title="#step6-同步到远程github仓库" href="#step6-同步到远程github仓库"></a></h3><p>在本地Blog路径下找到_config.yml，把deploy节点修改为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:username&#x2F;username.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>（其中 username为你的Github用户名）</p><p>为了能够使Hexo部署到GitHub上，需安装一个插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>然后输入以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>这时候就可以在浏览器通过输入username.github.io就可以访问你的博客了</p><h3 id="step7-配置主题">Step7 配置主题<a title="#step7-配置主题" href="#step7-配置主题"></a></h3><p>前边写过配置主题的博文 抛出一个传送门：</p><p><a href="http://www.ivan-zcy.top/2018/09/28/hexo%E6%9B%B4%E6%8D%A2%E4%B8%BB%E9%A2%98%E6%B5%81%E7%A8%8B/" target="_blank">滴滴，我是传送门</a></p><p>（主题在github上 知乎上 hexo官网上有很多很多 适合自己就好）</p><h3 id="注意点！！！！">注意点！！！！<a title="#注意点！！！！" href="#注意点！！！！"></a></h3><p>一些主题的功能需要我们自己预先创建好对应的页面，例如标签tags 关于about等等等等</p><p>此时我们需要在本地Blog路径下</p><p>1 添加关于页面（可选）</p><p>使用：<code>hexo new page &quot;about&quot;</code>新建一个 关于我 页面。<br>主题的 <code>_config.yml</code>文件中的 <code>menu</code>中进行匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;      &#x2F;&#x2F;主页</span><br><span class="line">  categories: &#x2F;categories &#x2F;&#x2F;分类</span><br><span class="line">  archives: &#x2F;archives   &#x2F;&#x2F;归档</span><br><span class="line">  tags: &#x2F;tags   &#x2F;&#x2F;标签</span><br><span class="line">  about: &#x2F;about   &#x2F;&#x2F;关于                  （添加此行即可）</span><br></pre></td></tr></table></figure><p>也可在本地博客路径 –&gt; source –&gt; about文件下，通过修改其中的index.md对其页面进行配置</p><p>2 添加标签页面（可选）</p><p>使用： <code>hexo new page tags</code>新建一个 标签 页面。<br>主题的 <code>_config.yml</code>文件中的 <code>menu</code>中进行匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F;      &#x2F;&#x2F;主页</span><br><span class="line">  categories: &#x2F;categories &#x2F;&#x2F;分类</span><br><span class="line">  archives: &#x2F;archives   &#x2F;&#x2F;归档</span><br><span class="line">  tags: &#x2F;tags   &#x2F;&#x2F;标签                  （添加此行即可）</span><br><span class="line">  about: &#x2F;about   &#x2F;&#x2F;关于</span><br></pre></td></tr></table></figure><p>也可在本地博客路径 –&gt; source –&gt; tags文件下，通过修改其中的index.md对其页面进行配置</p><p>除了上边两个之外还有分类categories，自定义页面等等就不一一列举啦 自行百度吧！</p><h3 id="step8-发布博文">Step8 发布博文<a title="#step8-发布博文" href="#step8-发布博文"></a></h3><p>接着抛链接：</p><p><a href="http://www.ivan-zcy.top/2018/09/28/hexo%E5%8F%91%E8%A1%A8%E5%8D%9A%E5%AE%A2%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/" target="_blank">滴滴，我也是一个传送门</a></p><h3 id="step9-绑定个人域名">Step9 绑定个人域名<a title="#step9-绑定个人域名" href="#step9-绑定个人域名"></a></h3><p>步骤：</p><p>1 购买域名</p><p>建议从<a href="https://account.aliyun.com/login/login.htm?oauth_callback=http%3A%2F%2Fnetcn.console.aliyun.com%2Fcore%2Fdomain%2Flist%3Fspm%3Da2c1d.8251892.0.0.4f0f52f2SzXZY4" target="_blank">阿里云平台</a>啦之类的国内大型平台购买（这一步通常需要身份验证之类的 大概需要几天时间吧也记不清楚了 反正挺麻烦挺磨唧的）</p><p>2 配置DNS地址</p><p>进入阿里云控制台 –&gt; 域名 –&gt; 域名列表 找到自己的域名 点击下图红圈圈的“管理”</p><p><img src="http://www.ivan-zcy.top/2018/09/30/Blog%E6%90%AD%E5%BB%BA%E6%B5%81%E7%A8%8B-Mac%E7%B3%BB%E7%BB%9F%E5%AE%8C%E7%BB%93%E5%B8%96/1.png" alt="1" class="φbs"></p><p>3 进行域名解析</p><p>找到管理界面下的域名解析 在其中添加3条记录（username是github的用户名）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@          A             192.30.252.153</span><br><span class="line">@          A             192.30.252.154</span><br><span class="line">www      CNAME         username.github.io.</span><br></pre></td></tr></table></figure><p>4添加CNAME文件<br>新建一个名为CNAME的文件(无后缀)，内容为你的域名地址。将该文件放到本地博客的source文件夹里面，并更新到Github</p><p>这时候你的博客就建完啦！</p><p>最后附上主页地址： <a href="http://www.ivan-zcy.top/" target="_blank">戳我</a></p><p>一起造作吧！！！！</p><h4 id="参考链接：">参考链接：<a title="#参考链接：" href="#参考链接："></a></h4><p><a href="https://segmentfault.com/a/1190000008040387">https://segmentfault.com/a/1190000008040387</a></p><p><a href="https://blog.csdn.net/ganzhilin520/article/details/79047249">https://blog.csdn.net/ganzhilin520/article/details/79047249</a></p><p><a href="https://www.jianshu.com/p/e5f95eb990ad">https://www.jianshu.com/p/e5f95eb990ad</a></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文转自: &lt;a href=&quot;http://www.ivan-zcy.top/&quot; target=&quot;_blank&quot;&gt;Blog搭建流程(Mac系统完结帖)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文地址: &lt;a href=&quot;http://www.ivan-zcy.top/2018/09/30/Blog&quot;&gt;http://www.ivan-zcy.top/2018/09/30/Blog&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="博客" scheme="https://pinkpeachabc.cn/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="hexo" scheme="https://pinkpeachabc.cn/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Android数据储存</title>
    <link href="https://pinkpeachabc.cn/Android%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98.html"/>
    <id>https://pinkpeachabc.cn/Android%E6%95%B0%E6%8D%AE%E5%82%A8%E5%AD%98.html</id>
    <published>2019-12-31T14:40:26.000Z</published>
    <updated>2020-01-31T12:03:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>大部分应用程序都会涉及数据储存方式，Android程序也不例外。Android中的数据储存方式有五种。分别为文件储存、SharedPreferences、SQLite数据库、ContentProvider以及网络储存。根据程序适配的Android SDK版本不同，申请权限分为两种，分别为静态申请和动态申请权限，这次主要讲怎么申请和遇到过的坑。</p><a id="more"></a><h2 id="文件储存遇到的坑">文件储存遇到的坑<a title="#文件储存遇到的坑" href="#文件储存遇到的坑"></a></h2><blockquote><p>由于Android版本的更新，和现在的手机几乎不再使用SD卡。导致初学者在用这个方法的时候就会出现问题。</p></blockquote><p>在文件存储中分为内部储存和外部储存，出坑的主要是外部储存。在eclipse中可以正常写入可到了Android stuido中却写入不进去。</p><p>首先，若使用外部存储需要先设置外部存储的<strong>读写权限</strong>，若是不添加将无法写入。</p><h2 id="静态申请权限">静态申请权限<a title="#静态申请权限" href="#静态申请权限"></a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br><span class="line">&lt;uses-permission android:name=<span class="string">&quot;android.permission.READ_EXTERNAL_STORAGE&quot;</span> /&gt;</span><br></pre></td></tr></table></figure><blockquote><p>此方式只适应于Android SDK6.0以下的版本，当大于这个版本的时候就需要添加动态申请权限了。</p></blockquote><h2 id="动态申请权限">动态申请权限<a title="#动态申请权限" href="#动态申请权限"></a></h2><p>这时候需要新建PermisionUtils类内容如下，最后在需要的地方调用这个类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">PermisionUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Storage Permissions</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> REQUEST_EXTERNAL_STORAGE = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> String[] PERMISSIONS_STORAGE = &#123;</span><br><span class="line">                Manifest.permission.READ_EXTERNAL_STORAGE,</span><br><span class="line">                Manifest.permission.WRITE_EXTERNAL_STORAGE&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">verifyStoragePermissions</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// Check if we have write permission</span></span><br><span class="line">            <span class="keyword">int</span> permission = ActivityCompat.checkSelfPermission(activity,</span><br><span class="line">                    Manifest.permission.WRITE_EXTERNAL_STORAGE);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (permission != PackageManager.PERMISSION_GRANTED) &#123;</span><br><span class="line">                <span class="comment">// We don&#x27;t have permission so prompt the user</span></span><br><span class="line">                ActivityCompat.requestPermissions(activity, PERMISSIONS_STORAGE,</span><br><span class="line">                        REQUEST_EXTERNAL_STORAGE);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PermisionUtils.verifyStoragePermissions(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><blockquote><p>这个时候在这个时候在点击写入便会出现以下界面：</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gagbsv7y8dj30dy0o0ju8.jpg" alt="屏幕快照 2019-12-31 下午11.14.51" class="φbs"></p><blockquote><p>这时候我本以为可以直接读出来我写入的内容了，但我还是太年轻了。我还是读取不出来。这个点困扰我很长时间知道我发现了手机里有一个应用访问授权。<strong>一定要把它打开！！！</strong></p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gagc0hdlymj30dy0o00ur.jpg" alt="屏幕快照 2019-12-31 下午11.16.01" class="φbs"></p><blockquote><p>最后完美读出</p></blockquote><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gagc1el2e0j30dy0o0q5x.jpg" alt="屏幕快照 2019-12-31 下午11.16.01" class="φbs"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;大部分应用程序都会涉及数据储存方式，Android程序也不例外。Android中的数据储存方式有五种。分别为文件储存、SharedPreferences、SQLite数据库、ContentProvider以及网络储存。根据程序适配的Android SDK版本不同，申请权限分为两种，分别为静态申请和动态申请权限，这次主要讲怎么申请和遇到过的坑。&lt;/p&gt;</summary>
    
    
    
    <category term="Android学习" scheme="https://pinkpeachabc.cn/categories/Android%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="Android" scheme="https://pinkpeachabc.cn/tags/Android/"/>
    
  </entry>
  
</feed>
